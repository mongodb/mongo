/**
 *    Copyright (C) 2025-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 */

#pragma once

#include "mongo/db/exec/agg/stage.h"
#include "mongo/db/pipeline/document_source_union_with.h"
namespace mongo {
namespace exec {
namespace agg {

class UnionWithStage final : public Stage {
public:
    UnionWithStage(StringData stageName,
                   const boost::intrusive_ptr<ExpressionContext>& pExpCtx,
                   const std::shared_ptr<UnionWithSharedState>& sharedState,
                   const NamespaceString& userNss);
    ~UnionWithStage() override {}

    /**
     * Get the stats specific to the Stage. It is legal for the Stage
     * to return nullptr to indicate that no specific stats are available.
     */
    const SpecificStats* getSpecificStats() const override {
        return &_stats;
    }

    void detachFromOperationContext() override;

    void reattachToOperationContext(OperationContext* opCtx) override;

    /**
     * Validate that all operation contexts associated with this document source, including any
     * subpipelines, match the argument.
     */
    bool validateOperationContext(const OperationContext* opCtx) const override;

    bool usedDisk() const override;

protected:
    /**
     * The main execution API of a Stage. Returns an intermediate query result
     * generated by this Stage. See comment at getNext().
     */
    GetNextResult doGetNext() override;

    /**
     * Release any resources held by this stage. After doDispose() is called the stage must still be
     * able to handle calls to getNext(), but can return kEOF.
     */
    void doDispose() override;

private:
    std::shared_ptr<UnionWithSharedState> _sharedState;
    UnionWithStats _stats;
    // The original, unresolved namespace to union.
    const NamespaceString _userNss;
};


}  // namespace agg
}  // namespace exec
}  // namespace mongo
