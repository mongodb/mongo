# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/storage/wiredtiger/wiredtiger_global_options.h"
        - "mongo/db/storage/wiredtiger/wiredtiger_kv_engine.h"
        - "mongo/util/debug_util.h"
    configs:
        section: "WiredTiger options"
        source: [cli, ini, yaml]

server_parameters:
    wiredTigerEngineRuntimeConfig:
        description: "WiredTiger Configuration"
        set_at: runtime
        cpp_class:
            name: WiredTigerEngineRuntimeConfigParameter
            data: "std::pair<synchronized_value<std::string>, WiredTigerKVEngine*>"
        # The data element of this param gets initialized in three
        # disparate ways by different parts of the codebase
        # none of which are easily encoded here.
        # Defer the initialization with condition: false
        # and allow those places to manually set themselves up.
        condition: {expr: false}
        redact: false

    wiredTigerSessionCloseIdleTimeSecs:
        description: "Close idle wiredtiger sessions in the session cache after this many seconds"
        cpp_vartype: "AtomicWord<std::int32_t>"
        cpp_varname: gWiredTigerSessionCloseIdleTimeSecs
        set_at: [startup, runtime]
        default:
            # The default is 5 mins with a shorter default in the debug build to aid testing.
            expr: "kDebugBuild ? 5 : 300"
        validator:
            gte: 0
        redact: false

    wiredTigerCheckpointCleanupPeriodSeconds:
        description: Time (in seconds) to spend waiting between checkpoint cleanups.
        set_at: startup
        cpp_vartype: "std::int32_t"
        cpp_varname: gWiredTigerCheckpointCleanupPeriodSeconds
        # If the user doesn't set a default, let wiredtiger choose one.
        default: 0
        validator:
            gte: 1
            lte: 100000
        redact: false

    # The "wiredTigerCursorCacheSize" parameter has the following meaning.
    #
    # wiredTigerCursorCacheSize == 0
    # For this setting, cursors are only cached in the WiredTiger storage engine
    # itself. Operations that need exclusive access such as drop or verify will
    # not be blocked by inactive cached cursors with this setting. However, this
    # setting may reduce the performance of certain workloads that normally
    # benefit from cursor caching above the storage engine.
    #
    # wiredTigerCursorCacheSize > 0
    # Not supported.
    #
    # wiredTigerCursorCacheSize < 0
    # This is a hybrid approach of the above two, and is the default. The the
    # absolute value of the setting is used as the number of cursors cached above
    # the storage engine. When a session is released, all cursors are closed, and
    # will be cached in WiredTiger. Exclusive operations should only be blocked
    # for a short time, except if a cursor is held by a long running session. This
    # is a good compromise for most workloads.
    wiredTigerCursorCacheSize:
        description: "Wired tiger cursor cache size"
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<std::int32_t>"
        cpp_varname: gWiredTigerCursorCacheSize
        default: -100
        validator:
            lte: 0
        redact: false

    wiredTigerSessionMax:
        description: "WiredTiger session max"
        set_at: startup
        cpp_varname: "wiredTigerGlobalOptions.sessionMax"
        default: 33000
        validator:
            gte: 1
        redact: false

    wiredTigerSessionCacheMaxPercentage:
        description: >-
            This value is a percentage calculated against wiredTigerSessionMax
            representing the maximum number of sessions in the cache
        set_at: startup
        cpp_vartype: "std::int32_t"
        cpp_varname: "gWiredTigerSessionCacheMaxPercentage"
        default: 50
        validator:
            gte: 0
            lte: 100
        redact: false

    wiredTigerFlattenLeafPageDelta:
        description: >-
            WiredTiger page read rewrites the leaf pages with deltas to a new disk image if 
            successful. We will use a ternary where 0=Disabled, 1=Enabled if disaggregatedStorageEnabled is true, 2=Enabled unconditionally.
        set_at: startup
        cpp_varname: "wiredTigerGlobalOptions.flattenLeafPageDelta"
        default: 1
        validator:
            gte: 0
            lte: 2
        redact: false

    wiredTigerEvictionDirtyTargetGB:
        description: >-
            Absolute dirty cache eviction target. Once eviction begins,
            it will proceed until the target of dirty data in the cache
            is reached
            Defaults to 5% cache size
        set_at: startup
        cpp_varname: "wiredTigerGlobalOptions.evictionDirtyTargetGB"
        default: 0
        validator:
            gte: 0.01
            lte: 10000
        redact: false

    wiredTigerEvictionDirtyMaxGB:
        description: >-
            Absolute threshold at which application threads starts dirty cache eviction;
            Defaults to 20% cache size
        set_at: startup
        cpp_varname: "wiredTigerGlobalOptions.evictionDirtyTriggerGB"
        default: 0
        validator:
            gte: 0.01
            lte: 10000
        redact: false

    wiredTigerEvictionUpdatesMaxGB:
        description: >-
            Absolute threshold for updates in cache where eviction starts operating
            aggressively;
            Defaults to half of eviction dirty trigger.
        set_at: startup
        cpp_varname: "wiredTigerGlobalOptions.evictionUpdatesTriggerGB"
        default: 0
        validator:
            gte: 0
            lte: 10000
        redact: false

    wiredTigerEvictionDebugMode:
        description: >-
            If true, modify internal WiredTiger algorithms to force lookaside eviction to happen more
            aggressively.
        set_at: startup
        cpp_vartype: "bool"
        cpp_varname: gWiredTigerEvictionDebugMode
        default: false
        # This parameter is only allowed in debug builds.
        condition:
            constexpr: "kDebugBuild"
        redact: false

    wiredTigerFileHandleCloseIdleTime:
        description: >-
            The amount of time in seconds a file handle in WiredTiger needs to be idle before attempting
            to close it.
        set_at: startup
        cpp_vartype: "std::int32_t"
        cpp_varname: gWiredTigerFileHandleCloseIdleTime
        default: 600
        validator:
            gte: 1
        redact: false

    wiredTigerExtraDiagnostics:
        description: >-
            Extra diagnostics that can be enabled in release mode including diagnostic assertions that can cause WiredTiger to abort upon
            detected invalid state. Valid options include: ["all", "concurrent_access", "data_validation", "invalid_op", "out_of_order",
            "panic", "slow_operation", "visibility"]. In order to make runtime changes, this will need to be reconfigured using
            wiredTigerEngineRuntimeConfigParameter.
        set_at: [startup]
        cpp_vartype: "std::vector<std::string>"
        cpp_varname: "gWiredTigerExtraDiagnostics"
        validator:
            callback: validateExtraDiagnostics
        redact: false

    wiredTigerFileHandleCloseMinimum:
        description: >-
            The number of handles open before the WiredTiger file manager will look for handles to close.
        set_at: startup
        cpp_vartype: "std::int32_t"
        cpp_varname: gWiredTigerFileHandleCloseMinimum
        default: 2000
        validator:
            gte: 1
        redact: false

    wiredTigerFileHandleCloseScanInterval:
        description: >-
            The interval in seconds at which WiredTiger checks for inactive files and closes them.
        set_at: startup
        cpp_vartype: "std::int32_t"
        cpp_varname: gWiredTigerFileHandleCloseScanInterval
        default: 10
        validator:
            gte: 1
        redact: false

    wiredTigerDirectoryForIndexes:
        description: "Read-only view of DirectoryForIndexes config parameter"
        set_at: "readonly"
        cpp_class:
            name: WiredTigerDirectoryForIndexesParameter
        redact: false

    wiredTigerSkipTableLoggingChecksOnStartup:
        description: >-
            Skips table logging setting checks and modifications on startup.
        set_at: startup
        cpp_vartype: "bool"
        cpp_varname: gWiredTigerSkipTableLoggingChecksOnStartup
        default: false
        redact: false

    wiredTigerSkipTableLoggingChecksDuringValidation:
        description: Skips table logging setting checks during validation
        set_at: startup
        cpp_vartype: "bool"
        cpp_varname: gWiredTigerSkipTableLoggingChecksDuringValidation
        default: false
        redact: false

    wiredTigerStressConfig:
        description: >-
            Encourage more interesting races in WiredTiger.
        set_at: startup
        cpp_vartype: bool
        cpp_varname: gWiredTigerStressConfig
        default: false
        redact: false

    wiredTigerSizeStorerPeriodicSyncHits:
        description: >-
            The number of hits after which the size storer will perform a flush.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gWiredTigerSizeStorerPeriodicSyncHits
        default: 100000
        validator:
            gte: 1
        redact: false

    wiredTigerSizeStorerPeriodicSyncPeriodMillis:
        description: >-
            The period in milliseconds after which the size storer will perform a flush.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gWiredTigerSizeStorerPeriodicSyncPeriodMillis
        default: 60000
        validator:
            gte: 1
        redact: false

    wiredTigerVerboseShutdownCheckpointLogs:
        description: >-
            Enables verbose checkpoint logs on shutdown.
        set_at: startup
        cpp_vartype: bool
        cpp_varname: gWiredTigerVerboseShutdownCheckpointLogs
        default: false
        redact: false

    spillWiredTigerEngineRuntimeConfig:
        description: "Spill WiredTiger Configuration"
        set_at: runtime
        cpp_class:
            name: SpillWiredTigerEngineRuntimeConfigParameter
            data: "std::pair<synchronized_value<std::string>, SpillWiredTigerKVEngine*>"
        condition: {expr: false}
        redact: false

    spillWiredTigerCacheSizePercentage:
        description: >-
            The amount of memory, as a percentage of system memory, to allocate for the spill
            WiredTiger instance cache, bounded by spillWiredTigerCacheSizeMinMB and
            spillWiredTigerCacheSizeMaxMB.
        set_at: startup
        cpp_vartype: double
        cpp_varname: gSpillWiredTigerCacheSizePercentage
        default: 2.5
        validator:
            gte: 0
            lte: 10
        redact: false

    spillWiredTigerCacheSizeMinMB:
        description: >-
            The lower bound for spillWiredTigerCacheSizePercentage in MB.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerCacheSizeMinMB
        default: 100
        validator:
            gte: 50
            lte: 10000000 # 10TB
        redact: false

    spillWiredTigerCacheSizeMaxMB:
        description: >-
            The upper bound for spillWiredTigerCacheSizePercentage in MB.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerCacheSizeMaxMB
        default: 1000
        validator:
            gte: 50
            lte: 10000000 # 10TB
        redact: false

    spillWiredTigerEvictionThreadsMin:
        description: >-
            The minimum number of threads that the spill WiredTiger instance will use for cache
            eviction.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerEvictionThreadsMin
        default: 1
        validator:
            gte: 1
            lte: 20
        redact: false

    wiredTigerEvictionThreadsMin:
        description: >-
            The minimum number of threads that the WiredTiger instance will use for cache eviction.
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<std::int32_t>"
        cpp_varname: gWiredTigerEvictionThreadsMin
        on_update: "WiredTigerKVEngine::updateEvictionThreadsMin"
        default: 4
        validator:
            gte: 1
            lte: 64
        redact: false

    wiredTigerEvictionThreadsMax:
        description: >-
            The maximum number of threads that the WiredTiger instance will use for cache eviction.
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<std::int32_t>"
        cpp_varname: gWiredTigerEvictionThreadsMax
        on_update: "WiredTigerKVEngine::updateEvictionThreadsMax"
        default: 4
        validator:
            gte: 1
            lte: 64
        redact: false

    spillWiredTigerEvictionThreadsMax:
        description: >-
            The maximum number of threads that the spill WiredTiger instance will use for cache
            eviction.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerEvictionThreadsMax
        default: 1
        validator:
            gte: 1
            lte: 20
        redact: false

    spillWiredTigerEvictionDirtyTargetPercentage:
        description: >-
            Percentage threshold at which eviction threads start dirty cache eviction on the spill engine.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerEvictionDirtyTargetPercentage
        default: 5
        validator:
            gte: 1
            lte: 100
        redact: false

    spillWiredTigerEvictionDirtyTriggerPercentage:
        description: >-
            Percentage threshold at which application threads start dirty cache eviction on the spill engine.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerEvictionDirtyTriggerPercentage
        default: 80
        validator:
            gte: 1
            lte: 100
        redact: false

    spillWiredTigerEvictionUpdatesTriggerPercentage:
        description: >-
            Percentage threshold for updates in cache at which eviction starts operating aggressively on the spill engine.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerEvictionUpdatesTriggerPercentage
        default: 80
        validator:
            gte: 1
            lte: 100
        redact: false

    spillWiredTigerBlockCompressor:
        description: >-
            The block compressor [none|snappy|zlib|zstd] to use data written by the spill WiredTiger
            instance.
        set_at: startup
        cpp_vartype: std::string
        cpp_varname: gSpillWiredTigerBlockCompressor
        default: "zstd"
        validator:
            callback: WiredTigerGlobalOptions::validateSpillWiredTigerCompressor
        redact: false

    spillWiredTigerZstdCompressionLevel:
        description: >-
            The zstd compression level to use for the spill WiredTiger instance. Has no effect if
            spillWiredTigerBlockCompressor is not set to zstd.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerZstdCompressionLevel
        default: -7
        validator:
            gte: -7
            lte: 22
        redact: false

    spillWiredTigerSessionMax:
        description: "The WiredTiger session limit for the spill engine"
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gSpillWiredTigerSessionMax
        default: 1024
        validator:
            gte: 1
        redact: false

    spillWiredTigerEngineConfig:
        description: >-
            The config string of WiredTiger storage engine options used for the spill engine.
        set_at: startup
        cpp_vartype: std::string
        cpp_varname: gSpillWiredTigerEngineConfig
        redact: false

    transactionTooLargeForCacheThreshold:
        description:
            "Threshold on the proportion of total dirty cache bytes that the running
            transaction's dirty cache bytes can represent and still be considered
            fullfillable on retry. If this threshold is exceeded, a
            TransactionTooLargeForCache exception is thrown. Setting this parameter to 1.0
            causes this check to be disabled, and TransactionTooLargeForCache exceptions
            will not be thrown."
        set_at: [startup, runtime]
        cpp_varname: "gTransactionTooLargeForCacheThreshold"
        cpp_vartype: AtomicWord<double>
        default: 0.75
        validator:
            gte: 0.0
            lte: 1.0
        redact: false

configs:
    # WiredTiger storage engine options
    "storage.wiredTiger.engineConfig.cacheSizeGB":
        description: >-
            Maximum amount of memory to allocate for cache in GB;
            Defaults to 1/2 of physical RAM. Only one of either
            wiredTigerCacheSizePct or wiredTigerCacheSizeGB can
            be provided
        arg_vartype: Double
        cpp_varname: "wiredTigerGlobalOptions.cacheSizeGB"
        short_name: wiredTigerCacheSizeGB
        validator:
            gte: 0.25
            lte: 10000
    "storage.wiredTiger.engineConfig.cacheSizePct":
        description: >-
            Maximum amount of memory to allocate for cache as a percentage of physical RAM;
            Defaults to 1/2 of physical RAM and a minimum of 256MB. Only one of either
            wiredTigerCacheSizePct or wiredTigerCacheSizeGB can
            be provided
        arg_vartype: Double
        cpp_varname: "wiredTigerGlobalOptions.cacheSizePct"
        short_name: wiredTigerCacheSizePct
        validator:
            gte: 0
            lte: 0.8
    "storage.wiredTiger.engineConfig.statisticsLogDelaySecs":
        # FTDC supersedes WiredTiger's statistics logging.
        description: >-
            Seconds to wait between each write to a statistics file in the dbpath;
            0 means do not log statistics
        arg_vartype: Int
        cpp_varname: "wiredTigerGlobalOptions.statisticsLogDelaySecs"
        short_name: wiredTigerStatisticsLogDelaySecs
        hidden: true
        validator:
            gte: 0
            lte: 100000
        default: 0
    "storage.wiredTiger.engineConfig.zstdCompressionLevel":
        description: "Default compression level for zstd compressor"
        arg_vartype: Int
        cpp_varname: "wiredTigerGlobalOptions.zstdCompressorLevel"
        short_name: zstdDefaultCompressionLevel
        validator:
            gte: -7
            lte: 22
        default: 6
    "storage.wiredTiger.engineConfig.journalCompressor":
        description: "Use a compressor for log records [none|snappy|zlib|zstd]"
        arg_vartype: String
        cpp_varname: "wiredTigerGlobalOptions.journalCompressor"
        short_name: wiredTigerJournalCompressor
        default: "snappy"
        validator:
            callback: "WiredTigerGlobalOptions::validateWiredTigerCompressor"
    "storage.wiredTiger.engineConfig.directoryForIndexes":
        description: "Put indexes and data in different directories"
        arg_vartype: Switch
        cpp_varname: "wiredTigerGlobalOptions.directoryForIndexes"
        short_name: wiredTigerDirectoryForIndexes
    "storage.wiredTiger.engineConfig.maxCacheOverflowFileSizeGB":
        description: >-
            Maximum amount of disk space to use for cache overflow;
            Defaults to 0 (unbounded)
            Deprecated. Has no effect on storage engine operation.
        arg_vartype: Double
        cpp_varname: "wiredTigerGlobalOptions.maxCacheOverflowFileSizeGBDeprecated"
        short_name: wiredTigerMaxCacheOverflowFileSizeGB
        default: 0.0
        hidden: true
    "storage.wiredTiger.engineConfig.configString":
        description: "WiredTiger storage engine custom configuration setting"
        arg_vartype: String
        cpp_varname: "wiredTigerGlobalOptions.engineConfig"
        short_name: wiredTigerEngineConfigString
        hidden: true
    "storage.wiredTiger.engineConfig.liveRestoreSource":
        description: "Path to the source for live restore."
        arg_vartype: String
        cpp_varname: "wiredTigerGlobalOptions.liveRestoreSource"
        short_name: wiredTigerLiveRestoreSource
    "storage.wiredTiger.engineConfig.liveRestoreThreads":
        description: "Number of live restore background threads."
        arg_vartype: Int
        cpp_varname: "wiredTigerGlobalOptions.liveRestoreThreads"
        short_name: wiredTigerLiveRestoreThreads
        validator:
            gte: 0
            lte: 12
        default: 8
    "storage.wiredTiger.engineConfig.liveRestoreReadSizeMB":
        description: >-
            'The read size for data migration, in MB, must be a power of two.
            This setting is a best effort. It does not force every read to be this size.'
        arg_vartype: Int
        cpp_varname: "wiredTigerGlobalOptions.liveRestoreReadSizeMB"
        short_name: wiredTigerLiveRestoreReadSizeMB
        validator:
            callback: WiredTigerGlobalOptions::validateWiredTigerLiveRestoreReadSizeMB
        default: 1

    # WiredTiger collection options
    "storage.wiredTiger.collectionConfig.blockCompressor":
        description: "Block compression algorithm for collection data [none|snappy|zlib|zstd]"
        arg_vartype: String
        cpp_varname: "wiredTigerGlobalOptions.collectionBlockCompressor"
        short_name: wiredTigerCollectionBlockCompressor
        validator:
            callback: "WiredTigerGlobalOptions::validateWiredTigerCompressor"
        default: snappy
    "storage.wiredTiger.collectionConfig.configString":
        description: "WiredTiger custom collection configuration settings"
        arg_vartype: String
        cpp_varname: "wiredTigerGlobalOptions.collectionConfig"
        short_name: wiredTigerCollectionConfigString
        hidden: true

    # WiredTiger index options
    "storage.wiredTiger.indexConfig.prefixCompression":
        description: "Use prefix compression on row-store leaf pages"
        arg_vartype: Bool
        cpp_varname: "wiredTigerGlobalOptions.useIndexPrefixCompression"
        short_name: wiredTigerIndexPrefixCompression
        default: true
    "storage.wiredTiger.indexConfig.configString":
        description: "WiredTiger custom index configuration settings"
        arg_vartype: String
        cpp_varname: "wiredTigerGlobalOptions.indexConfig"
        short_name: wiredTigerIndexConfigString
        hidden: true
