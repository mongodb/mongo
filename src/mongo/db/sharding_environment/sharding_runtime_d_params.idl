# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.

global:
    cpp_namespace: mongo
    cpp_includes:
        - "mongo/db/sharding_environment/sharding_runtime_d_params.h"

server_parameters:
    chunkMigrationConcurrency:
        description: >-
            The number of threads doing insertions on the recipient during a chunk migration and
            also the number of _migrateClone requests that the recipient sends to the source in parallel.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: chunkMigrationConcurrency
        default: 1
        redact: false

    chunkMigrationFetcherMaxBufferedSizeBytesPerThread:
        description: >-
            Maximum size of buffered documents that the chunk migration cloner will keep per
            thread. A value of 0 means there will be no limit. The minimum size is the maximum
            BSON size limit.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: chunkMigrationFetcherMaxBufferedSizeBytesPerThread
        validator:
            callback: validateChunkMigrationFetcherMaxBufferedSizeBytesPerThread
        default:
            expr: 4 * BSONObjMaxInternalSize
        redact: false

    rangeDeleterBatchSize:
        description: >-
            The maximum number of documents in each batch to delete during the cleanup stage of chunk
            migration (or the cleanupOrphaned command). Between each batch, secondaryThrottle and
            rangeDeleterBatchDelayMS will apply.

            A value of 0 indicates that the system chooses the default value (INT_MAX).
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: rangeDeleterBatchSize
        validator:
            gte: 0
        default:
            expr: std::numeric_limits<int>::max()
        redact: false

    rangeDeleterBatchDelayMS:
        description: >-
            The amount of time in milliseconds to wait before the next batch of deletion during the
            cleanup stage of chunk migration (or the cleanupOrphaned command).
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: rangeDeleterBatchDelayMS
        validator:
            gte: 0
        default: 20
        redact: false

    receiveChunkWaitForRangeDeleterTimeoutMS:
        description: >-
            Maximum amount of time for which the start of a new chunk migration request may be deferred,
            while pending range deletions that overlap with the request get completed/canceled.
            If overlapping range deletions are still present upon timeout expiration, the request is aborted.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: drainOverlappingRangeDeletionsOnStartTimeoutMS
        validator:
            gte: 0
        default: 10000
        redact: false

    migrateCloneInsertionBatchSize:
        description: >-
            The maximum number of documents to insert in a single batch during the cloning step of
            the migration process. The default value of 0 indicates no maximum number of documents
            per batch. However, in practice, this results in batches that contain up to 16 MB of
            documents. The value 1 corresponds to MongoDB 3.4.16 (and earlier) behavior.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: migrateCloneInsertionBatchSize
        validator:
            gte: 0
        default: 0
        redact: false

    migrateCloneInsertionBatchDelayMS:
        description: >-
            Time in milliseconds to wait between batches of insertions during cloning step of the
            migration process. This wait is in addition to the secondaryThrottle. The default value
            of 0 indicates no additional wait.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: migrateCloneInsertionBatchDelayMS
        validator:
            gte: 0
        default: 0
        redact: false

    migrationLockAcquisitionMaxWaitMS:
        description: "How long to wait to acquire collection lock for migration related operations."
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: migrationLockAcquisitionMaxWaitMS
        default: 500
        redact: false

    maxCatchUpPercentageBeforeBlockingWrites:
        description: >-
            The maximum percentage of untrasferred chunk mods at the end of a catch up iteration
            that may be deferred to the next phase of the migration protocol
            (where new writes get blocked).
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: maxCatchUpPercentageBeforeBlockingWrites
        validator:
            gte: 0
            lte: 100
        default: 10
        redact: false

    orphanCleanupDelaySecs:
        description: How long to wait before starting cleanup of an emigrated chunk range.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: orphanCleanupDelaySecs
        default: 3600
        redact: false

    disableResumableRangeDeleter:
        description: >-
            Disable the resumable range deleter. Ranges will not be submitted for deletion, and if an
            incoming migration sees orphans in the incoming range, the migration will fail.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: disableResumableRangeDeleter
        default: false
        redact: false

    useBatchedDeletesForRangeDeletion:
        description: >-
            When enabled, it changes the range deletion stage plan from DeleteStage to BatchedDeleteStage.
            The BatchedDeleteStage will attempt to delete documents as a batch instead of one-by-one.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: useBatchedDeletesForRangeDeletion
        default: false
        redact: false

    persistedChunkCacheUpdateMaxBatchSize:
        description: >-
            Maximum batch size used for updating shard persisted chunk cache.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: persistedChunkCacheUpdateMaxBatchSize
        validator:
            gte: 1
        default: 1000
        redact: false

    terminateSecondaryReadsOnOrphanCleanup:
        description: >-
            Enables the termination of queries on a secondary node due to orphan cleanup.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: terminateSecondaryReadsOnOrphanCleanup
        default: true
        redact: false

    enableQueryKilledByRangeDeletionLog:
        description: >-
            Enables the log printed when a query gets killed due to a range deletion.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: enableQueryKilledByRangeDeletionLog
        default: true
        redact: false
