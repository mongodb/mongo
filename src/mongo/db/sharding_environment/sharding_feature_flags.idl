# Copyright(C) 2022 - present MongoDB, Inc.
#
# This program is free software : you can redistribute it and / or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program.If not, see
# < http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library.You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein.If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so.If you do not wish to do so,
# delete this exception statement from your version.If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# File containing feature flags for sharding features

global:
    cpp_namespace: "mongo"

feature_flags:
    featureFlagConcurrencyInChunkMigration:
        description: "Feature flag for enabling concurrency within a chunk migration"
        cpp_varname: feature_flags::gConcurrencyInChunkMigration
        default: true
        version: 6.3
        fcv_gated: true
    # TODO (SERVER-68132): Remove once 8.0 becomes last LTS.
    featureFlagClusterFsyncLock:
        description: "Feature flag to enable locking of a cluster through mongos"
        cpp_varname: feature_flags::gClusterFsyncLock
        default: true
        version: 7.1
        fcv_gated: true
    # TODO (SERVER-76436): Remove once 8.0 becomes last LTS.
    featureFlagBalanceUnshardedCollections:
        description: "Feature flag for enabling the balancing of user unsharded collections"
        cpp_varname: feature_flags::gBalanceUnshardedCollections
        default: false
        fcv_gated: true
    featureFlagShardedAggregationCatalogCacheGossiping:
        description:
            "Feature flag that makes routers executing distributed aggregations that involve
            secondary collections request the shards to gossip back the catalog cache versions
            for these collections."
        cpp_varname: feature_flags::gShardedAggregationCatalogCacheGossiping
        default: true
        version: 8.0
        fcv_gated: true
        fcv_context_unaware: true
    # TODO (SERVER-81037): enable this feature flag once it's possible to detect prepare conflicts on the catalog
    featureFlagCreateCollectionInPreparedTransactions:
        description: "Feature flag protecting the codepath allowing to create collections in prepared transactions "
        cpp_varname: feature_flags::gCreateCollectionInPreparedTransactions
        default: false
        fcv_gated: true
    # TODO (SERVER-77915): Remove once 8.0 becomes last LTS.
    featureFlagTrackUnshardedCollectionsUponMoveCollection:
        description: "Feature flag for enabling the tracking of user unsharded collection upon moveCollection"
        cpp_varname: feature_flags::gTrackUnshardedCollectionsUponMoveCollection
        default: true
        version: 8.0
        fcv_gated: true
        fcv_context_unaware: true
    # TODO (SERVER-77915): Remove once 8.0 becomes last LTS.
    featureFlag80CollectionCreationPath:
        description:
            "Feature flag protecting all codepaths that rely on the 8.0 way of collection creation in a
            sharded cluster. Namely, no implicit creations by the shards and no usage of the
            storage-level create command."
        cpp_varname: feature_flags::g80CollectionCreationPath
        default: true
        version: 8.0
        fcv_gated: true
        fcv_context_unaware: true
    featureFlagReplicaSetEndpoint:
        description:
            When enabled, allows users to connect to a single-shard cluster with no dedicated config
            server using a replica set connection string.
        cpp_varname: feature_flags::gFeatureFlagReplicaSetEndpoint
        default: false
        fcv_gated: true
    featureFlagCreateDatabaseDDLCoordinator:
        description: >
            Feature flag for enabling the sharding DDL coordinator for database creation.

            (Enable on transitional FCV): This DDL coordinator is needed during the transition
            phase of authoritative databases (featureFlagShardAuthoritativeDbMetadataDDL).
            If this feature flag is disabled by a FCV downgrade, all instances of this DDL
            coordinator are drained when finalizing the downgrade.
        cpp_varname: feature_flags::gCreateDatabaseDDLCoordinator
        default: true
        version: 8.2
        fcv_gated: true
        enable_on_transitional_fcv_UNSAFE: true
    # TODO (SERVER-95599): remove once 9.0 becomes last LTS.
    featureFlagConfigDebugDumpSupported:
        description: "The configDebugDump flag is supported in listCollections and $listCatalog."
        cpp_varname: feature_flags::gConfigDebugDumpSupported
        default: true
        version: 8.1
        fcv_gated: true
    # TODO (SERVER-104762): remove once 9.0 becomes last LTS.
    featureFlagDatabaseDualCatalogCache:
        description:
            "Feature flag to enable one catalog cache for the shard role and another one for
            the router role, only for database metadata usages."
        cpp_varname: feature_flags::gDatabaseDualCatalogCache
        default: true
        fcv_gated: false
    # TODO (SERVER-97261): remove once 9.0 becomes last LTS.
    featureFlagDualCatalogCache:
        description:
            "Feature flag to enable one catalog cache for the shard role and another one for
            the router role."
        cpp_varname: feature_flags::gDualCatalogCache
        default: false
        fcv_gated: false
    featureFlagUseTopologyChangeCoordinators:
        description: "Feature flag for enabling the coordinator based topology changes."
        cpp_varname: feature_flags::gUseTopologyChangeCoordinators
        default: true
        version: 8.2
        fcv_gated: true
    # TODO (SERVER-98118): remove once 9.0 becomes last LTS.
    featureFlagShardAuthoritativeDbMetadataCRUD:
        description:
            "Feature flag to enable the authoritative model to read database metadata from
            stored shard-local information"
        cpp_varname: feature_flags::gShardAuthoritativeDbMetadataCRUD
        default: false
        fcv_gated: true
    # TODO (SERVER-98118): remove once 9.0 becomes last LTS.
    featureFlagShardAuthoritativeDbMetadataDDL:
        description: >
            Feature flag to enable the authoritative model to store shard-local information
            for database metadata.

            (Enable on transitional FCV): Enables cloning and writing of authoritative database
            metadata in shards during the transition phase, so that once the FCV is fully upgraded,
            operations can start reading from it (via featureFlagShardAuthoritativeDbMetadataCRUD).
            If this feature flag is disabled by a FCV downgrade, all DDL coordinators checking
            this flag are drained when finalizing the downgrade.
        cpp_varname: feature_flags::gShardAuthoritativeDbMetadataDDL
        default: false
        fcv_gated: true
        enable_on_transitional_fcv_UNSAFE: true
    # TODO (SERVER-89169): remove once 9.0 becomes last LTS.
    featureFlagShardAuthoritativeCollMetadata:
        description:
            "Feature flag to enable the authoritative model for storing shard-local information
            for collections and chunks metadata."
        cpp_varname: feature_flags::gShardAuthoritativeCollMetadata
        default: false
        fcv_gated: true
    # TODO (SERVER-100309): remove once 9.0 becomes last LTS.
    featureFlagSessionsCollectionCoordinatorOnConfigServer:
        description:
            Feature flag for running the shard collection coordinator on the config server for
            config.system.sessions.
        cpp_varname: feature_flags::gSessionsCollectionCoordinatorOnConfigServer
        default: false
        fcv_gated: true
    featureFlagTerminateSecondaryReadsUponRangeDeletion:
        description: "Feature flag to enable the termination of secondary reads due to range deletions."
        cpp_varname: feature_flags::gTerminateSecondaryReadsUponRangeDeletion
        default: true
        version: 8.2
        fcv_gated: true
    # TODO (SERVER-99655): remove this feature flag
    featureFlagSnapshotFCVInDDLCoordinators:
        description: >
            Feature flag to enable snapshotting of the operation FCV at the start of DDL operations.

            (Enable on transitional FCV): Necessary to ensure that DDL coordinators have a stable
            view of all feature flags with a version greater or equal than this feature flag.
            See SERVER-102084 for more detail.
            If this feature flag is disabled by a FCV downgrade, all DDL coordinators with an
            operation FCV are drained when finalizing the downgrade.
        cpp_varname: feature_flags::gSnapshotFCVInDDLCoordinators
        default: true
        version: 8.2
        fcv_gated: true
        enable_on_transitional_fcv_UNSAFE: true
    # TODO (SERVER-104536): remove this feature flag once 9.0 becomes LTS.
    featureFlagCheckRangeDeletionsWithMissingShardKeyIndex:
        description: "Feature flag to enable detecting an inconsistency when a collection has an outstanding range deletion without a supporting shard key index during CheckMetadataConsistency."
        cpp_varname: feature_flags::gCheckRangeDeletionsWithMissingShardKeyIndex
        default: true
        version: 8.2
        fcv_gated: true
    # TODO (SERVER-103838): remove feature once 9.0 becomes LTS.
    featureFlagPersistRecipientPlacementInfoInMigrationRecoveryDoc:
        description:
            "When enabled, the MigrationCoordinator will include in its recovery document metadata on
            the placement status of the recipient shard (such information is used to ensure the
            generation of the 'migrateChunkToNewShard' change stream events in case of donor step downs)."
        cpp_varname: feature_flags::gPersistRecipientPlacementInfoInMigrationRecoveryDoc
        default: true
        version: 8.2
        fcv_gated: true
    # TODO (SERVER-103458): remove feature once 9.0 becomes LTS.
    featureFlagCheckInvalidDatabaseInGlobalCatalog:
        description:
            "When enabled, metadata consistency check will ensure that there aren't any unexpected databases
            in the global catalog."
        cpp_varname: feature_flags::gCheckInvalidDatabaseInGlobalCatalog
        default: false
        fcv_gated: true
    # TODO (SERVER-107148): remove feature once 9.0 becomes LTS.
    featureFlagDropIndexesDDLCoordinator:
        description: "Enable the sharding DDL coordinator for drop indexes operations"
        cpp_varname: feature_flags::gFeatureFlagDropIndexesDDLCoordinator
        default: false
        fcv_gated: true
    # TODO (SERVER-109312): remove feature once 9.0 becomes LTS.
    featureFlagEnableReplicasetTransitionToCSRS:
        description: "Enable the transitioning from a replica set to a sharded cluster with an embedded config server"
        cpp_varname: feature_flags::gFeatureFlagEnableReplicasetTransitionToCSRS
        default: true
        version: 8.3
        fcv_gated: true
    # TODO (SERVER-109004): remove feature flag once 9.0 becomes last LTS.
    featureFlagPreventDirectShardDDLsDuringPromotion:
        description: "Enable the prevention of direct shard connection DDL operations during addShard"
        cpp_varname: feature_flags::gFeatureFlagPreventDirectShardDDLsDuringPromotion
        default: false
        fcv_gated: true
