# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#
global:
    cpp_namespace: "mongo"

imports:
    - "mongo/db/basic_types.idl"
    - "mongo/db/sharding_environment/sharding_types.idl"

structs:
    AdditionalParticipantInfo:
        description:
            "Contains information about a participant added to the transaction by
            another participant"
        strict: false
        fields:
            shardId:
                description: "The name of the shard that was added as a participant"
                type: shard_id
            readOnly:
                description:
                    "True if the shard has the transaction in progress but has not done a
                    write for it"
                optional: true
                type: bool

    TxnResponseMetadata:
        description:
            "Contains fields a participant attaches in responses to successful transaction
            statements"
        strict: false
        fields:
            readOnly:
                description:
                    "True if the shard has the transaction in progress but has not done a
                    write for it"
                optional: true
                type: bool
            additionalParticipants:
                description: "Additional participants in the transaction"
                optional: true
                type: array<AdditionalParticipantInfo>

    TxnRecoveryToken:
        description: "Contains info for retrying the commit of a sharded transaction"
        fields:
            recoveryShardId:
                description: "The id of the shard that can make progress committing the transaction"
                type: shard_id
                optional: true
                stability: stable

    CommitTransactionOplogObject:
        description: A document representing the 'o' field of a 'commitTransaction' oplog entry.
        fields:
            commitTransaction:
                type: int
                default: 1
            commitTimestamp:
                type: timestamp
                optional: true
                description:
                    "Specifies the timestamp at which the multi-document transaction should
                    be committed.  Required for prepared transactions, not permitted for
                    unprepared ones."
            count:
                type: long
                optional: true
                description:
                    "The number of in-transaction operations applied in a transaction.
                    This field is required only for unprepared transactions."

    AbortTransactionOplogObject:
        description: A document representing the 'o' field of an 'abortTransaction' oplog entry.
        fields:
            abortTransaction:
                type: int
                default: 1

commands:
    commitTransaction:
        description: "commitTransaction Command"
        command_name: commitTransaction
        namespace: ignored
        cpp_name: CommitTransaction
        strict: true
        api_version: "1"
        access_check:
            none: true
        fields:
            commitTimestamp:
                description:
                    "Timestamp at which to commit the transaction. Required for prepared
                    transactions and illegal for non-prepared ones."
                optional: true
                type: timestamp
                stability: stable
            recoveryToken:
                description:
                    "A mongos that doesn't know about this transaction can attempt to make
                    progress on commit by processing using the info in the recoveryToken."
                optional: true
                type: TxnRecoveryToken
                stability: stable
        reply_type: OkReply

    abortTransaction:
        description: "abortTransaction Command"
        command_name: abortTransaction
        namespace: ignored
        cpp_name: AbortTransaction
        strict: true
        api_version: "1"
        access_check:
            none: true
        fields:
            recoveryToken:
                description:
                    "A mongos that doesn't know about this transaction can attempt to make
                    progress on abort by processing using the info in the recoveryToken."
                optional: true
                type: TxnRecoveryToken
                stability: stable
        reply_type: OkReply
