# Copyright (C) 2023-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/db/basic_types.idl"

enums:
    ExampleEnum:
        description: ""
        type: string
        values:
            Value1: "EnumValue1"
            Value2: "EnumValue2"

structs:
    NestedStruct:
        query_shape_component: true
        strict: true
        description: ""
        fields:
            stringField:
                query_shape: literal
                type: string
            enumField:
                query_shape: parameter
                type: ExampleEnum
            stringIntVariant:
                query_shape: literal
                type:
                    variant: [string, int]
            stringIntVariantEnum:
                query_shape: parameter
                type:
                    variant: [string, int]
            arrayOfInts:
                query_shape: literal
                type: array<int>
            fieldpath:
                query_shape: anonymize
                type: string
            fieldpathList:
                query_shape: anonymize
                type: array<string>
            nss:
                query_shape: custom
                type: namespacestring
            plainNss:
                query_shape: parameter
                type: namespacestring
            safeInt64Field:
                query_shape: literal
                type: safeInt64
            boolField:
                query_shape: literal
                type: bool

    ParentStruct:
        query_shape_component: true
        strict: true
        description: ""
        fields:
            nested_shape:
                query_shape: literal
                type: NestedStruct
            nested_no_shape:
                query_shape: parameter
                type: NestedStruct
