# Copyright (C) 2025-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/query/client_cursor/cursor_id.h"
        - "mongo/db/query/client_cursor/release_memory_util.h"

imports:
    - "mongo/db/auth/access_checks.idl"
    - "mongo/db/auth/action_type.idl"
    - "mongo/db/basic_types.idl"

types:
    cursorId:
        bson_serialization_type: long
        description: "Uniquely identifies a single cursor on a particular mongoS or mongoD."
        cpp_type: mongo::CursorId
        deserializer: "mongo::BSONElement::_numberLong"
        is_view: false

structs:
    ReleaseMemoryError:
        description: >-
            A structure that holds a cursor id and an error that happened during
            releasing memory for this cursor.
        fields:
            cursorId:
                type: cursorId
            status:
                type: error_status
                optional: true

    ReleaseMemoryCommandReply:
        description: "Response from releaseMemory command"
        strict: false
        is_command_reply: true
        fields:
            cursorsReleased:
                description: "Cursors that have successfully released memory"
                type: array<cursorId>
            cursorsNotFound:
                description: "Cursors not found"
                type: array<cursorId>
            cursorsCurrentlyPinned:
                description: "Cursors that were already pinned during command execution"
                type: array<cursorId>
            cursorsWithErrors:
                description: "Cursors for which release memory failed with an error."
                type: array<ReleaseMemoryError>

commands:
    releaseMemory:
        description: "Request a specified set of cursors by ID to release memory, if possible."
        command_name: releaseMemory
        cpp_name: ReleaseMemoryCommandRequest
        reply_type: ReleaseMemoryCommandReply
        api_version: ""
        access_check:
            complex:
                - privilege:
                      resource_pattern: cluster
                      action_type: releaseMemoryAnyCursor
                - privilege:
                      resource_pattern: database
                      action_type: releaseMemoryAnyCursor
                - privilege:
                      resource_pattern: exact_namespace
                      action_type: releaseMemoryAnyCursor
        strict: true
        namespace: type
        type: array<cursorId>
