# Copyright (C) 2025-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/db/basic_types.idl"
    - "mongo/db/global_catalog/ddl/sharding_ddl_coordinator.idl"

enums:
    AddShardCoordinatorPhase:
        description: "Current add shard coordinator's operation state."
        type: string
        values:
            kUnset: "unset"
            kCheckLocalPreconditions: "checkLocalPreconditions"
            kCheckShardPreconditions: "checkShardPreconditions"
            kPrepareNewShard: "prepareNewShard"
            kEnterCriticalSection: "enterCriticalSection"
            kCommit: "commit"
            kExitCriticalSection: "exitCriticalSection"
            kCleanup: "cleanup"
            kFinal: "final"

structs:
    AddShardCoordinatorDocument:
        description: "Object with necessary fields to add a shard."
        generate_comparison_operators: false
        strict: false
        chained_structs:
            ShardingDDLCoordinatorMetadata: ShardingDDLCoordinatorMetadata
        fields:
            connectionString:
                type: connection_string
                description: "Connection string for the new shard"
            proposedName:
                type: string
                description: "A proposed name for the new shard"
                optional: true
            isConfigShard:
                type: bool
                description: "Specifies if the new shard is supposed to be a config shard"
            phase:
                type: AddShardCoordinatorPhase
                description: "Coordinator phase"
                default: kUnset
            chosenName:
                type: string
                description: "The chosen name for the new shard"
                optional: true
            originalUserWriteBlockingLevel:
                type: int
                description: >
                    "Original user write blocking level of the replica set being added to a sharded
                    cluster that has to be restored after an unsuccessful addShard"
                optional: true
            apiParams:
                type: object
                description: "The API parameter attached to the config server command"
                optional: true
            preExistingDatabasesOnPromotion:
                type: array<database_name>
                description: >
                    "List of databases that exist on the replicaset when it gets promoted to a
                    shard"
