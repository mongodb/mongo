# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/ftdc/ftdc_server.h"

imports:
    - "mongo/db/basic_types.idl"

server_parameters:
    diagnosticDataCollectionEnabled:
        description: "Determines whether to enable the collecting and logging of data for diagnostic purposes"
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.enabled"
        on_update: "onUpdateFTDCEnabled"
        redact: false

    diagnosticDataCollectionPeriodMillis:
        description: "Specifies the interval, in milliseconds, at which to collect diagnostic data."
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.periodMillis"
        on_update: "onUpdateFTDCPeriod"
        validator:
            gte: 100
        redact: false

    diagnosticDataCollectionMetadataCaptureFrequency:
        description: "Specifies the interval, in instances of diagnostic data collection, at which to collect diagnostic config metadata."
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.metadataCaptureFrequency"
        on_update: "onUpdateFTDCMetadataCaptureFrequency"
        validator:
            gte: 1
        redact: false

    diagnosticDataCollectionSampleTimeoutMillis:
        description:
            "Determines the timeout that each FTDC collector will be waited on during every
            sample. This is only used for async FTDC collectors."
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.sampleTimeoutMillis"
        on_update: "onUpdateFTDCSampleTimeout"
        validator:
            callback: "validateSampleTimeoutMillis" # The callback is declared in "ftdc_server.h"
        redact: false

    diagnosticDataCollectionMinThreads:
        description:
            "Determines the minimum number of async threads to keep-alive in the async FTDC
            collector threadpool. Runtime updates require a join on the threadpool which could
            cause temporary collection delay."
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.minThreads"
        on_update: "onUpdateFTDCMinThreads"
        validator:
            gte: 1
        redact: false

    diagnosticDataCollectionMaxThreads:
        description:
            "Determines the maximum number of async threads to scale to in the async FTDC
            collector threadpool. Runtime updates require a join on the threadpool which could
            cause temporary collection delay."
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.maxThreads"
        on_update: "onUpdateFTDCMaxThreads"
        validator:
            lte: 10
        redact: false

    diagnosticDataCollectionDirectorySizeMB:
        description: "Specifies the maximum size, in megabytes, of the diagnostic.data directory"
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.maxDirectorySizeMB"
        on_update: "onUpdateFTDCDirectorySize"
        validator:
            gte: 10
        redact: false

    diagnosticDataCollectionFileSizeMB:
        description: Specifies the maximum size, in megabytes, of each diagnostic file"
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.maxFileSizeMB"
        on_update: "onUpdateFTDCFileSize"
        validator:
            gte: 1
        redact: false

    diagnosticDataCollectionSamplesPerChunk:
        description: "Internal, Specifies the number of samples per diagnostic archive chunk"
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.maxSamplesPerArchiveMetricChunk"
        on_update: "onUpdateFTDCSamplesPerChunk"
        validator:
            gte: 2
        redact: false

    diagnosticDataCollectionSamplesPerInterimUpdate:
        description: "Internal, Specifies the number of samples per diagnostic interim update"
        set_at: [startup, runtime]
        cpp_varname: "ftdcStartupParams.maxSamplesPerInterimMetricChunk"
        on_update: "onUpdateFTDCPerInterimUpdate"
        validator:
            gte: 2
        redact: false

    diagnosticDataCollectionDirectoryPath:
        description: "Specify the directory for the diagnostic data directory."
        set_at: [startup, runtime]
        cpp_class: DiagnosticDataCollectionDirectoryPathServerParameter
        redact: false

    diagnosticDataCollectionEnableLatencyHistograms:
        description: "Enable the capture of opLatencies: { histograms: true } } in FTDC."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<bool>"
        cpp_varname: gDiagnosticDataCollectionEnableLatencyHistograms
        redact: false

    diagnosticDataCollectionVerboseTCMalloc:
        description: "Enable the capture of verbose tcmalloc in FTDC."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<bool>"
        cpp_varname: gDiagnosticDataCollectionVerboseTCMalloc
        redact: false

    spillWiredTigerServerStatusVerbosity:
        description: >-
            The verbosity level of WiredTiger stats included in server status for the spill engine. The 3 
            levels are:
            - Level 0: No WiredTiger stats included
            - Level 1: Select WiredTiger stats included
            - Level 2: All WiredTiger stats included
        set_at: [startup, runtime]
        cpp_vartype: Atomic<int32_t>
        cpp_varname: gSpillWiredTigerServerStatusVerbosity
        default: 1
        validator:
            gte: 0
            lte: 2
        redact: false
