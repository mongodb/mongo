# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/timeseries/timeseries_global_options.h"

imports:
    - "mongo/db/basic_types.idl"

server_parameters:
    "performTimeseriesCompressionIntermediateDataIntegrityCheckOnReopening":
        description:
            "Whether or not to perform data integrity checks when inserting measurements
            into compressed time-series buckets that are reopened. On by default, can be
            turned off for a performance boost."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<bool>"
        cpp_varname: "gPerformTimeseriesCompressionIntermediateDataIntegrityCheckOnReopening"
        default: true
        redact: false

    "performTimeseriesCompressionIntermediateDataIntegrityCheckOnInsert":
        description:
            "Whether or not to perform data integrity checks when inserting measurements
            into compressed time-series buckets."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<bool>"
        cpp_varname: "gPerformTimeseriesCompressionIntermediateDataIntegrityCheckOnInsert"
        default: false
        redact: false

    "timeseriesBucketMaxCount":
        description: "Maximum number of measurements to store in a single bucket"
        set_at: [startup]
        cpp_vartype: "std::int32_t"
        cpp_varname: "gTimeseriesBucketMaxCount"
        default: 1000
        validator: {gte: 1}
        redact: false

    "timeseriesBucketMaxSize":
        description: "Maximum size in bytes of measurements to store together in a single bucket"
        set_at: [startup]
        cpp_vartype: "std::int32_t"
        cpp_varname: "gTimeseriesBucketMaxSize"
        default: 128000 # 125KB
        validator: {gte: 1}
        redact: false

    "timeseriesIdleBucketExpiryMemoryUsageThreshold":
        description:
            "The threshold in percentage of system memory or bytes for bucket catalog memory
            usage above which idle buckets will be expired. If set to a number between 1-100,
            the threshold will be interpreted as a percentage of system memory.
            If set to a number larger than 100 it will be interpreted as a number of bytes
            for the threshold. If set to zero or a non-positive number it will automatically be
            over-written to be the default value, a certain percentage of system memory."
        set_at: [startup, runtime]
        cpp_varname: "gTimeseriesIdleBucketExpiryMemoryUsageThresholdBytes"
        default: 5
        redact: false

    "timeseriesSideBucketCatalogMemoryUsageThreshold":
        description:
            "The threshold in bytes for side bucket catalog memory usage above which idle
            buckets will be expired."
        set_at: [startup, runtime]
        cpp_varname: "gTimeseriesSideBucketCatalogMemoryUsageThresholdBytes"
        default: 104857600 # 100 MB
        redact: false

    "timeseriesIdleBucketExpiryMaxCountPerAttempt":
        description: "The maximum number of buckets that may be closed due to expiry at each attempt"
        set_at: [startup]
        cpp_vartype: "std::int32_t"
        cpp_varname: "gTimeseriesIdleBucketExpiryMaxCountPerAttempt"
        default: 3
        validator: {gte: 2}
        redact: false

    "timeseriesBucketMinCount":
        description: "Time-series buckets that need to be closed due to size
            (timeseriesBucketMaxSize) but haven't crossed this threshold are considered to
            contain large measurements, and will be kept open to improve bucketing
            performance. These buckets will be closed when they reach the threshold or if
            the bucket is close to the max BSON size limit. Setting this to 1 disables
            this behaviour."
        set_at: [startup]
        cpp_vartype: "std::int32_t"
        cpp_varname: "gTimeseriesBucketMinCount"
        default: 10
        validator: {gte: 1}
        redact: false

    "timeseriesBucketMinSize":
        description:
            "If there is high memory pressure on the system, we will lower the maximum
            size (in bytes) of measurements we pack into buckets. This value represents
            the absolute lowest size we will limit buckets to."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<int>"
        cpp_varname: "gTimeseriesBucketMinSize"
        default: 5120 # 5KB
        validator: {gte: 1}
        redact: false

    "timeseriesInsertMaxRetriesOnDuplicates":
        description:
            "In rare cases due to collision from OID generation, we will retry inserting
            those bucket documents automatically for a limited number of times. This value
            represents the number of retries we would perform."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<int>"
        cpp_varname: "gTimeseriesInsertMaxRetriesOnDuplicates"
        default: 32
        validator: {gte: 1}
        redact: false

    "timeseriesLargeMeasurementThreshold":
        description:
            "When an element in a measurement is larger than the threshold (in bytes) when
            being inserted into a bucket, we use the element's uncompressed size towards
            the bucket size limit."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<int>"
        cpp_varname: "gTimeseriesLargeMeasurementThreshold"
        default: 32
        validator: {gte: 0}
        redact: false

    "timeseriesMaxRetriesForWriteConflictsOnReopening":
        description:
            "When re-opening a bucket from archival or query-based reopening,
            the bucket catalog will retry re-opening a bucket due to WriteConflicts for a limited number of times.
            This value represents the maximum number of retries the bucket catalog would perform before attempting
            to find an existing open bucket, and if unsuccessful, then allocating a new bucket."
        set_at: [startup, runtime]
        cpp_vartype: "AtomicWord<int>"
        cpp_varname: "gTimeseriesMaxRetriesForWriteConflictsOnReopening"
        default: 16
        validator: {gte: 1}
        redact: false

enums:
    BucketGranularity:
        description:
            "Describes a time-series collection's expected interval between subsequent
            measurements"
        type: string
        values:
            Seconds: "seconds"
            Minutes: "minutes"
            Hours: "hours"

structs:
    TimeseriesOptions:
        description: "The options that define a time-series collection."
        strict: true
        query_shape_component: true
        fields:
            timeField:
                description:
                    "The name of the top-level field to be used for time. Inserted
                    documents must have this field, and the field must be of the BSON UTC
                    datetime type (0x9)"
                type: string
                stability: stable
                query_shape: anonymize
                validator:
                    callback: "validateTimeAndMetaField"
            metaField:
                description:
                    'The name of the top-level field describing the series. This field is
                    used to group related data and may be of any BSON type. This may not
                    be "_id" or the same as ''timeField''.'
                type: string
                optional: true
                stability: stable
                query_shape: anonymize
                validator:
                    callback: "validateTimeAndMetaField"
            granularity:
                description: "Describes the expected interval between subsequent measurements"
                type: BucketGranularity
                optional: true
                stability: stable
                query_shape: parameter
            bucketRoundingSeconds:
                description:
                    "Used to determine the minimum time boundary when opening a new bucket
                    by rounding the first timestamp down to the next multiple of this
                    value. Specified in seconds."
                type: safeInt
                optional: true
                validator: {gte: 1, lte: 31536000}
                stability: stable
                query_shape: literal
            bucketMaxSpanSeconds:
                description: "The maximum range of time values for a bucket, in seconds"
                type: safeInt
                optional: true
                validator: {gte: 1, lte: 31536000}
                stability: stable
                query_shape: literal

    CollModTimeseries:
        description: "A type representing the adjustable options on timeseries collections"
        strict: true
        fields:
            granularity:
                optional: true
                type: BucketGranularity
                stability: stable
            bucketRoundingSeconds:
                optional: true
                type: safeInt
                stability: unstable
                validator: {gte: 1, lte: 31536000}
            bucketMaxSpanSeconds:
                optional: true
                type: safeInt
                stability: unstable
                validator: {gte: 1, lte: 31536000}
