/**
 *    Copyright (C) 2018-present MongoDB, Inc.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the Server Side Public License, version 1,
 *    as published by MongoDB, Inc.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    Server Side Public License for more details.
 *
 *    You should have received a copy of the Server Side Public License
 *    along with this program. If not, see
 *    <http://www.mongodb.com/licensing/server-side-public-license>.
 *
 *    As a special exception, the copyright holders give permission to link the
 *    code of portions of this program with the OpenSSL library under certain
 *    conditions as described in each individual source file and distribute
 *    linked combinations including the program with the OpenSSL library. You
 *    must comply with the Server Side Public License in all respects for
 *    all of the code used other than as permitted herein. If you modify file(s)
 *    with this exception, you may extend this exception to your version of the
 *    file(s), but you are not obligated to do so. If you do not wish to do so,
 *    delete this exception statement from your version. If you delete this
 *    exception statement from all source files in the program, then also delete
 *    it in the license file.
 */

#pragma once

#include "mongo/bson/bsonobj.h"
#include "mongo/db/repl/oplog_entry.h"
#include "mongo/db/session/logical_session_id.h"
#include "mongo/util/modules.h"

#include <vector>

#include <boost/optional.hpp>
#include <boost/optional/optional.hpp>

namespace MONGO_MOD_PUB mongo {
namespace repl {

/**
 * Keeps tracks of oplog operations that would require changes to the config.transactions and
 * provides functions to create oplog entries that would contain the writes to update
 * config.transactions.
 *
 * Assumption: it is not allowed to do transactions/retryable writes against config.transactions.
 */
class SessionUpdateTracker {
public:
    /**
     * Converts all stored transaction infos to oplog writes to config.transactions.
     * Can return an empty vector if there is nothing to flush.
     */
    std::vector<OplogEntry> flushAll();

    /**
     * If 'entry' is part of a transaction, then return an update to the transaction table
     * corresponding to the operation. Otherwise, inspect the entry to determine whether to buffer
     * or flush the stored transaction information as part of retryable writes.
     */
    boost::optional<std::vector<OplogEntry>> updateSession(const OplogEntry& entry);

    /**
     * Returns true if the oplog entry represents an operation in a transaction and false otherwise.
     * No-ops representing migrated transactions are considered transaction operations.
     */
    static bool isTransactionEntry(const OplogEntry& entry);

private:
    /**
     * Analyzes the given oplog entry and determines which transactions stored so far needs to be
     * converted to oplog writes.
     *
     * Note: should only be called when oplog entry's ns target config.transactions or config.$cmd.
     */
    std::vector<OplogEntry> _flush(const OplogEntry& entry);

    /**
     * Converts stored transaction infos that has a matching transcation id with the given
     * query predicate. Can return an empty vector if there is nothing to flush.
     */
    std::vector<OplogEntry> _flushForQueryPredicate(const BSONObj& queryPredicate);

    /**
     * Extract transaction information from the oplog if any and records them internally. Returns
     * a list of 'config.transactions' table updates to be flushed if 'entry' has a 'txnNumber'
     * greater than the currently stored session information.
     */
    boost::optional<std::vector<OplogEntry>> _updateSessionInfo(const OplogEntry& entry);

    /**
     * Inspects the oplog entry and determines whether this needs to update the session info or
     * flush stored transaction information to oplog writes.
     */
    boost::optional<std::vector<OplogEntry>> _updateOrFlush(const OplogEntry& entry);

    /**
     * Returns an update to the transaction table generated by a transaction operation. This returns
     * boost::none if the operation is a partialTxn operation that is not the first of the
     * transaction.
     */
    boost::optional<OplogEntry> _createTransactionTableUpdateFromTransactionOp(
        const repl::OplogEntry& entry);

    LogicalSessionIdMap<OplogEntry> _sessionsToUpdate;
};

}  // namespace repl
}  // namespace MONGO_MOD_PUB mongo
