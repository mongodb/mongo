load("@poetry//:dependencies.bzl", "dependency")
load("//bazel:mongo_src_rules.bzl", "idl_generator", "mongo_cc_benchmark", "mongo_cc_binary", "mongo_cc_fuzzer_test", "mongo_cc_integration_test", "mongo_cc_library", "mongo_cc_unit_test", "mongo_idl_library")
load("//bazel/config:render_template.bzl", "render_template")

package(default_visibility = ["//visibility:public"])

exports_files(
    glob([
        "*.h",
        "*.cpp",
    ]),
)

mongo_cc_library(
    name = "change_stream_pre_image_test_helpers",
    srcs = [
        "change_stream_pre_image_test_helpers.cpp",
    ],
    hdrs = [
        "change_stream_pre_image_test_helpers.h",
    ],
    deps = [
        ":change_stream_pre_image_util",
        ":change_stream_pre_images_collection_manager",
        ":server_base",
        ":shard_role",
    ],
)

mongo_cc_library(
    name = "startup_warnings_common",
    srcs = [
        "startup_warnings_common.cpp",
    ],
    hdrs = [
        "startup_warnings_common.h",
    ],
    deps = [
        "//src/mongo:base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/client:authentication",
        "//src/mongo/util/net:ssl_manager",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "startup_warnings_mongod",
    srcs = [
        "startup_warnings_mongod.cpp",
        "//src/mongo/util:procparser.h",
    ],
    hdrs = [
        "startup_warnings_mongod.h",
    ],
    deps = [
        ":startup_warnings_common",
        "//src/mongo/db/repl:repl_coordinator_interface",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_settings",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util:processinfo",  # TODO(SERVER-93876): Remove.
    ],
)

render_template(
    name = "feature_flag_test_tpl",
    srcs = [
        "feature_flag_test.idl.tpl",
        "//buildscripts:cheetah_source_generator.py",
        "//src/mongo/util/version:releases.yml",
    ],
    cmd = [
        "$(location //buildscripts:cheetah_source_generator.py)",
        "-o",
        "$(location feature_flag_test.idl)",
        "$(location feature_flag_test.idl.tpl)",
        "$(location //src/mongo/util/version:releases.yml)",
        "$(MONGO_VERSION)",
    ],
    output = "feature_flag_test.idl",
    python_libs = [
        dependency(
            "cheetah3",
            group = "compile",
        ),
        dependency(
            "pyyaml",
            group = "core",
        ),
        dependency(
            "packaging",
            group = "compile",
        ),
    ],
)

idl_generator(
    name = "feature_flag_test_gen",
    src = ":feature_flag_test_tpl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/idl:cluster_server_parameter_gen",
    ],
)

mongo_cc_library(
    name = "multitenancy",
    srcs = [
        "multitenancy.cpp",
    ],
    hdrs = [
        "multitenancy.h",
    ],
    deps = [
        ":server_base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/auth",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/auth:security_token",
    ],
)

idl_generator(
    name = "basic_types_gen",
    src = "basic_types.idl",
)

idl_generator(
    name = "catalog_shard_feature_flag_gen",
    src = "catalog_shard_feature_flag.idl",
)

idl_generator(
    name = "feature_compatibility_version_document_gen",
    src = "feature_compatibility_version_document.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "multitenancy_gen",
    src = "multitenancy.idl",
)

idl_generator(
    name = "server_parameter_gen",
    src = "server_parameter.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "vector_clock_gen",
    src = "vector_clock.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "write_concern_options_gen",
    src = "write_concern_options.idl",
    deps = [
        ":basic_types_gen",
        ":read_write_concern_provenance_base_gen",
    ],
)

idl_generator(
    name = "server_feature_flags_gen",
    src = "server_feature_flags.idl",
)

mongo_cc_library(
    name = "server_feature_flags",
    srcs = [
        ":feature_flag_test_gen",
        ":server_feature_flags_gen",
        "//src/mongo/db:change_streams_cluster_parameter.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/db:server_base",
        "//src/mongo/idl:cluster_server_parameter",
    ],
)

mongo_cc_library(
    name = "mongohasher",
    srcs = [
        "hasher.cpp",
    ],
    hdrs = [
        "hasher.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/util:md5",
    ],
)

mongo_idl_library(
    name = "server_options_helpers_idl",
    src = "server_options_helpers.idl",
    deps = [":server_base"],
)

mongo_cc_library(
    name = "server_options",
    srcs = [
        "server_options_helpers.cpp",
    ],
    hdrs = [
        "server_options_helpers.h",
    ],
    deps = [
        ":server_base",
        ":server_options_helpers_idl",
        "//src/mongo/util/cmdline_utils",
    ],
)

mongo_cc_library(
    name = "server_options_servers",
    srcs = [
        "server_options_server_helpers.cpp",
    ],
    hdrs = [
        "server_options_server_helpers.h",
    ],
    deps = [
        "//src/mongo/transport:message_compressor",
        "//src/mongo/util/net:network",  # TODO(SERVER-93876): Remove.
        # The dependency on net/ssl_manager is a temporary crutch that should go
        # away once the networking library has separate options
        "//src/mongo/util/net:ssl_manager",  # TODO(SERVER-93876): Remove.
        ":server_options",
        ":server_options_base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/auth:cluster_auth_mode",
        ":server_base",
    ],
)

mongo_cc_library(
    name = "log_process_details",
    srcs = [
        "log_process_details.cpp",
    ],
    hdrs = [
        "log_process_details.h",
    ],
    deps = [
        ":server_options_servers",
        "//src/mongo:base",
        "//src/mongo/db/repl:repl_coordinator_interface",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_settings",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:replica_set_messages",
        "//src/mongo/util:processinfo",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util/net:network",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "curop_failpoint_helpers",
    srcs = [
        "curop_failpoint_helpers.cpp",
    ],
    hdrs = [
        "curop_failpoint_helpers.h",
    ],
    deps = [
        "//src/mongo/db/query/query_stats",
        "//src/mongo/util/concurrency:spin_lock",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "windows_options_gen",
    src = "windows_options.idl",
)

mongo_cc_library(
    name = "server_options_base",
    srcs = [
        "cluster_auth_mode_option_gen",
        "keyfile_option_gen",
        "mongod_options_general.h",
        "server_options_base.cpp",
        "server_options_base_gen",
        "server_options_general_gen",
        "server_options_nongeneral_gen",
    ],
    hdrs = [
        "server_options_base.h",
    ],
    deps = [
        ":connection_health_metrics_parameter",  # TODO(SERVER-93876): Remove.
        ":server_base",
        "//src/mongo/db/auth:cluster_auth_mode",
        "//src/mongo/util/options_parser",
    ],
)

idl_generator(
    name = "cluster_auth_mode_option_gen",
    src = "cluster_auth_mode_option.idl",
)

idl_generator(
    name = "keyfile_option_gen",
    src = "keyfile_option.idl",
)

idl_generator(
    name = "server_options_base_gen",
    src = "server_options_base.idl",
)

idl_generator(
    name = "server_options_general_gen",
    src = "server_options_general.idl",
)

idl_generator(
    name = "server_options_nongeneral_gen",
    src = "server_options_nongeneral.idl",
)

idl_generator(
    name = "initialize_server_global_state_gen",
    src = "initialize_server_global_state.idl",
)

mongo_cc_library(
    name = "global_settings",
    srcs = [
        "global_settings.cpp",
    ],
    hdrs = [
        "global_settings.h",
        "//src/mongo/db:mongod_options_general_gen",
    ],
    header_deps = [
        "//src/mongo/util/options_parser",
        ":server_options_base",
    ],
    deps = [
        ":server_base",  # TODO(SERVER-93876): Remove.
        ":service_context",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_settings",
    ],
)

idl_generator(
    name = "connection_health_metrics_parameter_gen",
    src = "connection_health_metrics_parameter.idl",
)

mongo_cc_library(
    name = "connection_health_metrics_parameter",
    srcs = [
        "connection_health_metrics_parameter_gen",
    ],
    deps = [
        ":server_base",
        "//src/mongo/util/options_parser",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "keypattern_gen",
    src = "keypattern.idl",
)

idl_generator(
    name = "namespace_spec_gen",
    src = "namespace_spec.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "mongod_options_general_gen",
    src = "mongod_options_general.idl",
)

idl_generator(
    name = "mongod_options_legacy_gen",
    src = "mongod_options_legacy.idl",
)

idl_generator(
    name = "mongod_options_replication_gen",
    src = "mongod_options_replication.idl",
)

idl_generator(
    name = "mongod_options_sharding_gen",
    src = "mongod_options_sharding.idl",
)

idl_generator(
    name = "mongod_options_storage_gen",
    src = "mongod_options_storage.idl",
)

mongo_cc_library(
    name = "mongod_options",
    srcs = [
        "mongod_options.cpp",
        ":mongod_options_general_gen",
        ":mongod_options_legacy_gen",
        ":mongod_options_replication_gen",
        ":mongod_options_sharding_gen",
        ":mongod_options_storage_gen",
    ],
    hdrs = [
        "mongod_options.h",
        "mongod_options_general.h",
        "mongod_options_replication.h",
        "mongod_options_sharding.h",
    ],
    deps = [
        ":global_settings",
        ":server_base",
        ":server_feature_flags",
        ":server_options_base",  # TODO(SERVER-93876): Remove.
        ":server_options_servers",
        "//src/mongo/db/auth:cluster_auth_mode",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_server_parameters",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_settings",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:replica_set_messages",
        "//src/mongo/db/storage:storage_options",  # TODO(SERVER-93876): Remove.
        "//src/mongo/s:common_s",
        "//src/mongo/util/options_parser",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "mongod_options_init",
    srcs = [
        "mongod_options_init.cpp",
    ],
    deps = [
        ":mongod_options",
        "//src/mongo:base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util/options_parser",  # TODO(SERVER-93876): Remove.
    ] + select({
        "//bazel/config:ssl_enabled": [
            "//src/mongo/util/net:ssl_options_server",  # TODO(SERVER-93876): Remove.
        ],
        "//conditions:default": [],
    }),
)

idl_generator(
    name = "read_write_concern_defaults_gen",
    src = "read_write_concern_defaults.idl",
    deps = [
        ":basic_types_gen",
        ":write_concern_options_gen",
        "//src/mongo/db/repl:read_concern_args_gen",
    ],
)

mongo_cc_library(
    name = "read_write_concern_defaults",
    srcs = [
        "read_write_concern_defaults.cpp",
        "read_write_concern_defaults_gen",
    ],
    hdrs = [
        "read_write_concern_defaults.h",
    ],
    deps = [
        ":server_base",
        ":vector_clock",
        "//src/mongo/db/repl:read_concern_args",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_server_parameters",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util:caching",
        "//src/mongo/util/concurrency:thread_pool",
    ],
)

idl_generator(
    name = "default_max_time_ms_cluster_parameter_gen",
    src = "default_max_time_ms_cluster_parameter.idl",
    deps = [
        "//src/mongo/idl:cluster_server_parameter_gen",
    ],
)

mongo_cc_library(
    name = "default_max_time_ms_cluster_parameter",
    srcs = [
        "default_max_time_ms_cluster_parameter.cpp",
        ":default_max_time_ms_cluster_parameter_gen",
    ],
    hdrs = [
        "default_max_time_ms_cluster_parameter.h",
    ],
    deps = [
        ":server_base",
        ":server_feature_flags",
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:security_token",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query:query_request",  # TODO(SERVER-93876): Remove.
        "//src/mongo/idl:cluster_server_parameter",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "change_stream_options_gen",
    src = "change_stream_options.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/idl:cluster_server_parameter_gen",
    ],
)

mongo_cc_library(
    name = "change_stream_options",
    srcs = [
        "change_stream_options_gen",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/bson:bson_validate",
        "//src/mongo/db:server_base",
        "//src/mongo/idl:cluster_server_parameter",
    ],
)

idl_generator(
    name = "change_stream_options_parameter_gen",
    src = "change_stream_options_parameter.idl",
)

idl_generator(
    name = "change_streams_cluster_parameter_gen",
    src = "change_streams_cluster_parameter.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/idl:cluster_server_parameter_gen",
    ],
)

idl_generator(
    name = "change_stream_state_gen",
    src = "change_stream_state.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

idl_generator(
    name = "set_change_stream_state_coordinator_gen",
    src = "set_change_stream_state_coordinator.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/session:logical_session_id_gen",
    ],
)

mongo_cc_library(
    name = "change_stream_serverless_helpers",
    srcs = [
        "change_stream_serverless_helpers.cpp",
    ],
    hdrs = [
        "change_stream_serverless_helpers.h",
        ":change_streams_cluster_parameter_gen",
        ":default_max_time_ms_cluster_parameter_gen",
    ],
    deps = [
        ":global_settings",
        ":server_base",
        "//src/mongo/db/catalog:collection_catalog",
        "//src/mongo/db/query:query_knobs",
    ],
)

mongo_cc_library(
    name = "audit",
    srcs = [
        "audit.cpp",
    ],
    hdrs = [
        "audit.h",
        "audit_format.h",
        "audit_interface.h",
    ],
    deps = [
        ":service_context",
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "client_out_of_line_executor",
    srcs = [
        "client_out_of_line_executor.cpp",
        "//src/mongo/util:producer_consumer_queue.h",
    ],
    hdrs = [
        "client_out_of_line_executor.h",
    ],
    deps = [
        ":service_context",
        "//src/mongo:base",
    ],
)

mongo_cc_library(
    name = "local_executor",
    srcs = [
        "local_executor.cpp",
    ],
    hdrs = [
        "local_executor.h",
    ],
    deps = [
        ":service_context",
        "//src/mongo:base",
        "//src/mongo/executor:network_interface_factory",
        "//src/mongo/executor:task_executor_interface",
        "//src/mongo/executor:thread_pool_task_executor",
    ],
)

mongo_cc_library(
    name = "not_primary_error_tracker",
    srcs = [
        "not_primary_error_tracker.cpp",
    ],
    hdrs = [
        "not_primary_error_tracker.h",
    ],
    deps = [
        ":service_context",
    ],
)

idl_generator(
    name = "mirror_maestro_feature_flag_gen",
    src = "mirror_maestro_feature_flags.idl",
)

idl_generator(
    name = "mirror_maestro_gen",
    src = "mirror_maestro.idl",
    deps = [
        ":basic_types_gen",
    ],
)

mongo_cc_library(
    name = "shard_role_api_stor_ex",
    srcs = [
        "//src/mongo/db/catalog:collection.cpp",
        "//src/mongo/db/concurrency:d_concurrency.cpp",
        "//src/mongo/db/concurrency:replication_state_transition_lock_guard.cpp",
    ],
    hdrs = [
        "//src/mongo/db/catalog:collection.h",
        "//src/mongo/db/concurrency:d_concurrency.h",
        "//src/mongo/db/concurrency:replication_state_transition_lock_guard.h",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/concurrency:lock_manager",
        "//src/mongo/db/query/collation:collator_factory_interface",
        "//src/mongo/db/repl:intent_registry",
        "//src/mongo/s:common_s",
    ],
)

mongo_cc_library(
    name = "shard_role_api",
    srcs = [
        "direct_shard_client_tracker.cpp",
        "dump_lock_manager_impl.cpp",
        "replica_set_endpoint_sharding_state.cpp",
        "replica_set_endpoint_util.cpp",
        "transaction_resources.cpp",
        "//src/mongo/db/catalog:collection_operation_source.cpp",
        "//src/mongo/db/s:collection_metadata.cpp",
        "//src/mongo/db/s:collection_sharding_state.cpp",
        "//src/mongo/db/s:database_sharding_state.cpp",
        "//src/mongo/db/s:global_user_write_block_state.cpp",
        "//src/mongo/db/s:operation_sharding_state.cpp",
        "//src/mongo/db/s:range_arithmetic.cpp",
        "//src/mongo/db/s:replica_set_endpoint_feature_flag.cpp",
        "//src/mongo/db/s:scoped_collection_metadata.cpp",
        "//src/mongo/db/s:shard_filtering_util.cpp",
        "//src/mongo/db/s:shard_key_index_util.cpp",
        "//src/mongo/db/s:sharding_api_d_params_gen",
        "//src/mongo/db/s:sharding_migration_critical_section.cpp",
        "//src/mongo/db/s:sharding_state.cpp",
        "//src/mongo/db/s:sharding_statistics.cpp",
        "//src/mongo/db/s:sharding_write_router.cpp",
        "//src/mongo/db/s:transaction_coordinator_worker_curop_repository.cpp",
    ],
    hdrs = [
        "direct_shard_client_tracker.h",
        "dump_lock_manager_impl.h",
        "replica_set_endpoint_sharding_state.h",
        "replica_set_endpoint_util.h",
        "transaction_resources.h",
        "//src/mongo/db/catalog:collection_operation_source.h",
        "//src/mongo/db/s:collection_metadata.h",
        "//src/mongo/db/s:collection_sharding_state.h",
        "//src/mongo/db/s:database_sharding_state.h",
        "//src/mongo/db/s:global_user_write_block_state.h",
        "//src/mongo/db/s:operation_sharding_state.h",
        "//src/mongo/db/s:range_arithmetic.h",
        "//src/mongo/db/s:replica_set_endpoint_feature_flag.h",
        "//src/mongo/db/s:scoped_collection_metadata.h",
        "//src/mongo/db/s:shard_filtering_util.h",
        "//src/mongo/db/s:shard_key_index_util.h",
        "//src/mongo/db/s:sharding_migration_critical_section.h",
        "//src/mongo/db/s:sharding_state.h",
        "//src/mongo/db/s:sharding_statistics.h",
        "//src/mongo/db/s:sharding_write_router.h",
        "//src/mongo/db/s:transaction_coordinator_worker_curop_repository.h",
    ],
    deps = [
        ":server_base",
        ":server_feature_flags",  # TODO(SERVER-93876): Remove.
        ":shard_role_api_stor_ex",
        ":write_block_bypass",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/admission:execution_admission_context",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/catalog:index_catalog",
        "//src/mongo/db/storage:write_unit_of_work",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/views",  # TODO(SERVER-93876): Remove.
        "//src/mongo/s:grid",
        "//src/mongo/util/concurrency:spin_lock",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "shard_role",
    srcs = [
        ":db_raii.cpp",
        ":direct_connection_util.cpp",
        ":shard_role.cpp",
        "//src/mongo/db:catalog_raii.cpp",
        "//src/mongo/db/catalog:catalog_helper.cpp",
        "//src/mongo/db/catalog:collection_uuid_mismatch.cpp",
        "//src/mongo/db/catalog:collection_yield_restore.cpp",
        "//src/mongo/db/repl:collection_utils.h",
    ],
    hdrs = [
        ":db_raii.h",
        ":direct_connection_util.h",
        ":shard_role.h",
        "//src/mongo/db:catalog_raii.h",
        "//src/mongo/db/catalog:catalog_helper.h",
        "//src/mongo/db/catalog:collection_uuid_mismatch.h",
        "//src/mongo/db/catalog:collection_yield_restore.h",
    ],
    deps = [
        ":multitenancy",  # TODO(SERVER-93876): Remove.
        ":server_base",
        ":shard_role_api",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/catalog:collection_catalog",
        "//src/mongo/db/catalog:collection_uuid_mismatch_info",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/catalog:database_holder",
        "//src/mongo/db/catalog:local_oplog_info",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/catalog:snapshot_helper",
        "//src/mongo/db/s:sharding_runtime_d_params_idl",
        "//src/mongo/db/stats:top",
        "//src/mongo/db/storage:storage_options",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util/concurrency:spin_lock",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_unit_test(
    name = "shard_role_test",
    srcs = [
        "catalog_raii_test.cpp",
        "d_concurrency_test.cpp",
        "database_name_test.cpp",
        "db_raii_multi_collection_test.cpp",
        "db_raii_test.cpp",
        "shard_role_test.cpp",
    ],
    tags = ["mongo_unittest_third_group"],
    deps = [
        ":query_exec",
        ":shard_role",
        "//src/mongo/db/admission:ticketholder_manager",
        "//src/mongo/db/catalog:catalog_control",
        "//src/mongo/db/catalog:catalog_test_fixture",
        "//src/mongo/db/catalog:collection_uuid_mismatch_info",
        "//src/mongo/db/catalog:database_holder",
        "//src/mongo/db/catalog:database_holder_mock",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/query/client_cursor",
        "//src/mongo/db/s:shard_server_test_fixture",
        "//src/mongo/db/s:sharding_runtime_d",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/util:progress_meter",
        "//src/mongo/util/concurrency:ticketholder",
    ],
)

mongo_cc_unit_test(
    name = "multiple_collection_accessor_test",
    srcs = [
        "//src/mongo/db/query:multiple_collection_accessor.h",
        "//src/mongo/db/query:multiple_collection_accessor_test.cpp",
    ],
    tags = ["mongo_unittest_eighth_group"],
    deps = [
        ":query_exec",
        ":shard_role",
        "//src/mongo/db/admission:ticketholder_manager",
        "//src/mongo/db/catalog:catalog_control",
        "//src/mongo/db/catalog:catalog_test_fixture",
        "//src/mongo/db/catalog:collection_uuid_mismatch_info",
        "//src/mongo/db/catalog:database_holder",
        "//src/mongo/db/catalog:database_holder_mock",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/query/client_cursor",
        "//src/mongo/db/s:shard_server_test_fixture",
        "//src/mongo/db/s:sharding_runtime_d",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/util:progress_meter",
        "//src/mongo/util/concurrency:ticketholder",
    ],
)

mongo_cc_unit_test(
    name = "vector_clock_test",
    srcs = [
        "keys_collection_document_test.cpp",
        "logical_time_test.cpp",
        "read_write_concern_defaults_test.cpp",
        "time_proof_service_test.cpp",
        "vector_clock_mongod_test.cpp",
        "vector_clock_test.cpp",
        "vector_clock_test_fixture.cpp",
        "vector_clock_test_fixture.h",
    ],
    tags = ["mongo_unittest_fifth_group"],
    deps = [
        ":keys_collection_client_direct",
        ":keys_collection_document",
        ":read_write_concern_defaults_mock",
        ":signed_logical_time",
        ":vector_clock",
        ":vector_clock_mutable",
        "//src/mongo/db/op_observer",
        "//src/mongo/db/op_observer:op_observer_impl",
        "//src/mongo/db/op_observer:operation_logger_impl",
        "//src/mongo/db/op_observer:operation_logger_mock",
        "//src/mongo/db/s:shard_server_test_fixture",
        "//src/mongo/util:clock_source_mock",
    ],
)

mongo_cc_library(
    name = "dbdirectclient",
    srcs = [
        "dbdirectclient.cpp",
        "scoped_read_concern.cpp",
    ],
    hdrs = [
        "dbdirectclient.h",
        "scoped_read_concern.h",
    ],
    deps = [
        ":not_primary_error_tracker",  # TODO(SERVER-93876): Remove.
        ":shard_role",
        "//src/mongo/client:clientdriver_minimal",
        "//src/mongo/db/query/write_ops:write_ops_parsers",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_coordinator_interface",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_settings",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "service_context_non_d",
    srcs = [
        "transaction_resources_init_non_mongod.cpp",
    ],
    tags = [
        "mongo_crypt",
    ],
    deps = [
        ":service_context",
        ":shard_role_api",
    ],
)

idl_generator(
    name = "coll_mod_gen",
    src = "coll_mod.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/auth:access_checks_gen",
        "//src/mongo/db/auth:action_type_gen",
        "//src/mongo/db/catalog:collection_options_gen",
        "//src/mongo/db/pipeline:change_stream_pre_and_post_images_options_gen",
        "//src/mongo/db/timeseries:timeseries_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

mongo_cc_library(
    name = "coll_mod_command_idl",
    srcs = [
        "coll_mod_gen",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/auth:authprivilege",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/timeseries:timeseries_options",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "dbcommands_gen",
    src = "dbcommands.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/catalog:collection_options_gen",
        "//src/mongo/db/pipeline:storage_stats_spec_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

mongo_cc_library(
    name = "dbcommands_idl",
    srcs = [
        "dbcommands_gen",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/pipeline:document_sources_idl",
    ],
)

idl_generator(
    name = "metadata_consistency_types_gen",
    src = "metadata_consistency_types.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/s:sharding_types_gen",
    ],
)

idl_generator(
    name = "drop_gen",
    src = "drop.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/auth:action_type_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

mongo_cc_library(
    name = "command_can_run_here",
    srcs = [
        "command_can_run_here.cpp",
    ],
    hdrs = [
        "command_can_run_here.h",
    ],
    deps = [
        ":service_context",  # TODO(SERVER-93876): Remove.
        "//src/mongo:base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/client:read_preference",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/commands:test_commands_enabled",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_coordinator_interface",
    ],
)

idl_generator(
    name = "drop_database_gen",
    src = "drop_database.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/auth:action_type_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

idl_generator(
    name = "list_collections_gen",
    src = "list_collections.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/auth:access_checks_gen",
        "//src/mongo/db/auth:action_type_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

idl_generator(
    name = "list_indexes_gen",
    src = "list_indexes.idl",
    deps = [
        ":basic_types_gen",
        ":create_indexes_gen",
        "//src/mongo/db/auth:access_checks_gen",
        "//src/mongo/db/auth:action_type_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

mongo_cc_library(
    name = "commands",
    srcs = [
        "coll_mod_reply_validation.cpp",
        "commands.cpp",
        "curop.cpp",
        "curop_diagnostic_printer.cpp",
        "error_labels.h",
        "op_debug.cpp",
        ":drop_database_gen",
        ":drop_gen",
        ":list_collections_gen",
        ":list_indexes_gen",
        "//src/mongo/db/commands/query_cmd:explain_gen",
    ],
    hdrs = [
        "coll_mod_reply_validation.h",
        "commands.h",
        "curop.h",
        "curop_bson_helpers.h",
        "curop_diagnostic_printer.h",
        "op_debug.h",
    ],
    deps = [
        ":api_parameters",  # TODO(SERVER-93876): Remove.
        ":audit",
        ":coll_mod_command_idl",
        ":index_commands_idl",  # TODO(SERVER-93876): Remove.
        ":profile_settings",
        ":server_base",  # TODO(SERVER-93876): Remove.
        ":server_feature_flags",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db:shard_role_api_stor_ex",
        "//src/mongo/db/admission:execution_admission_context",
        "//src/mongo/db/admission:ingress_admission_context",
        "//src/mongo/db/admission:ticketholder_manager",
        "//src/mongo/db/auth",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/auth:authprivilege",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/auth:user_acquisition_stats",
        "//src/mongo/db/catalog:collection_options",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/catalog:local_oplog_info",
        "//src/mongo/db/commands:create_command",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/commands:server_status_core",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/commands:test_commands_enabled",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/exec/mutable_bson",
        "//src/mongo/db/query:common_query_enums_and_helpers",
        "//src/mongo/db/query/client_cursor:cursor_response_idl",
        "//src/mongo/db/query/client_cursor:generic_cursor",
        "//src/mongo/db/repl:read_concern_args",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/stats:timer_stats",
        "//src/mongo/db/storage:execution_context",
        "//src/mongo/db/storage:prepare_conflict_tracker",
        "//src/mongo/db/timeseries:timeseries_options",  # TODO(SERVER-93876): Remove.
        "//src/mongo/rpc",
        "//src/mongo/rpc:command_status",  # TODO(SERVER-93876): Remove.
        "//src/mongo/rpc:rewrite_state_change_errors",  # TODO(SERVER-93876): Remove.
        "//src/mongo/transport:service_executor",
        "//src/mongo/util:progress_meter",
        "//src/mongo/util/concurrency:spin_lock",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util/concurrency:ticketholder_queue_stats",
    ] + select({
        "//bazel/config:use_tracing_profiler_enabled": [
            "//src/mongo/util/tracing_profiler",  # TODO(SERVER-93876): Remove.
        ],
        "//conditions:default": [],
    }),
)

mongo_cc_unit_test(
    name = "diagnostic_printers_test",
    srcs = [
        "diagnostic_printers_test.cpp",
    ],
    tags = ["mongo_unittest_first_group"],
    deps = [
        ":commands",
        ":service_context_test_fixture",
        "//src/mongo/db/commands:standalone",
    ],
)

idl_generator(
    name = "internal_transactions_feature_flag_gen",
    src = "internal_transactions_feature_flag.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "record_id_gen",
    src = "record_id.idl",
)

idl_generator(
    name = "cloner_gen",
    src = "cloner.idl",
)

mongo_cc_library(
    name = "profile_collection",
    srcs = [
        "profile_collection.cpp",
    ],
    hdrs = [
        "profile_collection.h",
    ],
    deps = [
        ":shard_role",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/util/concurrency:spin_lock",
    ],
)

mongo_cc_library(
    name = "query_exec",
    srcs = [
        "//src/mongo/db/exec:and_common.h",
        "//src/mongo/db/exec:and_hash.cpp",
        "//src/mongo/db/exec:and_sorted.cpp",
        "//src/mongo/db/exec:batched_delete_stage.cpp",
        "//src/mongo/db/exec:batched_delete_stage_buffer.cpp",
        "//src/mongo/db/exec:batched_delete_stage_gen",
        "//src/mongo/db/exec:cached_plan.cpp",
        "//src/mongo/db/exec:collection_scan.cpp",
        "//src/mongo/db/exec:count.cpp",
        "//src/mongo/db/exec:count_scan.cpp",
        "//src/mongo/db/exec:delete_stage.cpp",
        "//src/mongo/db/exec:distinct_scan.cpp",
        "//src/mongo/db/exec:eof.cpp",
        "//src/mongo/db/exec:fetch.cpp",
        "//src/mongo/db/exec:geo_near.cpp",
        "//src/mongo/db/exec:idhack.cpp",
        "//src/mongo/db/exec:index_scan.cpp",
        "//src/mongo/db/exec:limit.cpp",
        "//src/mongo/db/exec:merge_sort.cpp",
        "//src/mongo/db/exec:mock_stage.cpp",
        "//src/mongo/db/exec:multi_iterator.cpp",
        "//src/mongo/db/exec:multi_plan.cpp",
        "//src/mongo/db/exec:multi_plan_admission_context.cpp",
        "//src/mongo/db/exec:multi_plan_rate_limiter.cpp",
        "//src/mongo/db/exec:near.cpp",
        "//src/mongo/db/exec:or.cpp",
        "//src/mongo/db/exec:orphan_chunk_skipper.cpp",
        "//src/mongo/db/exec:plan_cache_util.cpp",
        "//src/mongo/db/exec:plan_stage.cpp",
        "//src/mongo/db/exec:projection.cpp",
        "//src/mongo/db/exec:queued_data_stage.cpp",
        "//src/mongo/db/exec:record_store_fast_count.cpp",
        "//src/mongo/db/exec:recordid_deduplicator.cpp",
        "//src/mongo/db/exec:requires_collection_stage.cpp",
        "//src/mongo/db/exec:requires_index_stage.cpp",
        "//src/mongo/db/exec:return_key.cpp",
        "//src/mongo/db/exec:sample_from_timeseries_bucket.cpp",
        "//src/mongo/db/exec:shard_filter.cpp",
        "//src/mongo/db/exec:skip.cpp",
        "//src/mongo/db/exec:sort.cpp",
        "//src/mongo/db/exec:sort_key_generator.cpp",
        "//src/mongo/db/exec:spool.cpp",
        "//src/mongo/db/exec:subplan.cpp",
        "//src/mongo/db/exec:text_match.cpp",
        "//src/mongo/db/exec:text_or.cpp",
        "//src/mongo/db/exec:timeseries_modify.cpp",
        "//src/mongo/db/exec:timeseries_upsert.cpp",
        "//src/mongo/db/exec:trial_stage.cpp",
        "//src/mongo/db/exec:unpack_timeseries_bucket.cpp",
        "//src/mongo/db/exec:update_stage.cpp",
        "//src/mongo/db/exec:upsert_stage.cpp",
        "//src/mongo/db/exec/express:express_plan.cpp",
        "//src/mongo/db/exec/express:plan_executor_express.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner:cached_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner:idhack_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner:multi_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner:planner_interface.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner:single_solution_passthrough_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner:sub_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner_for_sbe:cached_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner_for_sbe:multi_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner_for_sbe:planner_interface.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner_for_sbe:single_solution_passthrough_planner.cpp",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner_for_sbe:sub_planner.cpp",
        "//src/mongo/db/pipeline:document_source_cursor.cpp",
        "//src/mongo/db/pipeline:document_source_geo_near_cursor.cpp",
        "//src/mongo/db/pipeline:pipeline_d.cpp",
        "//src/mongo/db/pipeline:plan_executor_pipeline.cpp",
        "//src/mongo/db/pipeline:plan_explainer_pipeline.cpp",
        "//src/mongo/db/pipeline:sbe_pushdown.cpp",
        "//src/mongo/db/query:all_indices_required_checker.cpp",
        "//src/mongo/db/query:explain.cpp",
        "//src/mongo/db/query:find.cpp",
        "//src/mongo/db/query:get_executor.cpp",
        "//src/mongo/db/query:internal_plans.cpp",
        "//src/mongo/db/query:plan_executor_factory.cpp",
        "//src/mongo/db/query:plan_executor_impl.cpp",
        "//src/mongo/db/query:plan_executor_sbe.cpp",
        "//src/mongo/db/query:plan_explainer_express.cpp",
        "//src/mongo/db/query:plan_explainer_factory.cpp",
        "//src/mongo/db/query:plan_explainer_impl.cpp",
        "//src/mongo/db/query:plan_explainer_sbe.cpp",
        "//src/mongo/db/query:plan_insert_listener.cpp",
        "//src/mongo/db/query:plan_ranker.cpp",
        "//src/mongo/db/query:plan_yield_policy_impl.cpp",
        "//src/mongo/db/query:query_planner_params.cpp",
        "//src/mongo/db/query:sbe_trial_runtime_executor.cpp",
        "//src/mongo/db/query:wildcard_multikey_paths.cpp",
        "//src/mongo/db/query/compiler/ce/exact:exact_cardinality_impl.cpp",
        "//src/mongo/db/query/compiler/ce/sampling:sampling_estimator_impl.cpp",
        "//src/mongo/db/query/stage_builder:classic_stage_builder.cpp",
        "//src/mongo/db/query/stage_builder:stage_builder_util.cpp",
    ],
    hdrs = [
        "//src/mongo/db/exec:and_hash.h",
        "//src/mongo/db/exec:and_sorted.h",
        "//src/mongo/db/exec:batched_delete_stage.h",
        "//src/mongo/db/exec:batched_delete_stage_buffer.h",
        "//src/mongo/db/exec:cached_plan.h",
        "//src/mongo/db/exec:collection_scan.h",
        "//src/mongo/db/exec:count.h",
        "//src/mongo/db/exec:count_scan.h",
        "//src/mongo/db/exec:delete_stage.h",
        "//src/mongo/db/exec:distinct_scan.h",
        "//src/mongo/db/exec:eof.h",
        "//src/mongo/db/exec:fetch.h",
        "//src/mongo/db/exec:filter.h",
        "//src/mongo/db/exec:geo_near.h",
        "//src/mongo/db/exec:histogram_server_status_metric.h",
        "//src/mongo/db/exec:idhack.h",
        "//src/mongo/db/exec:index_scan.h",
        "//src/mongo/db/exec:limit.h",
        "//src/mongo/db/exec:merge_sort.h",
        "//src/mongo/db/exec:mock_stage.h",
        "//src/mongo/db/exec:multi_iterator.h",
        "//src/mongo/db/exec:multi_plan.h",
        "//src/mongo/db/exec:multi_plan_admission_context.h",
        "//src/mongo/db/exec:multi_plan_rate_limiter.h",
        "//src/mongo/db/exec:near.h",
        "//src/mongo/db/exec:or.h",
        "//src/mongo/db/exec:orphan_chunk_skipper.h",
        "//src/mongo/db/exec:plan_cache_callbacks_impl.h",
        "//src/mongo/db/exec:plan_cache_util.h",
        "//src/mongo/db/exec:plan_stage.h",
        "//src/mongo/db/exec:projection.h",
        "//src/mongo/db/exec:queued_data_stage.h",
        "//src/mongo/db/exec:record_store_fast_count.h",
        "//src/mongo/db/exec:recordid_deduplicator.h",
        "//src/mongo/db/exec:requires_all_indices_stage.h",
        "//src/mongo/db/exec:requires_collection_stage.h",
        "//src/mongo/db/exec:requires_index_stage.h",
        "//src/mongo/db/exec:return_key.h",
        "//src/mongo/db/exec:sample_from_timeseries_bucket.h",
        "//src/mongo/db/exec:shard_filter.h",
        "//src/mongo/db/exec:skip.h",
        "//src/mongo/db/exec:sort.h",
        "//src/mongo/db/exec:sort_key_generator.h",
        "//src/mongo/db/exec:spool.h",
        "//src/mongo/db/exec:subplan.h",
        "//src/mongo/db/exec:text_match.h",
        "//src/mongo/db/exec:text_or.h",
        "//src/mongo/db/exec:timeseries_modify.h",
        "//src/mongo/db/exec:timeseries_upsert.h",
        "//src/mongo/db/exec:trial_stage.h",
        "//src/mongo/db/exec:unpack_timeseries_bucket.h",
        "//src/mongo/db/exec:update_stage.h",
        "//src/mongo/db/exec:upsert_stage.h",
        "//src/mongo/db/exec/express:express_plan.h",
        "//src/mongo/db/exec/express:plan_executor_express.h",
        "//src/mongo/db/exec/runtime_planners:planner_interface.h",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner:planner_interface.h",
        "//src/mongo/db/exec/runtime_planners/classic_runtime_planner_for_sbe:planner_interface.h",
        "//src/mongo/db/pipeline:document_source_cursor.h",
        "//src/mongo/db/pipeline:document_source_geo_near_cursor.h",
        "//src/mongo/db/pipeline:initialize_auto_get_helper.h",
        "//src/mongo/db/pipeline:pipeline_d.h",
        "//src/mongo/db/pipeline:plan_executor_pipeline.h",
        "//src/mongo/db/pipeline:plan_explainer_pipeline.h",
        "//src/mongo/db/pipeline:sbe_pushdown.h",
        "//src/mongo/db/query:all_indices_required_checker.h",
        "//src/mongo/db/query:explain.h",
        "//src/mongo/db/query:find.h",
        "//src/mongo/db/query:get_executor.h",
        "//src/mongo/db/query:internal_plans.h",
        "//src/mongo/db/query:mock_yield_policies.h",
        "//src/mongo/db/query:plan_executor_factory.h",
        "//src/mongo/db/query:plan_executor_impl.h",
        "//src/mongo/db/query:plan_executor_sbe.h",
        "//src/mongo/db/query:plan_explainer_express.h",
        "//src/mongo/db/query:plan_explainer_factory.h",
        "//src/mongo/db/query:plan_explainer_impl.h",
        "//src/mongo/db/query:plan_explainer_sbe.h",
        "//src/mongo/db/query:plan_insert_listener.h",
        "//src/mongo/db/query:plan_ranker.h",
        "//src/mongo/db/query:plan_ranker_util.h",
        "//src/mongo/db/query:plan_yield_policy_impl.h",
        "//src/mongo/db/query:query_planner_params.h",
        "//src/mongo/db/query:query_planner_params_diagnostic_printer.h",
        "//src/mongo/db/query:sbe_plan_ranker.h",
        "//src/mongo/db/query:sbe_trial_runtime_executor.h",
        "//src/mongo/db/query:shard_filterer_factory_interface.h",
        "//src/mongo/db/query:wildcard_multikey_paths.h",
        "//src/mongo/db/query/compiler/ce/exact:exact_cardinality_impl.h",
        "//src/mongo/db/query/compiler/ce/sampling:sampling_estimator_impl.h",
        "//src/mongo/db/query/stage_builder:classic_stage_builder.h",
        "//src/mongo/db/query/stage_builder:stage_builder.h",
        "//src/mongo/db/query/stage_builder:stage_builder_util.h",
        "//src/mongo/db/query/util:hash_roaring_set.h",
        "//src/mongo/util:roaring_bitmaps.h",
    ],
    header_deps = [
        "//src/mongo/unittest",
    ],
    deps = [
        "audit",
        "commands",
        "dbdirectclient",
        "disk_use_options_idl",
        "internal_transactions_feature_flag",
        "not_primary_error_tracker",
        "record_id_helpers",
        "server_base",
        "shard_filterer",
        "shard_role",
        "shared_request_handling",
        "working_set_common",
        "write_stage_common",
        ":curop_failpoint_helpers",
        "//src/mongo/bson/dotted_path:dotted_path_support",
        "//src/mongo/db/auth:auth_checks",
        "//src/mongo/db/catalog:collection_query_info",
        "//src/mongo/db/catalog:database_holder",
        "//src/mongo/db/catalog:local_oplog_info",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/exec:projection_executor",
        "//src/mongo/db/exec:scoped_timer",
        "//src/mongo/db/exec:sort_executor",
        "//src/mongo/db/exec:working_set",
        "//src/mongo/db/exec/sbe:query_sbe_stages",
        "//src/mongo/db/exec/sbe:query_sbe_storage",
        "//src/mongo/db/fts:base_fts",
        "//src/mongo/db/matcher:expressions_mongod_only",
        "//src/mongo/db/pipeline",
        "//src/mongo/db/pipeline:change_stream_pipeline",
        "//src/mongo/db/pipeline:document_source_internal_apply_oplog_update",
        "//src/mongo/db/pipeline:pipeline_visitor",
        "//src/mongo/db/query:plan_executor",
        "//src/mongo/db/query:plan_yield_policy",
        "//src/mongo/db/query:plan_yield_policy_release_memory",
        "//src/mongo/db/query:query_common",
        "//src/mongo/db/query:query_planner",
        "//src/mongo/db/query/client_cursor",
        "//src/mongo/db/query/compiler/ce/exact:exact_cardinality_interface",
        "//src/mongo/db/query/compiler/ce/sampling:sampling_estimator_interface",
        "//src/mongo/db/query/cost_based_ranker:estimates",
        "//src/mongo/db/query/plan_cache:query_plan_cache",
        "//src/mongo/db/query/query_settings",
        "//src/mongo/db/query/stage_builder/sbe:stage_builder",
        "//src/mongo/db/query/write_ops:delete_request_idl",
        "//src/mongo/db/query/write_ops:parsed_update",
        "//src/mongo/db/query/write_ops:parsed_update_and_delete",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:wait_for_majority_service",
        "//src/mongo/db/session:kill_sessions",
        "//src/mongo/db/session:logical_session_cache",
        "//src/mongo/db/sorter:sorter_base",
        "//src/mongo/db/sorter:sorter_stats",
        "//src/mongo/db/stats:latency_server_stats",
        "//src/mongo/db/stats:serveronly_stats",
        "//src/mongo/db/storage:exceptions",
        "//src/mongo/db/storage:record_store_base",
        "//src/mongo/db/storage:storage_options",
        "//src/mongo/db/timeseries:timeseries_conversion_util",
        "//src/mongo/db/timeseries:timeseries_options",
        "//src/mongo/db/timeseries:timeseries_write_util",
        "//src/mongo/db/timeseries/bucket_catalog",
        "//src/mongo/db/timeseries/write_ops:timeseries_write_ops_utils",
        "//src/mongo/db/update:update_driver",
        "//src/mongo/scripting",
        "//src/mongo/util:background_job",
        "//src/mongo/util:elapsed_tracker",
        "//src/mongo/util:field_set",
        "//src/third_party/s2",
    ],
)

mongo_cc_library(
    name = "dbhelpers",
    srcs = [
        "dbhelpers.cpp",
    ],
    hdrs = [
        "dbhelpers.h",
    ],
    deps = [
        ":query_exec",
        ":record_id_helpers",
        ":shard_role",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/index:index_access_method",
        "//src/mongo/db/query/write_ops",
        "//src/mongo/db/query/write_ops:parsed_update_and_delete",
    ],
)

mongo_cc_library(
    name = "curop_metrics",
    srcs = [
        "curop_metrics.cpp",
    ],
    hdrs = [
        "curop_metrics.h",
    ],
    deps = [
        "//src/mongo/db/query/query_stats",
        "//src/mongo/db/stats:counters",
        "//src/mongo/db/stats:counters_sort",
    ],
)

idl_generator(
    name = "read_concern_mongod_gen",
    src = "read_concern_mongod.idl",
)

mongo_cc_library(
    name = "rw_concern_d",
    srcs = [
        "read_concern.cpp",
        "write_concern.cpp",
    ],
    hdrs = [
        "read_concern.h",
        "write_concern.h",
    ],
    deps = [
        ":read_write_concern_defaults",
        ":shard_role",
        ":shared_request_handling",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/query/query_stats",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:repl_server_parameters",
        "//src/mongo/db/repl:repl_settings",
        "//src/mongo/db/repl:speculative_majority_read_info",
        "//src/mongo/db/stats:timer_stats",
        "//src/mongo/db/storage:storage_control",
    ],
)

mongo_cc_library(
    name = "working_set_common",
    srcs = [
        "//src/mongo/db/exec:working_set_common.cpp",
    ],
    hdrs = [
        "//src/mongo/db/exec:working_set_common.h",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/exec:working_set",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/index:index_access_method",
        "//src/mongo/db/index:preallocated_container_pool",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/storage/key_string",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "shard_filterer",
    srcs = [
        "//src/mongo/db/exec:shard_filterer_impl.cpp",
    ],
    hdrs = [
        "//src/mongo/db/exec:shard_filterer_impl.h",
    ],
    deps = [
        ":shard_role_api",
        "//src/mongo/db/exec:working_set",
    ],
)

mongo_cc_library(
    name = "write_stage_common",
    srcs = [
        "//src/mongo/db/exec:write_stage_common.cpp",
    ],
    hdrs = [
        "//src/mongo/db/exec:write_stage_common.h",
    ],
    deps = [
        ":server_base",
        ":shard_filterer",
        ":shard_role_api",  # TODO(SERVER-93876): Remove.
        ":working_set_common",
        "//src/mongo/db/exec:working_set",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/exec/document_value",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "record_id_helpers",
    srcs = [
        "record_id_helpers.cpp",
    ],
    hdrs = [
        "record_id_helpers.h",
    ],
    deps = [
        ":server_base",
        "//src/mongo/bson:bson_validate",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/query/collation:collator_interface",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/storage/key_string",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "create_indexes_gen",
    src = "create_indexes.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/auth:action_type_gen",
        "//src/mongo/db/index_builds:commit_quorum_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

idl_generator(
    name = "drop_indexes_gen",
    src = "drop_indexes.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/db/auth:action_type_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

idl_generator(
    name = "api_parameters_gen",
    src = "api_parameters.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "keys_collection_document_gen",
    src = "keys_collection_document.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/crypto:sha1_block_gen",
    ],
)

mongo_cc_library(
    name = "operation_killer",
    srcs = [
        "operation_killer.cpp",
    ],
    hdrs = [
        "operation_killer.h",
    ],
    deps = [
        ":server_base",  # TODO(SERVER-93876): Remove.
        ":service_context",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:authprivilege",
    ],
)

mongo_cc_library(
    name = "operation_time_tracker",
    srcs = [
        "operation_time_tracker.cpp",
    ],
    hdrs = [
        "operation_time_tracker.h",
    ],
    deps = [
        ":server_base",
        ":service_context",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "disk_use_options_idl",
    srcs = [
        "//src/mongo/db/exec:disk_use_options_gen",
    ],
    deps = [
        ":server_base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query:query_knobs",
    ],
)

idl_generator(
    name = "version_context_metadata_gen",
    src = "version_context_metadata.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "version_context_gen",
    src = "version_context.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "keys_collection_manager_gen",
    src = "keys_collection_manager.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "vector_clock_document_gen",
    src = "vector_clock_document.idl",
    deps = [
        ":basic_types_gen",
    ],
)

mongo_cc_library(
    name = "vector_clock",
    srcs = [
        "key_generator.cpp",
        "keys_collection_cache.cpp",
        "keys_collection_manager.cpp",
        "keys_collection_manager_gen",
        "logical_time_validator.cpp",
        "time_proof_service.cpp",
        "vector_clock.cpp",
        "vector_clock_document_gen",
    ],
    hdrs = [
        "key_generator.h",
        "keys_collection_cache.h",
        "keys_collection_manager.h",
        "logical_time_validator.h",
        "time_proof_service.h",
        "vector_clock.h",
    ],
    deps = [
        ":global_settings",  # TODO(SERVER-93876): Remove.
        ":keys_collection_client_sharded",
        ":keys_collection_document",
        ":server_base",  # TODO(SERVER-93876): Remove.
        ":service_context",
        ":signed_logical_time",
        "//src/mongo/crypto:sha_block",
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:authprivilege",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/repl:repl_coordinator_interface",
    ],
)

mongo_cc_library(
    name = "vector_clock_mutable",
    srcs = [
        "vector_clock_mutable.cpp",
    ],
    hdrs = [
        "vector_clock_mutable.h",
    ],
    deps = [
        ":vector_clock",
    ],
)

mongo_cc_library(
    name = "logical_time_metadata_hook",
    srcs = [
        "vector_clock_metadata_hook.cpp",
    ],
    hdrs = [
        "vector_clock_metadata_hook.h",
    ],
    deps = [
        ":operation_time_tracker",
        ":vector_clock",
        "//src/mongo/rpc:metadata",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "traffic_recorder_gen",
    src = "traffic_recorder.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

mongo_cc_library(
    name = "traffic_recorder",
    srcs = [
        "traffic_recorder.cpp",
        "traffic_recorder_gen",
        "traffic_recorder_validators.cpp",
    ],
    hdrs = [
        "traffic_recorder.h",
        "traffic_recorder_validators.h",
    ],
    deps = [
        ":server_base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db:service_context",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/commands:server_status_core",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/sorter:sorter_base",
        "//src/mongo/rpc",
    ],
)

mongo_cc_library(
    name = "traffic_reader",
    srcs = [
        "traffic_reader.cpp",
    ],
    hdrs = [
        "traffic_reader.h",
    ],
    deps = [
        "//src/mongo:base",  # TODO(SERVER-93876): Remove.
        "//src/mongo/rpc",
        "//src/mongo/rpc:message",  # TODO(SERVER-93876): Remove.
    ],
)

idl_generator(
    name = "commands_test_example_gen",
    src = "commands_test_example.idl",
    deps = [
        ":basic_types_gen",
        "//src/mongo/idl:generic_argument_gen",
    ],
)

idl_generator(
    name = "read_write_concern_provenance_base_gen",
    src = "read_write_concern_provenance_base.idl",
    deps = [
        ":basic_types_gen",
    ],
)

idl_generator(
    name = "write_concern_gen",
    src = "write_concern.idl",
    deps = [
        ":basic_types_gen",
        ":read_write_concern_provenance_base_gen",
    ],
)

mongo_cc_library(
    name = "profile_settings",
    srcs = [
        "profile_settings.cpp",
    ],
    hdrs = [
        "profile_filter.h",
        "profile_settings.h",
    ],
    deps = [
        "//src/mongo/db:server_base",
    ],
)

mongo_cc_library(
    name = "wire_version",
    srcs = [
        "wire_version.cpp",
    ],
    hdrs = [
        "//src/mongo:core_headers",
        "//src/mongo/db:wire_version.h",
    ],
    header_deps = [
        "//src/mongo/bson/column",
        "//src/mongo/db/auth:cluster_auth_mode",
        "//src/mongo/db/fts:fts_query_noop",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/bson/util:bson_extract",
        "//src/mongo/db:cluster_role",
    ],
)

# The 'server_base' library must only contain basic, stateless, value types which are used throughout
# all the server binaries. It must not depend on anything other than utilities that are outside of
# the server codebase.
mongo_cc_library(
    name = "server_base",
    srcs = [
        "database_name.cpp",
        "dump_lock_manager.cpp",
        "feature_compatibility_version_parser.cpp",
        "feature_flag.cpp",
        "feature_flag_server_parameter.cpp",
        "generic_argument_util.cpp",
        "index_names.cpp",
        "keypattern.cpp",
        "logical_time.cpp",
        "mirror_maestro_feature_flag_gen",
        "namespace_string.cpp",
        "read_write_concern_provenance.cpp",
        "server_options.cpp",
        "server_parameter.cpp",
        "server_parameter_with_storage.cpp",
        "shard_id.cpp",
        "shutdown_in_progress_quiesce_info.cpp",
        "tenant_id.cpp",
        "version_context.cpp",
        "version_context_metadata_gen",
        "write_concern_idl.cpp",
        "write_concern_options.cpp",
        ":basic_types_gen",
        ":catalog_shard_feature_flag_gen",
        ":feature_compatibility_version_document_gen",
        ":multitenancy_gen",
        ":read_write_concern_provenance_base_gen",
        ":server_parameter_gen",
        ":vector_clock_gen",
        ":write_concern_gen",
        ":write_concern_options_gen",
        "//src/mongo/client:hedging_mode_gen",
        "//src/mongo/client:read_preference.cpp",
        "//src/mongo/client:read_preference_gen",
        "//src/mongo/client:read_preference_setting_gen",
        "//src/mongo/client:read_preference_validators.cpp",
        "//src/mongo/db/auth:auth_name.cpp",
        "//src/mongo/db/auth:auth_types_gen",
        "//src/mongo/db/auth:validated_tenancy_scope.cpp",
        "//src/mongo/db/repl:read_concern_args.cpp",
        "//src/mongo/db/repl:read_concern_args_gen",
        "//src/mongo/db/repl:read_concern_gen",
        "//src/mongo/db/repl:read_concern_idl.cpp",
        "//src/mongo/idl:command_generic_argument.cpp",
        "//src/mongo/idl:error_status_idl.cpp",
        "//src/mongo/idl:generic_argument.cpp",
        "//src/mongo/idl:generic_argument_gen",
        "//src/mongo/rpc:get_status_from_command_result.cpp",
        "//src/mongo/rpc/metadata:audit_metadata_gen",
        "//src/mongo/s:chunk_version.cpp",
        "//src/mongo/s:chunk_version_gen",
        "//src/mongo/s:database_version.cpp",
        "//src/mongo/s:database_version_base_gen",
        "//src/mongo/s:database_version_gen",
        "//src/mongo/s:gossiped_routing_cache_gen",
        "//src/mongo/s:shard_version.cpp",
        "//src/mongo/s:shard_version_gen",
        "//src/mongo/s:sharding_types_gen",
        "//src/mongo/util:database_name_util.cpp",
        "//src/mongo/util:fail_point.cpp",
        "//src/mongo/util:fail_point_server_parameter_gen",
        "//src/mongo/util:namespace_string_util.cpp",
    ],
    hdrs = [
        "database_name.h",
        "//src/mongo/db:api_parameters.h",
        "//src/mongo/db:api_parameters_gen",
        "//src/mongo/db:catalog_shard_feature_flag_gen",
        "//src/mongo/db:dump_lock_manager.h",
        "//src/mongo/db:feature_compatibility_version_document_gen",
        "//src/mongo/db:feature_compatibility_version_documentation.h",
        "//src/mongo/db:feature_compatibility_version_parser.h",
        "//src/mongo/db:feature_flag.h",
        "//src/mongo/db:feature_flag_server_parameter.h",
        "//src/mongo/db:generic_argument_util.h",
        "//src/mongo/db:index_names.h",
        "//src/mongo/db:keypattern.h",
        "//src/mongo/db:server_parameter_gen",
        "//src/mongo/db:shutdown_in_progress_quiesce_info.h",
        "//src/mongo/db:version_context.h",
        "//src/mongo/db/auth:validated_tenancy_scope_gen",
        "//src/mongo/db/repl:member_config.h",
        "//src/mongo/db/repl:member_id.h",
        "//src/mongo/db/repl:repl_set_config.h",
        "//src/mongo/db/repl:repl_set_config_validators.h",
        "//src/mongo/db/repl:repl_set_tag.h",
        "//src/mongo/db/repl:repl_set_write_concern_mode_definitions.h",
        "//src/mongo/db/repl/split_horizon:split_horizon.h",
    ],
    header_deps = [
        "//src/mongo/executor:network_interface_thread_pool",
    ],
    deps = [
        ":cluster_role",
        "//src/mongo:base",
        "//src/mongo/bson/util:bson_extract",
        "//src/mongo/db/repl:optime",
        "//src/mongo/db/session:logical_session_id",
        "//src/mongo/idl:idl_parser",
        "//src/mongo/util/net:hostandport_impl",
    ],
)

mongo_cc_library(
    name = "api_parameters",
    srcs = [
        "api_parameters.cpp",
        ":api_parameters_gen",
    ],
    hdrs = [
        "api_parameters.h",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_library(
    name = "validate_api_parameters",
    srcs = [
        "validate_api_parameters.cpp",
    ],
    hdrs = [
        "validate_api_parameters.h",
    ],
    deps = [
        ":api_parameters",
        ":commands",
        "//src/mongo/transport:transport_layer_common",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "error_labels",
    srcs = [
        "error_labels.cpp",
    ],
    hdrs = [
        "error_labels.h",
    ],
    deps = [
        ":commands",
        "//src/mongo/db/pipeline:lite_parsed_document_source",
        "//src/mongo/db/session:logical_session_id",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "shared_request_handling",
    srcs = [
        "initialize_operation_session_info.cpp",
        "transaction_validation.cpp",
    ],
    hdrs = [
        "initialize_operation_session_info.h",
        "transaction_validation.h",
    ],
    header_deps = [
        "//src/mongo/db/commands:txn_cmd_request",
    ],
    deps = [
        ":api_parameters",  # TODO(SERVER-93876): Remove.
        ":error_labels",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/session:logical_session_cache",
        "//src/mongo/util/concurrency:spin_lock",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "change_stream_state",
    srcs = [
        ":change_stream_state_gen",
    ],
    hdrs = [
        "//src/mongo/db/auth:authorization_contract.h",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_library(
    name = "dbmessage",
    srcs = [
        "dbmessage.cpp",
    ],
    hdrs = [
        "dbmessage.h",
    ],
    deps = [
        "//src/mongo/bson:bson_validate",
        "//src/mongo/transport:transport_layer_common",
        # "//src/mongo/util/net:network",  # TODO(SERVER-93876): Remove.
        ":server_base",
    ],
)

mongo_cc_library(
    name = "write_block_bypass",
    srcs = [
        "write_block_bypass.cpp",
    ],
    hdrs = [
        "write_block_bypass.h",
    ],
    deps = [
        ":service_context",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:authprivilege",
    ],
)

mongo_cc_library(
    name = "raw_data_operation",
    srcs = [
        "raw_data_operation.cpp",
    ],
    hdrs = [
        "raw_data_operation.h",
    ],
    deps = [
        ":service_context",  # TODO (SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "collection_index_usage_tracker",
    srcs = [
        "aggregated_index_usage_tracker.cpp",
        "collection_index_usage_tracker.cpp",
    ],
    hdrs = [
        "aggregated_index_usage_tracker.h",
        "collection_index_usage_tracker.h",
        "//src/mongo/db/pipeline:expression_from_accumulator_quantile.h",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/exec/document_value",
    ],
)

idl_generator(
    name = "throw_hook_options_gen",
    src = "throw_hook_options.idl",
)

mongo_cc_library(
    name = "throw_hook_impl",
    srcs = [
        "throw_hook_impl.cpp",
        ":throw_hook_options_gen",
    ],
    deps = [
        ":server_base",
        "//src/mongo/platform:throw_hook",
    ],
)

mongo_cc_unit_test(
    name = "throw_hook_impl_test",
    srcs = ["throw_hook_impl_test.cpp"],
    tags = [
        "mongo_unittest_third_group",
        "server-programmability",
    ],
    target_compatible_with = select({
        "@platforms//os:linux": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":throw_hook_impl",
    ],
)

# The db/'common' lib has the abstractions that are shared by components of the
# server. Ideally, many of the object in 'coredb' should be moved here when their dependencies
# get resolved.
mongo_cc_library(
    name = "common",
    srcs = [
        "cursor_in_use_info.cpp",
        "field_parser.cpp",
        "field_ref.cpp",
        "field_ref_set.cpp",
        "txn_retry_counter_too_old_info.cpp",
    ],
    hdrs = [
        "cursor_in_use_info.h",
        "field_parser.h",
        "field_ref.h",
        "field_ref_set.h",
        "txn_retry_counter_too_old_info.h",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/catalog:cannot_convert_index_to_unique_info",
        "//src/mongo/db/catalog:collection_uuid_mismatch_info",
    ],
)

mongo_cc_library(
    name = "feature_compatibility_version_metrics",
    srcs = [
        "feature_compatibility_version_metrics.cpp",
    ],
    hdrs = [
        "//src/mongo/db/pipeline:expression_from_accumulator_quantile.h",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/exec/document_value",
    ],
)

mongo_cc_library(
    name = "index_commands_idl",
    srcs = [
        ":create_indexes_gen",
        ":drop_indexes_gen",
    ],
    hdrs = [
        "//src/mongo/db/auth:authorization_contract.h",
    ],
    header_deps = [
        "//src/mongo/db/repl:oplog_buffer_batched_queue",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/auth:authprivilege",
        "//src/mongo/db/index_builds:commit_quorum_options",
    ],
)

mongo_cc_library(
    name = "internal_transactions_feature_flag",
    srcs = [
        ":internal_transactions_feature_flag_gen",
    ],
    header_deps = [
        ":index_commands_idl",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_library(
    name = "keys_collection_document",
    srcs = [
        ":keys_collection_document_gen",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_library(
    name = "metadata_consistency_types_idl",
    srcs = [
        ":metadata_consistency_types_gen",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_library(
    name = "namespace_spec",
    srcs = [
        ":namespace_spec_gen",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_library(
    name = "signed_logical_time",
    srcs = [
        "signed_logical_time.cpp",
    ],
    hdrs = [
        "signed_logical_time.h",
        "time_proof_service.h",
    ],
    deps = [
        ":server_base",
        "//src/mongo/crypto:sha1_block",
    ],
)

mongo_cc_library(
    name = "update_index_data",
    srcs = [
        "update_index_data.cpp",
    ],
    hdrs = [
        "update_index_data.h",
    ],
    deps = [
        ":common",
    ],
)

mongo_cc_library(
    name = "multi_key_path_tracker",
    srcs = [
        "multi_key_path_tracker.cpp",
    ],
    hdrs = [
        "multi_key_path_tracker.h",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/db/storage/key_string",
    ],
)

mongo_cc_library(
    name = "keys_collection_client_sharded",
    srcs = [
        "keys_collection_client_sharded.cpp",
    ],
    hdrs = [
        "keys_collection_client.h",
        "keys_collection_client_sharded.h",
    ],
    header_deps = [
        "//src/mongo/db/exec/mutable_bson:mutable_bson",
        "//src/mongo/db/commands:server_status_core",
    ],
    deps = [
        "keys_collection_document",
        "server_base",
        "//src/mongo/s/catalog:sharding_catalog_client",
    ],
)

idl_generator(
    name = "operation_context_options_gen",
    src = "operation_context_options.idl",
)

mongo_cc_library(
    name = "service_context",
    srcs = [
        "baton.cpp",
        "cancelable_operation_context.cpp",
        "client.cpp",
        "client_strand.cpp",
        "default_baton.cpp",
        "operation_context.cpp",
        "operation_context_group.cpp",
        "operation_context_options_gen",
        "operation_cpu_timer.cpp",
        "operation_id.cpp",
        "operation_key_manager.cpp",
        "server_recovery.cpp",
        "service_context.cpp",
        "version_context_decoration.cpp",
    ],
    hdrs = [
        "cancelable_operation_context.h",
        "client_strand.h",
        "default_baton.h",
        "operation_context.h",
        "operation_context_group.h",
        "operation_key_manager.h",
        "server_recovery.h",
        "//src/mongo/transport:service_entry_point.h",
        "//src/mongo/transport:transport_layer_manager.h",
    ],
    deps = [
        "multi_key_path_tracker",
        "server_base",
        "//src/mongo/db/concurrency:lock_manager",
        "//src/mongo/db/session:logical_session_id",
        "//src/mongo/db/storage:recovery_unit_base",
        "//src/mongo/db/storage:write_unit_of_work",
        "//src/mongo/util:clock_sources",
        "//src/mongo/util:periodic_runner",
        "//src/mongo/util:processinfo",
        "//src/mongo/util/concurrency:spin_lock",
        "//src/mongo/util/net:network",
    ],
)

# This library is the base class for tests which require the presence of
# ServiceContext. However it does not perform any default initialisation of the
# relevant services, such as lockers and transaction resources, so any test
# which directly references it must perform its own initialisation.
#
# If a test requires the presence of a storage engine, it should use the
# service_context_d_test_fixture below directly.
mongo_cc_library(
    name = "service_context_test_fixture",
    srcs = [
        "service_context_test_fixture.cpp",
    ],
    hdrs = [
        "service_context_test_fixture.h",
    ],
    tags = [
        "mongo_crypt",
    ],
    deps = [
        ":service_context",
        "//src/mongo/client:clientdriver_network",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/query/query_settings:query_settings_service",
        "//src/mongo/transport:session_manager",
        "//src/mongo/unittest",
        "//src/mongo/util:clock_source_mock",
        "//src/mongo/util:tick_source_mock",
    ],
)

mongo_cc_library(
    name = "sbe_values",
    srcs = [
        "//src/mongo/db/exec/sbe/values:arith_common.cpp",
        "//src/mongo/db/exec/sbe/values:block_interface.cpp",
        "//src/mongo/db/exec/sbe/values:bson.cpp",
        "//src/mongo/db/exec/sbe/values:bson_block.cpp",
        "//src/mongo/db/exec/sbe/values:cell_interface.cpp",
        "//src/mongo/db/exec/sbe/values:key_string_entry.cpp",
        "//src/mongo/db/exec/sbe/values:row.cpp",
        "//src/mongo/db/exec/sbe/values:slot_printer.cpp",
        "//src/mongo/db/exec/sbe/values:ts_block.cpp",
        "//src/mongo/db/exec/sbe/values:util.cpp",
        "//src/mongo/db/exec/sbe/values:value.cpp",
        "//src/mongo/db/exec/sbe/values:value_printer.cpp",
        "//src/mongo/db/exec/sbe/vm:vm_types.h",
        "//src/mongo/db/exec/timeseries:bucket_unpacker.h",
        "//src/mongo/db/pipeline/search:search_helper.h",
        "//src/mongo/db/query/search:search_task_executors.h",
        "//src/mongo/executor:task_executor_cursor.h",
        "//src/mongo/executor:task_executor_cursor_options.h",
    ],
    hdrs = [
        "//src/mongo/db/exec:trial_run_tracker.h",
        "//src/mongo/db/exec/sbe:makeobj_spec.h",
        "//src/mongo/db/exec/sbe:size_estimator.h",
        "//src/mongo/db/exec/sbe:slots_provider.h",
        "//src/mongo/db/exec/sbe:sort_spec.h",
        "//src/mongo/db/exec/sbe/expressions:compile_ctx.h",
        "//src/mongo/db/exec/sbe/expressions:expression.h",
        "//src/mongo/db/exec/sbe/expressions:runtime_environment.h",
        "//src/mongo/db/exec/sbe/stages:block_hashagg.h",
        "//src/mongo/db/exec/sbe/stages:hash_agg.h",
        "//src/mongo/db/exec/sbe/stages:hashagg_base.h",
        "//src/mongo/db/exec/sbe/stages:stages.h",
        "//src/mongo/db/exec/sbe/stages:window.h",
        "//src/mongo/db/exec/sbe/util:debug_print.h",
        "//src/mongo/db/exec/sbe/util:print_options.h",
        "//src/mongo/db/exec/sbe/util:spilling.h",
        "//src/mongo/db/exec/sbe/values:arith_common.h",
        "//src/mongo/db/exec/sbe/values:block_interface.h",
        "//src/mongo/db/exec/sbe/values:bson.h",
        "//src/mongo/db/exec/sbe/values:bson_block.h",
        "//src/mongo/db/exec/sbe/values:bsoncolumn_materializer.h",
        "//src/mongo/db/exec/sbe/values:cell_interface.h",
        "//src/mongo/db/exec/sbe/values:column_op.h",
        "//src/mongo/db/exec/sbe/values:generic_compare.h",
        "//src/mongo/db/exec/sbe/values:key_string_entry.h",
        "//src/mongo/db/exec/sbe/values:row.h",
        "//src/mongo/db/exec/sbe/values:scalar_mono_cell_block.h",
        "//src/mongo/db/exec/sbe/values:slot.h",
        "//src/mongo/db/exec/sbe/values:slot_printer.h",
        "//src/mongo/db/exec/sbe/values:slot_util.h",
        "//src/mongo/db/exec/sbe/values:ts_block.h",
        "//src/mongo/db/exec/sbe/values:util.h",
        "//src/mongo/db/exec/sbe/values:value.h",
        "//src/mongo/db/exec/sbe/values:value_builder.h",
        "//src/mongo/db/exec/sbe/values:value_printer.h",
        "//src/mongo/db/exec/sbe/vm:code_fragment.h",
        "//src/mongo/db/exec/sbe/vm:makeobj_cursors.h",
        "//src/mongo/db/exec/sbe/vm:makeobj_writers.h",
        "//src/mongo/db/exec/sbe/vm:vm.h",
        "//src/mongo/db/exec/sbe/vm:vm_builtin.h",
        "//src/mongo/db/exec/sbe/vm:vm_datetime.h",
        "//src/mongo/db/exec/sbe/vm:vm_instruction.h",
        "//src/mongo/db/exec/sbe/vm:vm_makeobj.h",
        "//src/mongo/db/exec/sbe/vm:vm_memory.h",
        "//src/mongo/db/query:multiple_collection_accessor.h",
        "//src/mongo/db/query/search:internal_search_mongot_remote_spec_gen",
        "//src/mongo/executor:task_executor_cursor_parameters_gen",
    ],
    header_deps = [
        "//src/mongo/util:field_set",
        "//src/mongo/db/timeseries:bucket_compression",
    ],
    deps = [
        "//src/mongo:base",
        "//src/mongo/bson/column",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/exec:js_function",
        "//src/mongo/db/query/collation:collator_interface",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query/datetime:date_time_support",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/storage:storage_options",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/storage/key_string",
        "//src/mongo/util:pcre_util",
        "//src/mongo/util:string_listset",
        "//src/mongo/util:summation",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "query_expressions",
    srcs = [
        "//src/mongo/db/exec:projection_executor_utils.cpp",
        "//src/mongo/db/exec/expression:evaluate_array.cpp",
        "//src/mongo/db/exec/expression:evaluate_bson.cpp",
        "//src/mongo/db/exec/expression:evaluate_date.cpp",
        "//src/mongo/db/exec/expression:evaluate_find_internal.cpp",
        "//src/mongo/db/exec/expression:evaluate_fle.cpp",
        "//src/mongo/db/exec/expression:evaluate_index.cpp",
        "//src/mongo/db/exec/expression:evaluate_javascript.cpp",
        "//src/mongo/db/exec/expression:evaluate_logical.cpp",
        "//src/mongo/db/exec/expression:evaluate_map_reduce.cpp",
        "//src/mongo/db/exec/expression:evaluate_math.cpp",
        "//src/mongo/db/exec/expression:evaluate_meta.cpp",
        "//src/mongo/db/exec/expression:evaluate_regex.cpp",
        "//src/mongo/db/exec/expression:evaluate_string.cpp",
        "//src/mongo/db/exec/matcher:match_details.cpp",
        "//src/mongo/db/exec/matcher:matcher.cpp",
        "//src/mongo/db/exec/matcher:matcher_geo.cpp",
        "//src/mongo/db/exec/matcher:matcher_single_element_match.cpp",
        "//src/mongo/db/exec/matcher:matcher_text.cpp",
        "//src/mongo/db/exec/matcher:matcher_where.cpp",
        "//src/mongo/db/matcher:doc_validation_error.cpp",
        "//src/mongo/db/matcher:doc_validation_util.cpp",
        "//src/mongo/db/matcher:expression.cpp",
        "//src/mongo/db/matcher:expression_algo.cpp",
        "//src/mongo/db/matcher:expression_array.cpp",
        "//src/mongo/db/matcher:expression_bitset_tree_converter.cpp",
        "//src/mongo/db/matcher:expression_expr.cpp",
        "//src/mongo/db/matcher:expression_geo.cpp",
        "//src/mongo/db/matcher:expression_geo_serializer.cpp",
        "//src/mongo/db/matcher:expression_hasher.cpp",
        "//src/mongo/db/matcher:expression_internal_bucket_geo_within.cpp",
        "//src/mongo/db/matcher:expression_leaf.cpp",
        "//src/mongo/db/matcher:expression_parameterization.cpp",
        "//src/mongo/db/matcher:expression_parser.cpp",
        "//src/mongo/db/matcher:expression_restorer.cpp",
        "//src/mongo/db/matcher:expression_simplifier.cpp",
        "//src/mongo/db/matcher:expression_text_base.cpp",
        "//src/mongo/db/matcher:expression_text_noop.cpp",
        "//src/mongo/db/matcher:expression_tree.cpp",
        "//src/mongo/db/matcher:expression_where_base.cpp",
        "//src/mongo/db/matcher:expression_where_noop.cpp",
        "//src/mongo/db/matcher:expression_with_placeholder.cpp",
        "//src/mongo/db/matcher:extensions_callback.cpp",
        "//src/mongo/db/matcher:extensions_callback_noop.cpp",
        "//src/mongo/db/matcher:in_list_data.cpp",
        "//src/mongo/db/matcher:match_expression_dependencies.cpp",
        "//src/mongo/db/matcher:match_expression_util.cpp",
        "//src/mongo/db/matcher:matchable.cpp",
        "//src/mongo/db/matcher:matcher.cpp",
        "//src/mongo/db/matcher:matcher_type_set.cpp",
        "//src/mongo/db/matcher:rewrite_expr.cpp",
        "//src/mongo/db/matcher/schema:encrypt_schema_gen",
        "//src/mongo/db/matcher/schema:encrypt_schema_types.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_all_elem_match_from_index.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_allowed_properties.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_eq.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_fmod.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_match_array_index.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_num_array_items.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_num_properties.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_object_match.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_root_doc_eq.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_str_length.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_unique_items.cpp",
        "//src/mongo/db/matcher/schema:expression_internal_schema_xor.cpp",
        "//src/mongo/db/matcher/schema:json_pointer.cpp",
        "//src/mongo/db/matcher/schema:json_schema_parser.cpp",
        "//src/mongo/db/pipeline:expression.cpp",
        "//src/mongo/db/pipeline:expression_context.cpp",
        "//src/mongo/db/pipeline:expression_dependencies.cpp",
        "//src/mongo/db/pipeline:expression_find_internal.cpp",
        "//src/mongo/db/pipeline:expression_function.cpp",
        "//src/mongo/db/pipeline:expression_js_emit.cpp",
        "//src/mongo/db/pipeline:expression_let.cpp",
        "//src/mongo/db/pipeline:expression_parser_gen",
        "//src/mongo/db/pipeline:expression_test_api_version.cpp",
        "//src/mongo/db/pipeline:expression_test_feature_flags.cpp",
        "//src/mongo/db/pipeline:expression_trigonometric.cpp",
        "//src/mongo/db/pipeline:javascript_execution.cpp",
        "//src/mongo/db/pipeline:make_js_function.cpp",
        "//src/mongo/db/pipeline:monotonic_expression.cpp",
        "//src/mongo/db/pipeline:name_expression.cpp",
        "//src/mongo/db/pipeline:variables.cpp",
        "//src/mongo/db/query:query_utils.cpp",
        "//src/mongo/db/query/fle:implicit_validator.cpp",
        "//src/mongo/db/query/query_shape:let_shape_component.cpp",
    ],
    hdrs = [
        "//src/mongo/bson:unordered_fields_bsonelement_comparator.h",
        "//src/mongo/db/exec:projection_executor_utils.h",
        "//src/mongo/db/exec:substr_utils.h",
        "//src/mongo/db/exec/expression:evaluate.h",
        "//src/mongo/db/exec/matcher:match_details.h",
        "//src/mongo/db/exec/matcher:matcher.h",
        "//src/mongo/db/exec/matcher:matcher_geo.h",
        "//src/mongo/db/exec/sbe:match_path.h",
        "//src/mongo/db/matcher:doc_validation_error.h",
        "//src/mongo/db/matcher:doc_validation_util.h",
        "//src/mongo/db/matcher:expression.h",
        "//src/mongo/db/matcher:expression_algo.h",
        "//src/mongo/db/matcher:expression_always_boolean.h",
        "//src/mongo/db/matcher:expression_arity.h",
        "//src/mongo/db/matcher:expression_array.h",
        "//src/mongo/db/matcher:expression_bitset_tree_converter.h",
        "//src/mongo/db/matcher:expression_expr.h",
        "//src/mongo/db/matcher:expression_geo.h",
        "//src/mongo/db/matcher:expression_geo_serializer.h",
        "//src/mongo/db/matcher:expression_hasher.h",
        "//src/mongo/db/matcher:expression_internal_bucket_geo_within.h",
        "//src/mongo/db/matcher:expression_internal_eq_hashed_key.h",
        "//src/mongo/db/matcher:expression_internal_expr_comparison.h",
        "//src/mongo/db/matcher:expression_leaf.h",
        "//src/mongo/db/matcher:expression_parameterization.h",
        "//src/mongo/db/matcher:expression_parser.h",
        "//src/mongo/db/matcher:expression_restorer.h",
        "//src/mongo/db/matcher:expression_simplifier.h",
        "//src/mongo/db/matcher:expression_text.h",
        "//src/mongo/db/matcher:expression_text_base.h",
        "//src/mongo/db/matcher:expression_text_noop.h",
        "//src/mongo/db/matcher:expression_tree.h",
        "//src/mongo/db/matcher:expression_where.h",
        "//src/mongo/db/matcher:expression_where_base.h",
        "//src/mongo/db/matcher:expression_where_noop.h",
        "//src/mongo/db/matcher:expression_with_placeholder.h",
        "//src/mongo/db/matcher:extensions_callback.h",
        "//src/mongo/db/matcher:extensions_callback_noop.h",
        "//src/mongo/db/matcher:in_list_data.h",
        "//src/mongo/db/matcher:match_expression_dependencies.h",
        "//src/mongo/db/matcher:match_expression_util.h",
        "//src/mongo/db/matcher:match_expression_walker.h",
        "//src/mongo/db/matcher:matchable.h",
        "//src/mongo/db/matcher:matcher.h",
        "//src/mongo/db/matcher:matcher_type_set.h",
        "//src/mongo/db/matcher:rewrite_expr.h",
        "//src/mongo/db/matcher/schema:encrypt_schema_types.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_all_elem_match_from_index.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_allowed_properties.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_cond.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_eq.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_fmod.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_match_array_index.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_max_items.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_max_length.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_max_properties.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_min_items.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_min_length.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_min_properties.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_num_array_items.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_num_properties.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_object_match.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_root_doc_eq.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_str_length.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_unique_items.h",
        "//src/mongo/db/matcher/schema:expression_internal_schema_xor.h",
        "//src/mongo/db/matcher/schema:json_pointer.h",
        "//src/mongo/db/matcher/schema:json_schema_parser.h",
        "//src/mongo/db/pipeline:expression.h",
        "//src/mongo/db/pipeline:expression_context.h",
        "//src/mongo/db/pipeline:expression_context_diagnostic_printer.h",
        "//src/mongo/db/pipeline:expression_dependencies.h",
        "//src/mongo/db/pipeline:expression_find_internal.h",
        "//src/mongo/db/pipeline:expression_function.h",
        "//src/mongo/db/pipeline:expression_hasher.h",
        "//src/mongo/db/pipeline:expression_js_emit.h",
        "//src/mongo/db/pipeline:expression_test_api_version.h",
        "//src/mongo/db/pipeline:expression_test_feature_flags.h",
        "//src/mongo/db/pipeline:expression_trigonometric.h",
        "//src/mongo/db/pipeline:javascript_execution.h",
        "//src/mongo/db/pipeline:make_js_function.h",
        "//src/mongo/db/pipeline:monotonic_expression.h",
        "//src/mongo/db/pipeline:name_expression.h",
        "//src/mongo/db/pipeline:variables.h",
        "//src/mongo/db/pipeline/process_interface:stub_mongo_process_interface.h",
        "//src/mongo/db/query:dbref.h",
        "//src/mongo/db/query:expression_walker.h",
        "//src/mongo/db/query:indexability.h",
        "//src/mongo/db/query:query_utils.h",
        "//src/mongo/db/query/fle:implicit_validator.h",
        "//src/mongo/db/query/query_shape:let_shape_component.h",
    ],
    deps = [
        ":common",
        ":curop_failpoint_helpers",
        ":mongohasher",  # TODO(SERVER-93876): Remove.
        ":sbe_values",
        ":server_base",  # TODO(SERVER-93876): Remove.
        ":service_context",  # TODO(SERVER-93876): Remove.
        ":vector_clock",  # TODO(SERVER-93876): Remove.
        "//src/mongo/bson/dotted_path:dotted_path_support",
        "//src/mongo/bson/util:bson_extract",
        "//src/mongo/crypto:fle_crypto",
        "//src/mongo/crypto:fle_tokens",
        "//src/mongo/db/commands:test_commands_enabled",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/exec:str_trim_utils",
        "//src/mongo/db/exec:substr_utils",
        "//src/mongo/db/exec/document_value",
        "//src/mongo/db/fts:fts_query_noop",
        "//src/mongo/db/geo:geometry",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/geo:geoparser",
        "//src/mongo/db/matcher:path",
        "//src/mongo/db/pipeline:aggregation_request_helper",
        "//src/mongo/db/pipeline:dependencies",
        "//src/mongo/db/pipeline:variable_validation",
        "//src/mongo/db/query:query_knob_configuration",
        "//src/mongo/db/query:query_knobs",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query:random_utils",
        "//src/mongo/db/query/collation:collator_factory_interface",
        "//src/mongo/db/query/collation:collator_interface",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query/compiler/rewrites/boolean_simplification",
        "//src/mongo/db/query/datetime:date_time_support",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query/query_settings",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query/query_shape:query_shape_common",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/query/util:rank_fusion_util",
        "//src/mongo/db/stats:counters",  # TODO(SERVER-93876): Remove.
        "//src/mongo/db/update:pattern_cmp",
        "//src/mongo/rpc:metadata_impersonated_user",
        "//src/mongo/scripting",  # TODO(SERVER-93876): Remove.
        "//src/mongo/scripting:scripting_common",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util:elapsed_tracker",
        "//src/mongo/util:pcre_util",
        "//src/mongo/util:pcre_wrapper",  # TODO(SERVER-93876): Remove.
        "//src/mongo/util:summation",  # TODO(SERVER-93876): Remove.
    ],
)

mongo_cc_library(
    name = "sharding_expressions",
    srcs = [
        "//src/mongo/db/exec/expression:evaluate_sharding.cpp",
        "//src/mongo/db/pipeline:expression_sharding.cpp",
    ],
    hdrs = [
        "//src/mongo/db/exec/expression:evaluate_sharding.h",
        "//src/mongo/db/pipeline:expression_sharding.h",
    ],
    deps = [
        "//src/mongo/db/catalog:index_key_validate",
        "//src/mongo/s:grid",
    ],
)

mongo_cc_library(
    name = "mirror_maestro",
    srcs = [
        "mirror_maestro.cpp",
        "mirror_maestro_test_commands.cpp",
        "mirroring_sampler.cpp",
        ":mirror_maestro_gen",
    ],
    hdrs = [
        "mirror_maestro.h",
        "mirroring_sampler.h",
        ":mirror_maestro_gen",
    ],
    deps = [
        ":client_out_of_line_executor",
        ":commands",
        ":server_base",
        ":service_context",
        "//src/mongo/bson/util:bson_extract",
        "//src/mongo/db/auth:security_token_auth",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:repl_settings",
        "//src/mongo/db/repl:replica_set_messages",
        "//src/mongo/db/repl/hello:topology_version_observer",
        "//src/mongo/executor:connection_pool_controllers",
        "//src/mongo/executor:network_interface_factory",
        "//src/mongo/executor:task_executor_interface",
        "//src/mongo/executor:thread_pool_task_executor",
        "//src/mongo/rpc:message",
        "//src/mongo/util/concurrency:thread_pool",
        "//src/mongo/util/net:network",
    ],
)

mongo_cc_unit_test(
    name = "mirror_maestro_test",
    srcs = ["mirror_maestro_test.cpp"],
    tags = ["mongo_unittest_eighth_group"],
    deps = [
        ":mirror_maestro",
        "//src/mongo/db:service_context_d_test_fixture",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/executor:network_test_env",
        "//src/mongo/executor:task_executor_test_fixture",
        "//src/mongo/executor:thread_pool_task_executor_test_fixture",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/unittest",
    ],
)

mongo_cc_library(
    name = "change_stream_options_manager",
    srcs = [
        "change_stream_options_manager.cpp",
        ":change_stream_options_parameter_gen",
    ],
    hdrs = [
        "change_stream_options_manager.h",
    ],
    deps = [
        ":change_stream_options",
        ":change_stream_serverless_helpers",
        ":server_base",
        ":service_context",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:repl_settings",
    ],
)

mongo_cc_library(
    name = "change_streams_cluster_parameter",
    srcs = [
        "change_streams_cluster_parameter.cpp",
        ":change_streams_cluster_parameter_gen",
    ],
    hdrs = [
        "change_streams_cluster_parameter.h",
    ],
    deps = [
        ":change_stream_serverless_helpers",
        ":server_base",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:repl_settings",
        "//src/mongo/idl:cluster_server_parameter",
    ],
)

mongo_cc_library(
    name = "rs_local_client",
    srcs = [
        "rs_local_client.cpp",
    ],
    hdrs = [
        "rs_local_client.h",
    ],
    deps = [
        ":dbdirectclient",
        ":rw_concern_d",
        "//src/mongo/db/repl:repl_coordinator_interface",
    ],
)

mongo_cc_library(
    name = "keys_collection_client_direct",
    srcs = [
        "keys_collection_client_direct.cpp",
    ],
    hdrs = [
        "keys_collection_client_direct.h",
    ],
    deps = [
        ":keys_collection_document",
        ":rs_local_client",
        ":server_base",
        "//src/mongo/s/catalog:sharding_catalog_client",
        "//src/mongo/s/client:shard_interface",
    ],
)

mongo_cc_library(
    name = "vector_clock_mongod",
    srcs = [
        "vector_clock_mongod.cpp",
        "//src/mongo/db/s:topology_time_ticker.cpp",
    ],
    hdrs = [
        "persistent_task_store.h",
        "vector_clock_mongod.h",
        "//src/mongo/db/s:topology_time_ticker.h",
    ],
    deps = [
        ":dbdirectclient",
        ":rw_concern_d",
        ":server_base",
        ":vector_clock_mutable",
        "//src/mongo/db/concurrency:lock_manager",
        "//src/mongo/db/repl:replica_set_aware_service",
        "//src/mongo/s:grid",
    ],
)

mongo_cc_library(
    name = "fle_crud",
    srcs = [
        ":fle_crud.cpp",
        "//src/mongo/db/commands:fle2_get_count_info_command_gen",
        "//src/mongo/db/query/fle:encrypted_predicate.cpp",
        "//src/mongo/db/query/fle:equality_predicate.cpp",
        "//src/mongo/db/query/fle:query_rewriter.cpp",
        "//src/mongo/db/query/fle:range_predicate.cpp",
        "//src/mongo/db/query/fle:range_validator.cpp",
        "//src/mongo/db/query/fle:server_rewrite.cpp",
        "//src/mongo/db/query/fle:text_search_predicate.cpp",
        "//src/mongo/s:ns_targeter.h",
        "//src/mongo/s/write_ops:batch_write_exec.h",
    ],
    hdrs = [
        ":fle_crud.h",
        "//src/mongo/db/query/fle:encrypted_predicate.h",
        "//src/mongo/db/query/fle:equality_predicate.h",
        "//src/mongo/db/query/fle:query_rewriter.h",
        "//src/mongo/db/query/fle:query_rewriter_interface.h",
        "//src/mongo/db/query/fle:range_predicate.h",
        "//src/mongo/db/query/fle:range_validator.h",
        "//src/mongo/db/query/fle:server_rewrite.h",
        "//src/mongo/db/query/fle:server_rewrite_helper.h",
        "//src/mongo/db/query/fle:text_search_predicate.h",
    ],
    deps = [
        ":dbdirectclient",
        "//src/mongo/crypto:encrypted_field_config",
        "//src/mongo/crypto:fle_crypto",
        "//src/mongo/db:query_expressions",
        "//src/mongo/db/pipeline",
        "//src/mongo/db/query:command_request_response",
        "//src/mongo/db/query:query_request",
        "//src/mongo/db/query/collation:collator_factory_interface",
        "//src/mongo/db/query/write_ops:write_ops_parsers",
        "//src/mongo/db/session:logical_session_id",
        "//src/mongo/db/transaction:transaction_api",
        "//src/mongo/executor:inline_executor",
        "//src/mongo/executor:task_executor_pool",
        "//src/mongo/s:sharding_router_api",
        "//src/mongo/util/concurrency:spin_lock",
    ],
)

mongo_cc_library(
    name = "fle_mocks",
    srcs = [
        "fle_query_interface_mock.cpp",
    ],
    hdrs = [
        "fle_query_interface_mock.h",
    ],
    deps = [
        ":fle_crud",
        ":fle_crud_mongod",
        "//src/mongo/crypto:fle_crypto",
        "//src/mongo/db/query/write_ops",
        "//src/mongo/db/repl:storage_interface_impl",
    ],
)

mongo_cc_unit_test(
    name = "fle_test",
    srcs = [
        "fle_crud_test.cpp",
        "//src/mongo/db/pipeline:expression_context_for_test.h",
        "//src/mongo/db/query/fle:encrypted_predicate_test_fixtures.cpp",
        "//src/mongo/db/query/fle:encrypted_predicate_test_fixtures.h",
        "//src/mongo/db/query/fle:equality_predicate_test.cpp",
        "//src/mongo/db/query/fle:implicit_validator_test.cpp",
        "//src/mongo/db/query/fle:query_rewriter_test.cpp",
        "//src/mongo/db/query/fle:range_predicate_test.cpp",
        "//src/mongo/db/query/fle:range_validator_test.cpp",
        "//src/mongo/db/query/fle:text_search_predicate_test.cpp",
    ],
    tags = ["mongo_unittest_seventh_group"],
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":fle_crud",
        ":fle_mocks",
        ":query_expressions",
        ":service_context_d_test_fixture",
        ":service_context_test_fixture",
        "//src/mongo/crypto:aead_encryption",
        "//src/mongo/crypto:encrypted_field_config",
        "//src/mongo/crypto:fle_crypto",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/exec/document_value:document_value_test_util",
        "//src/mongo/db/query:query_test_service_context",
        "//src/mongo/db/query/write_ops",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/db/repl:storage_interface_impl",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/shell:kms_idl",
    ],
)

mongo_cc_library(
    name = "change_stream_pre_image_util",
    srcs = [
        "change_stream_pre_image_util.cpp",
    ],
    hdrs = [
        "change_stream_pre_image_util.h",
    ],
    deps = [
        ":change_stream_options_manager",
        ":change_stream_serverless_helpers",
        ":query_exec",
        ":record_id_helpers",
        ":server_base",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/pipeline:change_stream_preimage",
    ],
)

mongo_cc_library(
    name = "keys_collection_util",
    srcs = [
        "keys_collection_util.cpp",
    ],
    hdrs = [
        "keys_collection_util.h",
    ],
    deps = [
        ":dbhelpers",
        ":keys_collection_document",
        ":shard_role",
        "//src/mongo/db/concurrency:exception_util",
    ],
)

mongo_cc_library(
    name = "change_stream_change_collection_manager",
    srcs = [
        "change_stream_change_collection_manager.cpp",
    ],
    hdrs = [
        "change_stream_change_collection_manager.h",
    ],
    deps = [
        ":change_stream_serverless_helpers",
        ":change_streams_cluster_parameter",
        ":dbhelpers",
        ":record_id_helpers",
        ":server_feature_flags",
        ":service_context",
        "//src/mongo/db/catalog:catalog_helpers",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/concurrency:exception_util",
    ],
)

mongo_cc_library(
    name = "change_collection_expired_change_remover",
    srcs = [
        "change_collection_expired_documents_remover.cpp",
    ],
    hdrs = [
        "change_collection_expired_documents_remover.h",
    ],
    deps = [
        "//src/mongo/db:change_stream_change_collection_manager",
        "//src/mongo/db:change_stream_serverless_helpers",
        "//src/mongo/db:change_streams_cluster_parameter",
        "//src/mongo/db:query_exec",
        "//src/mongo/db:server_feature_flags",
        "//src/mongo/util:periodic_runner",
    ],
)

mongo_cc_library(
    name = "change_stream_pre_images_collection_manager",
    srcs = [
        "change_stream_pre_images_collection_manager.cpp",
        "change_stream_pre_images_tenant_truncate_markers.cpp",
        "change_stream_pre_images_truncate_manager.cpp",
        "change_stream_pre_images_truncate_markers_per_nsUUID.cpp",
        "//src/mongo/util:concurrent_shared_values_map.h",
    ],
    hdrs = [
        "change_stream_pre_images_collection_manager.h",
        "change_stream_pre_images_tenant_truncate_markers.h",
        "change_stream_pre_images_truncate_manager.h",
        "change_stream_pre_images_truncate_markers_per_nsUUID.h",
    ],
    deps = [
        ":change_stream_options_manager",
        ":change_stream_pre_image_util",
        ":change_stream_serverless_helpers",
        ":query_exec",
        ":record_id_helpers",
        ":server_base",
        ":server_feature_flags",
        "//src/mongo/db/catalog:catalog_helpers",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/pipeline:change_stream_preimage",
        "//src/mongo/db/repl:storage_interface",
        "//src/mongo/db/storage:storage_options",
    ],
)

mongo_cc_library(
    name = "read_concern_d_impl",
    srcs = [
        "read_concern_mongod.cpp",
        ":read_concern_mongod_gen",
    ],
    deps = [
        ":server_base",
        ":shard_role",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:speculative_majority_read_info",
    ],
)

mongo_cc_library(
    name = "set_change_stream_state_coordinator",
    srcs = [
        "set_change_stream_state_coordinator.cpp",
        ":set_change_stream_state_coordinator_gen",
    ],
    hdrs = [
        "set_change_stream_state_coordinator.h",
    ],
    deps = [
        "//src/mongo/db:change_stream_change_collection_manager",
        "//src/mongo/db:change_stream_pre_images_collection_manager",
        "//src/mongo/db:change_stream_serverless_helpers",
        "//src/mongo/db:change_stream_state",
        "//src/mongo/db:dbdirectclient",
        "//src/mongo/db/repl:primary_only_service",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/repl:wait_for_majority_service",
        "//src/mongo/idl:idl_parser",
    ],
)

mongo_cc_library(
    name = "system_index",
    srcs = [
        "system_index.cpp",
    ],
    hdrs = [
        "system_index.h",
    ],
    deps = [
        ":shard_role",
        "//src/mongo/db/catalog:index_key_validate",
        "//src/mongo/db/exec:scoped_timer",
        "//src/mongo/db/index_builds:index_builds_coordinator",
        "//src/mongo/db/index_builds:multi_index_block",
    ],
)

mongo_cc_library(
    name = "fle_crud_mongod",
    srcs = [
        "fle_crud_mongod.cpp",
    ],
    deps = [
        ":fle_crud",
        ":shard_role",
        "//src/mongo/crypto:fle_crypto",
        "//src/mongo/db:record_id_helpers",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/query:query_request",
        "//src/mongo/db/repl:repl_coordinator_interface",
        "//src/mongo/db/session:logical_session_id",
        "//src/mongo/db/session:session_catalog_mongod",
        "//src/mongo/db/transaction",
        "//src/mongo/executor:inline_executor",
        "//src/mongo/executor:network_interface_factory",
        "//src/mongo/executor:task_executor_pool",
        "//src/mongo/executor:thread_pool_task_executor",
        "//src/mongo/util/concurrency:thread_pool",
    ],
)

mongo_cc_library(
    name = "periodic_runner_job_abort_expired_transactions",
    srcs = [
        "periodic_runner_job_abort_expired_transactions.cpp",
    ],
    hdrs = [
        "periodic_runner_job_abort_expired_transactions.h",
    ],
    deps = [
        "//src/mongo/db/session:kill_sessions_local",
        "//src/mongo/db/transaction",
        "//src/mongo/util:periodic_runner",
    ],
)

mongo_cc_library(
    name = "periodic_runner_cache_pressure_rollback",
    srcs = [
        "periodic_runner_cache_pressure_rollback.cpp",
    ],
    hdrs = [
        "periodic_runner_cache_pressure_rollback.h",
    ],
    deps = [
        "//src/mongo/db/admission:execution_control",
        "//src/mongo/db/session:kill_sessions_local",
        "//src/mongo/db/transaction",
        "//src/mongo/util:periodic_runner",
    ],
)

mongo_cc_library(
    name = "serverinit",
    srcs = [
        "initialize_server_global_state.cpp",
        "server_options_init.cpp",
        ":initialize_server_global_state_gen",
    ],
    hdrs = [
        "initialize_server_global_state.h",
    ],
    deps = [
        "//src/mongo/db:audit",
        "//src/mongo/db:server_base",
        "//src/mongo/util:processinfo",
        "//src/mongo/util:signal_handlers",
    ] + select({
        "@platforms//os:linux": [":throw_hook_impl"],
        "//conditions:default": [],
    }),
)

mongo_cc_library(
    name = "cloner",
    srcs = [
        "cloner.cpp",
        ":cloner_gen",
    ],
    hdrs = [
        "cloner.h",
    ],
    deps = [
        ":dbdirectclient",
        ":multitenancy",
        ":server_base",
        ":shard_role",
        "//src/mongo/client:authentication",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/commands:list_collections_filter",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/index_builds:index_builds_coordinator",
        "//src/mongo/db/index_builds:multi_index_block",
        "//src/mongo/db/query/write_ops",
        "//src/mongo/db/repl:isself",
    ],
)

mongo_cc_library(
    name = "cluster_transaction_api",
    srcs = [
        "cluster_transaction_api.cpp",
    ],
    hdrs = [
        "cluster_command_translations.h",
        "cluster_transaction_api.h",
    ],
    deps = [
        ":service_context",
        ":shared_request_handling",
        "//src/mongo/db/session:logical_session_id",
        "//src/mongo/db/session:logical_session_id_helpers",
        "//src/mongo/db/transaction:transaction_api",
        "//src/mongo/rpc",
        "//src/mongo/s:startup_initialization",
    ],
)

mongo_cc_library(
    name = "incremental_rollout_metrics",
    srcs = [
        "incremental_rollout_metrics.cpp",
    ],
    deps = [
        ":server_base",
        "//src/mongo/db/commands:server_status_core",
    ],
)

mongo_cc_library(
    name = "service_context_d",
    srcs = [
        "service_entry_point_rs_endpoint.cpp",
        "service_entry_point_shard_role.cpp",
        "transaction_resources_init_mongod.cpp",
    ],
    hdrs = [
        "service_entry_point_rs_endpoint.h",
        "service_entry_point_shard_role.h",
        "service_entry_point_shard_role_helpers.h",
    ],
    deps = [
        "audit",
        "command_can_run_here",
        "curop_metrics",
        "default_max_time_ms_cluster_parameter",
        "multitenancy",
        "not_primary_error_tracker",
        "profile_collection",
        "read_concern_d_impl",
        "rw_concern_d",
        "server_base",
        "server_feature_flags",
        "service_context",
        "shared_request_handling",
        "validate_api_parameters",
        "write_block_bypass",
        "//src/mongo:base",
        "//src/mongo/db/admission:ingress_admission_control",
        "//src/mongo/db/admission:ingress_request_rate_limiter",
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:auth_umc",
        "//src/mongo/db/auth:authprivilege",
        "//src/mongo/db/auth:security_token_auth",
        "//src/mongo/db/auth:user_acquisition_stats",
        "//src/mongo/db/commands:fsync_locked",
        "//src/mongo/db/commands:server_status_core",
        "//src/mongo/db/commands:txn_cmd_request",
        "//src/mongo/db/repl:repl_server_parameters",
        "//src/mongo/db/repl:replica_set_messages",
        "//src/mongo/db/s:sharding_runtime_d",
        "//src/mongo/db/session:session_catalog_mongod",
        "//src/mongo/db/stats:api_version_metrics",
        "//src/mongo/db/stats:counters",
        "//src/mongo/db/stats:read_preference_metrics",
        "//src/mongo/db/stats:server_read_concern_write_concern_metrics",
        "//src/mongo/db/stats:top",
        "//src/mongo/db/storage:storage_engine_common",
        "//src/mongo/db/storage:storage_engine_lock_file",
        "//src/mongo/db/storage:storage_engine_metadata",
        "//src/mongo/db/storage:storage_options",
        "//src/mongo/db/transaction",
        "//src/mongo/s:query_analysis_sampler",
        "//src/mongo/s:sharding_router_api",
        "//src/mongo/s:startup_initialization",
        "//src/mongo/transport:service_executor",
    ],
)

mongo_cc_library(
    name = "windows_options",
    srcs = [
        "windows_options_gen",
    ],
    target_compatible_with = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        "//src/mongo/util/options_parser",
    ],
)

mongo_cc_library(
    name = "startup_recovery",
    srcs = [
        "repair.cpp",
        "startup_recovery.cpp",
    ],
    hdrs = [
        "repair.h",
        "startup_recovery.h",
    ],
    deps = [
        "change_stream_pre_image_util",
        "change_stream_serverless_helpers",
        "dbdirectclient",
        "dbhelpers",
        "multitenancy",
        "record_id_helpers",
        "rw_concern_d",
        "server_feature_flags",
        "vector_clock",
        "//src/mongo/db/catalog:catalog_helpers",
        "//src/mongo/db/catalog:catalog_repair",
        "//src/mongo/db/catalog:collection_catalog",
        "//src/mongo/db/catalog:database_holder",
        "//src/mongo/db/catalog:document_validation",
        "//src/mongo/db/catalog:index_key_validate",
        "//src/mongo/db/catalog:local_oplog_info",
        "//src/mongo/db/validate:collection_validation",
        "//src/mongo/db/commands:mongod_fcv",
        "//src/mongo/db/concurrency:exception_util",
        "//src/mongo/db/repl:oplog",
        "//src/mongo/db/repl:repl_settings",
        "//src/mongo/db/storage:storage_options",
        "//src/mongo/db/storage:storage_repair_observer",
        "//src/mongo/db/index_builds:index_builds_coordinator",
        "//src/mongo/db/index_builds:multi_index_block",
        # "//src/mongo/db/index_builds:rebuild_indexes",
        "//src/mongo/db/timeseries:timeseries_extended_range",
    ],
)

mongo_cc_library(
    name = "mongod_initializers",
    srcs = [
        # NOTE: If you add an additional source file here, please delete
        # the file db/mongod_initializers.cpp.
        "mongod_initializers.cpp",
    ],
    deps = [
        # NOTE: If you need to add a static or mongo initializer to mongod startup,
        # please add that library here, as a private library dependency.
        "//src/mongo/executor:async_rpc_error_info",
        "//src/mongo/executor:network_interface_factory",
        "//src/mongo/rpc",
        "//src/mongo/s/commands:cluster_commands",
        "//src/mongo/s/commands:sharded_cluster_commands",
        "//src/mongo/s/commands:sharded_cluster_sharding_commands",
        "//src/mongo/scripting:scripting_server",
        "//src/mongo/transport:message_compressor_options_server",
        "//src/mongo/transport:session_manager",
        "//src/mongo/transport:transport_layer_manager",
        "//src/mongo/util:assert_util_params",
        "//src/mongo/util:clock_sources",
        "//src/mongo/util:elapsed_tracker",
        "//src/mongo/util/net:network",
        "//src/mongo/util:ntservice",
        "//src/mongo/util/options_parser:options_parser_init",
        "//src/mongo/util:periodic_runner_factory",
        "//src/mongo/util:pin_code_segments",
        "//src/mongo/util:testing_options",
        "//src/mongo/util:version_impl",
        "//src/mongo/watchdog:watchdog_mongod",
        "//src/third_party/snappy",
        "//src/mongo/db/admission:flow_control",
        "//src/mongo/db/admission:flow_control_parameters",
        "//src/mongo/db/admission:queues_server_status_section",
        "//src/mongo/db/auth:auth_op_observer",
        "//src/mongo/db/auth:authserver",
        "//src/mongo/db/catalog:catalog_impl",
        "//src/mongo/db/catalog:collection_options",
        "//src/mongo/db/catalog:document_validation",
        "//src/mongo/db/catalog:health_log_interface",
        "//src/mongo/db/catalog:index_key_validate",
        "collection_index_usage_tracker",
        "//src/mongo/db/commands:mongod",
        "//src/mongo/db/commands:mongod_fcv",
        "//src/mongo/db/commands:server_status_servers",
        "common",
        "//src/mongo/db/concurrency:flow_control_ticketholder",
        "curop_metrics",
        "dbdirectclient",
        "dbhelpers",
        "default_max_time_ms_cluster_parameter",
        "//src/mongo/db/exec:working_set",
        "feature_compatibility_version_metrics",
        "//src/mongo/db/ftdc:ftdc_mongod",
        "//src/mongo/db/fts:ftsmongod",
        "//src/mongo/db/index:index_access_method",
        "incremental_rollout_metrics",
        "//src/mongo/db/index_builds:index_builds_coordinator_mongod",
        "keys_collection_client_direct",
        "logical_time_metadata_hook",
        "//src/mongo/db/matcher:expressions_mongod_only",
        "mirror_maestro",
        "mongod_options",
        "mongod_options_init",
        "periodic_runner_cache_pressure_rollback",
        "periodic_runner_job_abort_expired_transactions",
        "//src/mongo/db/pipeline:aggregation",
        "//src/mongo/db/pipeline/process_interface:mongod_process_interface_factory",
        "profile_collection",
        "//src/mongo/bson/dotted_path:dotted_path_support",
        "query_exec",
        "read_concern_d_impl",
        "read_write_concern_defaults",
        "//src/mongo/db/repl:oplog_application",
        "//src/mongo/db/repl:oplog_buffer_blocking_queue",
        "//src/mongo/db/repl:oplog_buffer_collection",
        "//src/mongo/db/repl:oplog_buffer_proxy",
        "//src/mongo/db/repl:repl_coordinator_impl",
        "//src/mongo/db/repl:repl_set_commands",
        "//src/mongo/db/repl:repl_settings",
        "//src/mongo/db/repl:replica_set_aware_service",
        "//src/mongo/db/repl:serveronly_repl",
        "//src/mongo/db/repl:storage_interface_impl",
        "//src/mongo/db/repl:topology_coordinator",
        "rw_concern_d",
        "//src/mongo/db/session:kill_sessions_local",
        "//src/mongo/db/session:service_liaison_mongod",
        "//src/mongo/db/session:sessions_collection_rs",
        "shard_role",
        "startup_warnings_mongod",
        "//src/mongo/db/stats:change_collection_server_status",
        "//src/mongo/db/stats:counters",
        "//src/mongo/db/stats:latency_server_stats",
        "//src/mongo/db/stats:serveronly_stats",
        "//src/mongo/db/stats:top",
        "//src/mongo/db/storage:backup_cursor_hooks",
        "//src/mongo/db/storage/devnull:storage_devnull",
        "//src/mongo/db/storage:encryption_hooks",
        "//src/mongo/db/storage:storage_control",
        "//src/mongo/db/storage:storage_engine_lock_file",
        "//src/mongo/db/storage:storage_engine_metadata",
        "//src/mongo/db/storage:storage_init_d",
        "//src/mongo/db/storage:storage_options",
        "system_index",
        "//src/mongo/db/timeseries:bucket_compression_failure",
        "traffic_recorder",
        "//src/mongo/db/ttl:ttl_collection_cache",
        "//src/mongo/db/ttl:ttl_d",
        "//src/mongo/db/update:update_driver",
        "//src/mongo/otel/metrics:otel_metrics",
        "update_index_data",
    ] + select({
        "//bazel/config:use_tracing_profiler_enabled": [
            "//src/mongo/util/tracing_profiler",
        ],
        "//conditions:default": [],
    }) + select({
        "@platforms//os:windows": ["windows_options"],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:use_wiredtiger_enabled": ["//src/mongo/db/storage/wiredtiger:storage_wiredtiger"],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:build_grpc_enabled": ["//src/mongo/transport/grpc:grpc_transport_server_options"],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:tcmalloc_google_enabled": ["//src/mongo/util:tcmalloc_set_parameter"],
        "//bazel/config:tcmalloc_gperf_enabled": ["//src/mongo/util:tcmalloc_set_parameter"],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_audit_enabled": [
            "//src/mongo/db/modules/enterprise/src/audit:audit_configuration",
            "//src/mongo/db/modules/enterprise/src/audit:audit_mongod",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_encryptdb_enabled": [
            "//src/mongo/db/modules/enterprise/src/encryptdb:encryption_key_manager_aux",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_fcbis_enabled": [
            "//src/mongo/db/modules/enterprise/src/fcbis:file_copy_based_initial_syncer",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_fips_enabled": [
            "//src/mongo/db/modules/enterprise/src/fips:fips_mode_server",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_hot_backups_enabled": [
            "//src/mongo/db/modules/enterprise/src/hot_backups",
            "//src/mongo/db/modules/enterprise/src/hot_backups:backup_docs_needed_bounds",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_inmemory_enabled": [
            "//src/mongo/db/modules/enterprise/src/inmemory:storage_inmemory",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_ldap_enabled": [
            "//src/mongo/db/modules/enterprise/src/ldap:ldap_manager_init",
            "//src/mongo/db/modules/enterprise/src/ldap:ldap_options_mongod",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_magic_restore_enabled": [
            "//src/mongo/db/modules/enterprise/src/magic_restore",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_queryable_and_wiredtiger_enabled": [
            "//src/mongo/db/modules/enterprise/src/queryable/queryable_wt",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_sasl_enabled": [
            "//src/mongo/db/modules/enterprise/src/sasl:auth_delay",
            "//src/mongo/db/modules/enterprise/src/sasl:authz_manager_factory_enterprise",
            "//src/mongo/db/modules/enterprise/src/sasl:mongosaslservercommon",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_streams_and_streams_build_enabled": [
            "//src/mongo/db/modules/enterprise/src/streams/commands:streams_commands",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:enterprise_feature_audit_or_encryptdb_enabled": [
            "//src/mongo/db/modules/enterprise/src/kmip:kmip_configuration",
        ],
        "//conditions:default": [],
    }),
)

mongo_cc_library(
    name = "mongod_main",
    srcs = [
        "logical_session_cache_factory_mongod.cpp",
        "mongod_main.cpp",
        "read_write_concern_defaults_cache_lookup_mongod.cpp",
        "//src/mongo/s:read_write_concern_defaults_cache_lookup_mongos.cpp",
    ],
    hdrs = [
        "logical_session_cache_factory_mongod.h",
        "mongod_main.h",
        "read_write_concern_defaults_cache_lookup_mongod.h",
        "session_manager_mongod.h",
        "//src/mongo/s:read_write_concern_defaults_cache_lookup_mongos.h",
    ],
    deps = [
        # NOTE: Do not add new libdeps (public or private) here unless required by the linker to
        # satisfy symbol dependencies from the files listed above in `sources`. If you need to add a
        # library to inject a static or mongo initializer to mongod, please add that library as a
        # private libdep of mongod_initializers.
        "//src/mongo/client:clientdriver_minimal",
        "//src/mongo/db/auth:user_cache_invalidator",
        "//src/mongo/db/query/search:search_task_executors",
        "//src/mongo/idl:cluster_server_parameter",
        "//src/mongo/idl:cluster_server_parameter_initializer",
        "//src/mongo/idl:cluster_server_parameter_op_observer",
        "//src/mongo/s/catalog:sharding_catalog_client_impl",
        "//src/mongo/s:resource_yielders",
        "//src/mongo/s:sessions_collection_sharded",
        "//src/mongo/s:sharding_initialization",
        "//src/mongo/s:startup_initialization",
        "//src/mongo/scripting",
        "//src/mongo/transport:ingress_handshake_metrics",
        "//src/mongo/transport:service_executor",
        "//src/mongo/transport:session_manager",
        "//src/mongo/transport:transport_layer_manager",
        "//src/mongo/util:allocator_thread",
        "//src/mongo/util:buildinfo",
        "//src/mongo/util/cmdline_utils",
        "//src/mongo/util/concurrency:thread_pool",
        "//src/mongo/util/net:http_client_impl",
        "//src/mongo/util/net:ssl_manager",
        "//src/mongo/util:periodic_runner_factory",
        "//src/mongo/util:signal_handlers",
        "//src/mongo/watchdog:watchdog_mongod",
        "//src/mongo/db/admission:execution_control",
        "//src/mongo/db/admission:flow_control",
        "//src/mongo/db/admission:flow_control_parameters",
        "//src/mongo/db/auth:auth_op_observer",
        "//src/mongo/db/catalog:catalog_helpers",
        "//src/mongo/db/catalog:catalog_impl",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/catalog:health_log",
        "//src/mongo/db/catalog:health_log_interface",
        "change_collection_expired_change_remover",
        "change_stream_change_collection_manager",
        "change_stream_options_manager",
        "change_streams_cluster_parameter",
        "//src/mongo/db/commands:mongod",
        "//src/mongo/db/commands:mongod_fsync",
        "//src/mongo/db/commands:profile_common",
        "//src/mongo/db/commands:test_commands",
        "//src/mongo/db/concurrency:flow_control_ticketholder",
        "//src/mongo/db/extension/host:extension_loader",
        "fle_crud_mongod",
        "//src/mongo/db/ftdc:ftdc_mongod",
        "//src/mongo/db/index:index_access_method",
        "//src/mongo/db/index_builds:index_builds_coordinator_mongod",
        "keys_collection_client_direct",
        "log_process_details",
        "mirror_maestro",
        "mongod_initializers",
        "mongod_options",
        "//src/mongo/db/op_observer:change_stream_pre_images_op_observer",
        "//src/mongo/db/op_observer:fallback_op_observer",
        "//src/mongo/db/op_observer:fcv_op_observer",
        "//src/mongo/db/op_observer:find_and_modify_images_op_observer",
        "//src/mongo/db/op_observer",
        "//src/mongo/db/op_observer:op_observer_impl",
        "//src/mongo/db/op_observer:operation_logger_impl",
        "//src/mongo/db/op_observer:operation_logger_transaction_proxy",
        "//src/mongo/db/op_observer:user_write_block_mode_op_observer",
        "periodic_runner_job_abort_expired_transactions",
        "//src/mongo/db/pipeline:change_stream_expired_pre_image_remover",
        "//src/mongo/db/pipeline/process_interface:mongod_process_interface_factory",
        "//src/mongo/db/query/query_settings:query_settings_service",
        "//src/mongo/db/query/compiler/stats",
        "//src/mongo/db/repl/initial_sync:initial_syncer",
        "//src/mongo/db/repl:repl_coordinator_impl",
        "//src/mongo/db/repl:replication_recovery",
        "//src/mongo/db/repl:serveronly_repl",
        "//src/mongo/db/repl:storage_interface_impl",
        "//src/mongo/db/repl:topology_coordinator",
        "//src/mongo/db/repl:wait_for_majority_service",
        "//src/mongo/db/s:query_analysis_writer",
        "//src/mongo/db/s:sessions_collection_config_server",
        "//src/mongo/db/s:sharding_commands_d",
        "serverinit",
        "service_context_d",
        "//src/mongo/db/session:kill_sessions_local",
        "//src/mongo/db/session:kill_sessions_remote",
        "//src/mongo/db/session:service_liaison_mongod",
        "//src/mongo/db/session:session_catalog_mongod",
        "//src/mongo/db/session:sessions_collection_rs",
        "set_change_stream_state_coordinator",
        "shard_role",
        "startup_recovery",
        "startup_warnings_mongod",
        "//src/mongo/db/storage:backup_cursor_hooks",
        "//src/mongo/db/storage:disk_space_monitor",
        "//src/mongo/db/storage:oplog_truncation",
        "//src/mongo/db/storage:storage_control",
        "system_index",
        "//src/mongo/db/timeseries:timeseries_op_observer",
        "//src/mongo/db/ttl:ttl_d",
        "vector_clock",
        "server_lifecycle_monitor",
        ":local_executor",
    ] + select({
        "//bazel/config:enterprise_feature_audit_enabled": [
            "//src/mongo/db/modules/enterprise/src/audit:audit_enterprise",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:use_tracing_profiler_enabled": [
            "//src/mongo/util/tracing_profiler",
        ],
        "//conditions:default": [],
    }),
)

mongo_cc_library(
    name = "server_lifecycle_monitor",
    srcs = [
        "server_lifecycle_monitor.cpp",
    ],
    hdrs = [
        "server_lifecycle_monitor.h",
    ],
    deps = [
        "//src/mongo:base",
    ],
)

mongo_cc_binary(
    name = "mongotrafficreader",
    srcs = [
        "traffic_reader_main.cpp",
    ],
    linkopts = select({
        "@platforms//os:linux": [
            "-ldl",
            "-lrt",
            "-latomic",
        ],
        "@platforms//os:windows": [
            "-latomic",
        ],
        "//conditions:default": [],
    }),
    tags = [
        "devcore",
        "dist_test",
    ],
    deps = [
        ":traffic_reader",
        "//src/mongo:base",
        "//src/mongo/db/concurrency:lock_manager",
        "//src/mongo/rpc:message",
        "//src/mongo/util:signal_handlers",
    ],
)

mongo_cc_binary(
    name = "mongod",
    srcs = [
        "mongod.cpp",
    ],
    cxxopts = select({
        "//bazel/config:pgo_profile_generate_clang_enabled": [
            "-fprofile-generate=mongod_perf",
            "-fno-data-sections",
        ],
        "//bazel/config:pgo_profile_generate_gcc_enabled": [
            "-fprofile-generate=mongod_perf",
            "-fno-data-sections",
            "-fprofile-dir=mongod_perf",
        ],
        "//conditions:default": [],
    }),
    features = select({
        # We want to pass our custom -fprofile-generate so we can specify the output directory of files
        "//bazel/config:pgo_profile_generate_enabled": ["-pgo_profile_generate"],
        "//conditions:default": [],
    }),
    linkopts = select({
        "@platforms//os:linux": [
            "-ldl",
            "-lrt",
            "-latomic",
        ],
        "@platforms//os:windows": [
            "-latomic",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:pgo_profile_generate_clang_enabled": [
            "-fprofile-generate=mongod_perf",
            "-fno-data-sections",
        ],
        "//bazel/config:pgo_profile_generate_gcc_enabled": [
            "-fprofile-generate=mongod_perf",
            "-fno-data-sections",
            "-fprofile-dir=mongod_perf",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:bolt_profile_generate_enabled": ["-Wl,--emit-relocs"],
        "//bazel/config:bolt_profile_use_enabled": ["-Wl,--emit-relocs"],
        "//conditions:default": [],
    }),
    tags = [
        "devcore",
        "dist_test",
    ],
    #+ env.WindowsResourceFile("mongod.rc"),
    deps = [
        # NOTE: Do not add new deps here unless required by the linker to
        # satisfy symbol dependencies from the files listed above in `sources`. If you need to add a
        # library to inject a static or mongo initializer to mongod, please add that library as a
        # dep of mongod_initializers.
        "mongod_main",
        "server_base",
    ],
)

mongo_cc_library(
    name = "service_context_d_test_fixture",
    srcs = [
        "service_context_d_test_fixture.cpp",
        "//src/mongo/db/s:database_sharding_state_factory_mock.cpp",
        "//src/mongo/db/s:database_sharding_state_mock.cpp",
    ],
    hdrs = [
        "service_context_d_test_fixture.h",
        "//src/mongo/db/s:database_sharding_state_factory_mock.h",
        "//src/mongo/db/s:database_sharding_state_mock.h",
    ],
    deps = [
        ":service_context_d",
        ":service_context_test_fixture",
        "//src/mongo/db/catalog:catalog_impl",
        "//src/mongo/db/commands:mongod",
        "//src/mongo/db/index_builds:index_builds_coordinator_mongod",
        "//src/mongo/db/op_observer",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/db/s:sharding_runtime_d",
        "//src/mongo/db/storage:storage_control",
        "//src/mongo/db/storage:storage_options",
        "//src/mongo/db/storage/devnull:storage_devnull",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/util:clock_source_mock",
        "//src/mongo/util:periodic_runner_factory",
        "//src/mongo/util:tick_source_mock",
    ],
)

mongo_cc_library(
    name = "vector_clock_trivial",
    srcs = [
        "vector_clock_trivial.cpp",
    ],
    deps = [
        "vector_clock_mutable",
    ],
)

mongo_cc_unit_test(
    name = "client_out_of_line_executor_test",
    srcs = [
        "client_out_of_line_executor_test.cpp",
    ],
    tags = [
        "mongo_unittest_seventh_group",
        "server-programmability",
    ],
    deps = [
        ":client_out_of_line_executor",
        "//src/mongo/db/concurrency:lock_manager",
        "//src/mongo/transport:transport_layer_common",
    ],
)

mongo_cc_unit_test(
    name = "local_executor_test",
    srcs = [
        "local_executor_test.cpp",
    ],
    tags = [
        "mongo_unittest_second_group",
        "server-programmability",
    ],
    deps = [
        ":local_executor",
        ":service_context_test_fixture",
    ],
)

mongo_cc_unit_test(
    name = "server_base_test",
    srcs = [
        "//src/mongo/util:database_name_util_test.cpp",
        "//src/mongo/util:namespace_string_util_test.cpp",
    ],
    tags = ["mongo_unittest_sixth_group"],
    deps = [
        "//src/mongo/db:server_base",
        "//src/mongo/idl:server_parameter_test_util",
    ],
)

mongo_cc_unit_test(
    name = "server_lifecycle_monitor_test",
    srcs = [
        "server_lifecycle_monitor_test.cpp",
    ],
    tags = ["mongo_unittest_seventh_group"],
    deps = [
        ":server_lifecycle_monitor",
    ],
)

mongo_cc_unit_test(
    name = "profile_settings_test",
    srcs = [
        "profile_settings_test.cpp",
    ],
    tags = ["mongo_unittest_eighth_group"],
    deps = [
        "profile_settings",
    ],
)

mongo_cc_library(
    name = "read_write_concern_defaults_mock",
    srcs = [
        "read_write_concern_defaults_cache_lookup_mock.cpp",
        "read_write_concern_defaults_cache_lookup_mock.h",
    ],
    deps = [
        ":read_write_concern_defaults",
    ],
)

mongo_cc_unit_test(
    name = "service_entry_point_shard_role_test",
    srcs = [
        "service_entry_point_shard_role_test.cpp",
    ],
    tags = [
        "mongo_unittest_third_group",
        "server-programmability",
    ],
    deps = [
        ":service_context_d",
        "//src/mongo/transport:service_entry_point_test_fixture",
    ],
)

mongo_cc_unit_test(
    name = "change_stream_pre_images_manager_test",
    srcs = [
        "change_stream_pre_images_remover_test.cpp",
        "change_stream_pre_images_tenant_truncate_markers_test.cpp",
        "change_stream_pre_images_truncate_manager_test.cpp",
        "change_stream_pre_images_truncate_markers_per_nsUUID_test.cpp",
    ],
    tags = ["mongo_unittest_eighth_group"],
    deps = [
        ":change_stream_options",
        ":change_stream_options_manager",
        ":change_stream_pre_image_test_helpers",
        ":change_stream_pre_image_util",
        ":change_stream_pre_images_collection_manager",
        ":change_stream_serverless_helpers",
        ":change_streams_cluster_parameter",
        ":shard_role",
        "//src/mongo/db/catalog:catalog_test_fixture",
        "//src/mongo/db/catalog:collection_catalog",
        "//src/mongo/db/collection_crud",
        "//src/mongo/db/op_observer",
        "//src/mongo/db/op_observer:op_observer_impl",
        "//src/mongo/db/op_observer:operation_logger_impl",
        "//src/mongo/db/pipeline:change_stream_expired_pre_image_remover",
        "//src/mongo/db/storage:record_store_base",
        "//src/mongo/idl:server_parameter_test_util",
    ],
)

mongo_cc_unit_test(
    name = "mongod_options_test",
    srcs = [
        "mongod_options_test.cpp",
    ],
    tags = [
        "mongo_unittest_sixth_group",
        "server-programmability",
    ],
    deps = [
        ":mongod_options",
        ":server_base",
        "//src/mongo/db/concurrency:lock_manager",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/util/options_parser",
    ],
)

mongo_cc_unit_test(
    name = "db_base_test",
    srcs = [
        "error_labels_test.cpp",
        "field_parser_test.cpp",
        "field_ref_set_test.cpp",
        "field_ref_test.cpp",
        "hasher_test.cpp",
        "namespace_string_test.cpp",
        "operation_id_test.cpp",
        "server_options_test.cpp",
        "shard_id_test.cpp",
        "startup_warnings_mongod_thp_test.cpp",
    ],
    tags = ["mongo_unittest_fifth_group"],
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        "commands",
        "error_labels",
        "mongohasher",
        "server_options_base",
        "server_options_servers",
        "service_context_test_fixture",
        "startup_warnings_mongod",
        "//src/mongo/db/pipeline:aggregation_request_helper",
        "//src/mongo/db/pipeline:change_stream_pipeline",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/third_party/asio-master:asio",
    ],
)

mongo_cc_unit_test(
    name = "record_id_test",
    srcs = [
        "record_id_test.cpp",
    ],
    tags = [
        "mongo_unittest_sixth_group",
        "server-storage-engine-integration",
    ],
    deps = [
        "record_id_helpers",
    ],
)

mongo_cc_unit_test(
    name = "change_collection_test",
    srcs = [
        "change_collection_expired_change_remover_test.cpp",
    ],
    tags = ["mongo_unittest_sixth_group"],
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":change_collection_expired_change_remover",
        ":change_stream_change_collection_manager",
        ":change_stream_serverless_helpers",
        ":change_streams_cluster_parameter",
        ":query_exec",
        ":record_id_helpers",
        ":server_base",
        ":shard_role",
        ":startup_recovery",
        "//src/mongo/db/catalog:catalog_test_fixture",
        "//src/mongo/db/pipeline:change_stream_expired_pre_image_remover",
        "//src/mongo/db/repl:read_concern_args",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/util:clock_source_mock",
        "//src/third_party/asio-master:asio",
    ],
)

mongo_cc_unit_test(
    name = "query_test",
    srcs = [
        "collection_index_usage_tracker_test.cpp",
        "keypattern_test.cpp",
        "multi_key_path_tracker_test.cpp",
        "update_index_data_test.cpp",
        "//src/mongo/db/pipeline:document_source_cursor_test.cpp",
    ],
    tags = ["mongo_unittest_fourth_group"],
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":query_exec",
        ":service_context",
        ":service_context_non_d",
        ":service_context_test_fixture",
        ":update_index_data",
        "//src/mongo/client:read_preference",
        "//src/mongo/db:collection_index_usage_tracker",
        "//src/mongo/db/index:index_access_method",
        "//src/mongo/db/pipeline:aggregation_context_fixture",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/util:clock_source_mock",
        "//src/third_party/asio-master:asio",
    ],
)

mongo_cc_library(
    name = "commands_test_example",
    srcs = [
        "commands_test_example.h",
        ":commands_test_example_gen",
    ],
    deps = [
        ":commands",
        ":server_base",
    ],
)

mongo_cc_unit_test(
    name = "command_test",
    srcs = [
        "bulk_write_shard_test.cpp",
        "commands_test.cpp",
        "curop_stats_test.cpp",
        "curop_test.cpp",
    ],
    tags = ["mongo_unittest_fifth_group"],
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":commands",
        ":commands_test_example",
        ":service_context_d",
        ":service_context_test_fixture",
        ":shard_role_api",
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/catalog:catalog_helpers",
        "//src/mongo/db/commands/query_cmd:bulk_write_command",
        "//src/mongo/db/commands/query_cmd:bulk_write_parser",
        "//src/mongo/db/pipeline:expression_context_for_test",
        "//src/mongo/db/query:query_test_service_context",
        "//src/mongo/db/s:shard_server_test_fixture",
        "//src/mongo/db/storage:prepare_conflict_tracker",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/transport:transport_layer_mock",
        "//src/third_party/asio-master:asio",
    ],
)

mongo_cc_unit_test(
    name = "session_test",
    srcs = [
        "service_liaison_mock.cpp",
        "service_liaison_mock.h",
        "//src/mongo/db/session:internal_session_pool_test.cpp",
        "//src/mongo/db/session:internal_transactions_reap_service_test.cpp",
        "//src/mongo/db/session:kill_sessions_local_test.cpp",
        "//src/mongo/db/session:logical_session_cache_test.cpp",
        "//src/mongo/db/session:logical_session_id_test.cpp",
        "//src/mongo/db/session:session_catalog_mongod_test.cpp",
        "//src/mongo/db/session:session_catalog_test.cpp",
        "//src/mongo/db/session:session_catalog_test.h",
        "//src/mongo/unittest:ensure_fcv.h",
    ],
    tags = ["mongo_unittest_seventh_group"],
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":dbdirectclient",
        ":service_context_d",
        ":service_context_d_test_fixture",
        ":shared_request_handling",
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/repl:image_collection_entry",
        "//src/mongo/db/repl:oplog",
        "//src/mongo/db/repl:repl_settings",
        "//src/mongo/db/repl:replica_set_aware_service",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/db/repl:storage_interface_impl",
        "//src/mongo/db/session:kill_sessions_local",
        "//src/mongo/db/session:logical_session_cache_impl",
        "//src/mongo/db/session:logical_session_id_helpers",
        "//src/mongo/db/session:session_catalog_mongod",
        "//src/mongo/db/session:sessions_collection",
        "//src/mongo/db/session:sessions_collection_mock",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/db/transaction",
        "//src/mongo/executor:async_timer_mock",
        "//src/mongo/transport:transport_layer_mock",
        "//src/mongo/util:clock_source_mock",
        "//src/mongo/util:periodic_runner_factory",
        "//src/third_party/asio-master:asio",
    ],
)

mongo_cc_unit_test(
    name = "default_baton_test",
    srcs = [
        "default_baton_test.cpp",
    ],
    tags = [
        "mongo_unittest_fourth_group",
        "server-programmability",
    ],
    deps = [
        ":service_context",
        ":service_context_test_fixture",
        "//src/mongo:base",
        "//src/mongo/db:service_context_non_d",
        "//src/mongo/util:clock_source_mock",
    ],
)

mongo_cc_unit_test(
    name = "operation_test",
    srcs = [
        "cancelable_operation_context_test.cpp",
        "client_context_test.cpp",
        "client_strand_test.cpp",
        "dbdirectclient_test.cpp",
        "dbmessage_test.cpp",
        "mirroring_sampler_test.cpp",
        "operation_context_test.cpp",
        "operation_cpu_timer_test.cpp",
        "operation_time_tracker_test.cpp",
        "persistent_task_store_test.cpp",
        "resource_yielder_test.cpp",
        "service_context_test.cpp",
        "thread_client_test.cpp",
        "version_context_decoration_test.cpp",
        "version_context_test.cpp",
        "wire_version_test.cpp",
        "//src/mongo/unittest:join_thread.h",
        "//src/mongo/util:executor_test_util.h",
    ],
    tags = [
        "mongo_unittest_fourth_group",
        "server-programmability",
    ],
    target_compatible_with = select({
        "//bazel/config:use_wiredtiger_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":commands",
        ":dbdirectclient",
        ":mirror_maestro",
        ":operation_time_tracker",
        ":rw_concern_d",
        ":service_context",
        ":service_context_d_test_fixture",
        ":service_context_test_fixture",
        ":shard_role",
        "//src/mongo/db/catalog:catalog_test_fixture",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/db/stats:counters",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/transport:transport_layer_mock",
        "//src/mongo/util/concurrency:thread_pool",
        "//src/third_party/asio-master:asio",
    ],
)

mongo_cc_library(
    name = "op_msg_fuzzer_fixture",
    srcs = [
        "op_msg_fuzzer_fixture.cpp",
    ],
    hdrs = [
        "op_msg_fuzzer_fixture.h",
        "session_manager_mongod.h",
    ],
    deps = [
        ":server_base",
        ":service_context_d",
        "//src/mongo/db/auth",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/catalog:catalog_impl",
        "//src/mongo/db/catalog:database_holder",
        "//src/mongo/db/op_observer",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/db/s:sharding_runtime_d",
        "//src/mongo/db/stats:top",
        "//src/mongo/db/storage:storage_control",
        "//src/mongo/db/storage:storage_options",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/rpc",
        "//src/mongo/s:startup_initialization",
        "//src/mongo/transport:session_manager",
        "//src/mongo/transport:transport_layer_mock",
        "//src/mongo/unittest",
        "//src/mongo/util:periodic_runner_factory",
    ],
)

mongo_cc_unit_test(
    name = "read_write_concern_test",
    srcs = [
        "read_concern_test.cpp",
        "read_write_concern_provenance_test.cpp",
        "write_concern_options_test.cpp",
        "write_concern_test.cpp",
    ],
    tags = ["mongo_unittest_fifth_group"],
    deps = [
        ":rw_concern_d",
        ":service_context_test_fixture",
        "//src/mongo/db/repl:repl_coordinator_impl",
        "//src/mongo/db/repl:repl_coordinator_test_fixture",
        "//src/mongo/db/repl:repl_settings",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/transport:service_entry_point_test_fixture",
    ],
)

# These unit tests rely on the config_server_test_fixture, which
# globally alters the state of the system to be in config server
# mode. The other tests are not compatible with that setting.
mongo_cc_unit_test(
    name = "db_unittest_with_config_server_test_fixture_test",
    srcs = [
        "key_generator_update_test.cpp",
        "keys_collection_cache_test.cpp",
        "keys_collection_manager_sharding_test.cpp",
        "logical_time_validator_test.cpp",
    ],
    tags = ["mongo_unittest_second_group"],
    deps = [
        ":keys_collection_client_direct",
        ":vector_clock",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/s:config_server_test_fixture",
    ],
)

# TODO(SERVER-45266) This could be part of db_unittest_test but it needs to mutate
# storageGlobalParams.
mongo_cc_unit_test(
    name = "op_msg_fuzzer_fixture_test",
    srcs = [
        "op_msg_fuzzer_fixture_test.cpp",
    ],
    tags = ["mongo_unittest_fifth_group"],
    deps = [
        ":op_msg_fuzzer_fixture",
        ":server_base",
        "//src/mongo/rpc",
    ],
)

mongo_cc_benchmark(
    name = "namespace_string_bm",
    srcs = [
        "namespace_string_bm.cpp",
        "//src/mongo/util/immutable:map.h",
        "//src/mongo/util/immutable:unordered_map.h",
        "//src/mongo/util/immutable/details:map.h",
        "//src/mongo/util/immutable/details:memory_policy.h",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_benchmark(
    name = "operation_cpu_timer_bm",
    srcs = [
        "operation_cpu_timer_bm.cpp",
    ],
    deps = [
        ":service_context_non_d",
        ":shard_role_api",
    ],
)

mongo_cc_benchmark(
    name = "profile_filter_bm",
    srcs = [
        "profile_filter_bm.cpp",
    ],
    tags = ["query_bm"],
    deps = [
        ":profile_settings",
        "//src/mongo/db/commands:profile_common",
        "//src/mongo/util:processinfo",
    ],
)

mongo_cc_unit_test(
    name = "profile_filter_test",
    srcs = [
        "profile_filter_test.cpp",
    ],
    tags = ["mongo_unittest_sixth_group"],
    deps = [
        ":service_context_test_fixture",
        "//src/mongo/db/commands:profile_common",
    ],
)

mongo_cc_unit_test(
    name = "replica_set_endpoint_test",
    srcs = [
        "direct_shard_client_tracker_test.cpp",
        "replica_set_endpoint_sharding_state_test.cpp",
        "replica_set_endpoint_test_fixture.cpp",
        "replica_set_endpoint_test_fixture.h",
        "replica_set_endpoint_util_test.cpp",
    ],
    tags = ["mongo_unittest_first_group"],
    deps = [
        ":commands",
        ":commands_test_example",
        ":service_context_d_test_fixture",
        ":shard_role_api",
        "//src/mongo/db/auth:authmocks",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/db/s:sharding_catalog_manager",
        "//src/mongo/idl:server_parameter_test_util",
        "//src/mongo/rpc:message",
        "//src/mongo/transport:transport_layer_mock",
    ],
)

mongo_cc_integration_test(
    name = "db_integration_test",
    srcs = [
        "nesting_depth_test.cpp",
        "//src/mongo/db/query/client_cursor:exhaust_cursor_currentop_integration_test.cpp",
    ],
    deps = [
        "//src/mongo/client:clientdriver_network",
        "//src/mongo/executor:network_interface_fixture",
        "//src/mongo/rpc:message",
        "//src/mongo/transport:transport_layer_egress_init",
        "//src/mongo/util:version_impl",
    ],
)

mongo_cc_benchmark(
    name = "commands_bm",
    srcs = [
        "commands_bm.cpp",
    ],
    tags = [
        "first_half_bm",
    ],
    deps = [
        ":server_base",
    ],
)

mongo_cc_benchmark(
    name = "d_concurrency_bm",
    srcs = [
        "d_concurrency_bm.cpp",
    ],
    deps = [
        ":service_context_non_d",
        ":shard_role_api_stor_ex",
    ],
)

mongo_cc_benchmark(
    name = "service_entry_point_shard_role_bm",
    srcs = [
        "service_entry_point_bm_fixture.h",
        "service_entry_point_shard_role_bm.cpp",
    ],
    tags = ["sep_bm"],
    deps = [
        ":dbdirectclient",
        ":mongod_options_init",
        ":read_write_concern_defaults_mock",
        ":server_base",
        ":service_context_d",
        ":vector_clock_mongod",
        "//src/mongo/db/auth:authserver",
        "//src/mongo/db/catalog:catalog_impl",
        "//src/mongo/db/commands:standalone",
        "//src/mongo/db/index_builds:index_builds_coordinator_mongod",
        "//src/mongo/db/op_observer",
        "//src/mongo/db/repl:replmocks",
        "//src/mongo/db/repl:storage_interface_impl",
        "//src/mongo/db/s:sharding_runtime_d",
        "//src/mongo/db/storage:storage_control",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/unittest:benchmark_util",
        "//src/mongo/util:periodic_runner_factory",
    ],
)

mongo_cc_benchmark(
    name = "find_one_bm",
    srcs = [
        "find_one_bm.cpp",
        "service_entry_point_bm_fixture.h",
    ],
    tags = ["sep_bm"],
    deps = [
        ":mongod_options_init",
        ":read_write_concern_defaults_mock",
        ":server_base",
        ":service_context_d",
        ":shard_role_api",
        ":vector_clock_mongod",
        "//src/mongo/db/auth:authserver",
        "//src/mongo/db/catalog:catalog_impl",
        "//src/mongo/db/catalog:database_holder",
        "//src/mongo/db/commands:standalone",
        "//src/mongo/db/index_builds:index_builds_coordinator_mongod",
        "//src/mongo/db/op_observer",
        "//src/mongo/db/repl:repl_coordinator_impl",
        "//src/mongo/db/repl:serveronly_repl",
        "//src/mongo/db/repl:storage_interface_impl",
        "//src/mongo/db/s:sharding_runtime_d",
        "//src/mongo/db/storage:storage_control",
        "//src/mongo/db/storage/wiredtiger:storage_wiredtiger",
        "//src/mongo/executor:network_interface_mock",
        "//src/mongo/unittest:benchmark_util",
        "//src/mongo/util:periodic_runner_factory",
    ],
)

mongo_cc_benchmark(
    name = "collection_acquisition_bm",
    srcs = [
        "collection_acquisition_bm.cpp",
        "//src/mongo/unittest:join_thread.h",
    ],
    deps = [
        ":service_context_d_test_fixture",
        ":shard_role",
        ":shard_role_api",
        "//src/mongo/db/repl:replmocks",
    ],
)

mongo_cc_library(
    name = "cluster_role",
    srcs = ["cluster_role.cpp"],
    hdrs = ["cluster_role.h"],
    deps = ["//src/mongo:base"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:baton.h to //src/mongo/db:service_context
filegroup(
    name = "baton_hdrs",
    srcs = [":baton.h"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:database_name.h to //src/mongo/db:common
filegroup(
    name = "database_name_hdrs",
    srcs = [":database_name.h"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:logical_time.h to //src/mongo/db:server_base
filegroup(
    name = "logical_time_hdrs",
    srcs = [":logical_time.h"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:namespace_string.h to //src/mongo/db:server_base
filegroup(
    name = "namespace_string_hdrs",
    srcs = [":namespace_string.h"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:operation_context.h to //src/mongo/db:service_context
filegroup(
    name = "operation_context_hdrs",
    srcs = [":operation_context.h"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:operation_id.h to //src/mongo/db:service_context
filegroup(
    name = "operation_id_hdrs",
    srcs = [":operation_id.h"],
)

# TODO(SERVER-96856): Remove cycle created by moving //src/mongo/db:read_write_concern_provenance.h to //src/mongo/db:server_base
filegroup(
    name = "read_write_concern_provenance_hdrs",
    srcs = [":read_write_concern_provenance.h"],
)

# TODO(SERVER-96857): Remove cycle created by moving //src/mongo/db:record_id_helpers.h to //src/mongo/db:record_id_helpers
filegroup(
    name = "record_id_helpers_hdrs",
    srcs = [":record_id_helpers.h"],
)

# TODO(SERVER-96858): Remove cycle created by moving //src/mongo/db:server_options.h to //src/mongo/db:server_base
filegroup(
    name = "server_options_hdrs",
    srcs = [":server_options.h"],
)

# TODO(SERVER-96858): Remove cycle created by moving //src/mongo/db:server_parameter.h to //src/mongo/db:server_base
filegroup(
    name = "server_parameter_hdrs",
    srcs = [":server_parameter.h"],
)

# TODO(SERVER-96858): Remove cycle created by moving //src/mongo/db:server_parameter_with_storage.h to //src/mongo/db:server_base
filegroup(
    name = "server_parameter_with_storage_hdrs",
    srcs = [":server_parameter_with_storage.h"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:service_context.h to //src/mongo/db:service_context
filegroup(
    name = "service_context_hdrs",
    srcs = [":service_context.h"],
)

# TODO(SERVER-96853): Remove cycle created by moving //src/mongo/db:tenant_id.h to //src/mongo/db:server_base
filegroup(
    name = "tenant_id_hdrs",
    srcs = [":tenant_id.h"],
)

# TODO(SERVER-96856): Remove cycle created by moving //src/mongo/db:write_concern_idl.h to //src/mongo/db:server_base
filegroup(
    name = "write_concern_idl_hdrs",
    srcs = [":write_concern_idl.h"],
)

# TODO(SERVER-96856): Remove cycle created by moving //src/mongo/db:write_concern_options.h to //src/mongo/db:server_base
filegroup(
    name = "write_concern_options_hdrs",
    srcs = [":write_concern_options.h"],
)

mongo_cc_fuzzer_test(
    name = "op_msg_fuzzer",
    srcs = [
        "op_msg_fuzzer.cpp",
    ],
    deps = [
        "op_msg_fuzzer_fixture",
        "server_base",
    ],
)
