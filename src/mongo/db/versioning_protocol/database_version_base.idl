# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/db/basic_types.idl"

structs:
    DatabaseVersionBase:
        description:
            "A (UUID, Timestamp, int) object that uniquely identifies an incarnation of a database
            in a cluster and reflects changes to the database's primary shard"
        # The generated comparison operators will do a field-wise lexicographic comparison, which
        # doesn't work because it's nonsensical to lexicographically compare UUIDs.
        generate_comparison_operators: false
        strict: false
        fields:
            uuid:
                type: uuid
                description:
                    "a unique identifier to distinguish different incarnations of this database.
                    It is optional for parsing purposes and it will be removed in 5.2."
                optional: true
            timestamp:
                type: timestamp
                description:
                    "Unique identifier to distinguish major events in the lifetime of a
                    database, such as create/drop and change of primary."
            lastMod:
                type: int
                description: "an integer which is bumped whenever the database's primary shard changes"
            placementConflictTime:
                type: logicalTime
                optional: true
                description:
                    "This optional value represents a conservative upper bound for placement
                    changes (i.e., movePrimary or drop+recreate) for any collection which might
                    be accessed for the lifetime of the transaction. If specified, transactions
                    will fail with a retryable MigrationConflict error if any placement changes
                    have committed since this time.
                    A value of Timestamp(0, 0) means that the shard should avoid checking
                    placement conflicts timestamps for the database."
