# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# This file defines the format of documents stored in the `config.collectionCriticalSections`
# collection. Each document is used to represent that a database or a collection is under an
# operation that entered the critical section.

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/db/basic_types.idl"

structs:
    collectionCriticalSectionDocument:
        description:
            "Represents that a database or a collection is under an operation that entered
            the critical section."
        generate_comparison_operators: false
        strict: false
        fields:
            _id:
                type: namespacestring
                description:
                    "The name of the database or the namespace of the collection that is
                    under the critical section."
                cpp_name: nss
            reason:
                type: object
                description:
                    "An identifier of the operation that entered the critical section.
                    Only used for diagnostic purposes."
            blockReads:
                type: bool
                description:
                    "It states whether this critical section should block reads (CS in
                    commit phase) or not (CS in catch up phase)."
            clearDbInfo:
                type: safeBool
                description: >-
                    If true, and this collection critical section is acting on a database level, the
                    filtering database metadata will be cleared, forcing a refresh the next time
                    this metadata is needed. When the shard is database authoritative, it is no
                    longer necessary to clear the filtering metadata. This information is only
                    expected to be consumed by secondary nodes upon receiving an `onDelete()`
                    notification from `ShardServerOpObserver`.
                default: true
