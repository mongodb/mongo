# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/transaction/transaction_participant.h"

server_parameters:
    maxTransactionLockRequestTimeoutMillis:
        description: >-
            Max number of milliseconds that any transaction lock request
            will wait for lock acquisition. If an operation provides a greater timeout in a lock request,
            maxTransactionLockRequestTimeoutMillis will override it. If this is set to a negative value, it
            is inactive and nothing will be overridden.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gMaxTransactionLockRequestTimeoutMillis
        # 5 milliseconds will help avoid deadlocks, but will still allow fast-running metadata operations
        # to run without aborting transactions.
        default: 5
        redact: false

    transactionLifetimeLimitSeconds:
        description: >-
            Lifetime given to each transaction.
            Transactions must eventually expire to preempt storage cache pressure immobilizing the system.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<decltype(TransactionParticipant::observeTransactionLifetimeLimitSeconds)::Argument>
        cpp_varname: gTransactionLifetimeLimitSeconds
        validator:
            gte: 1
        on_update: std::ref(TransactionParticipant::observeTransactionLifetimeLimitSeconds)
        default: 60
        redact: false

    cachePressureQueryPeriodMilliseconds:
        description: >-
            Period in which to run aborts on oldest transactions under cache pressure.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<decltype(TransactionParticipant::observeCachePressureQueryPeriodMilliseconds)::Argument>
        cpp_varname: gCachePressureQueryPeriodMilliseconds
        validator:
            gte: 0
        on_update: std::ref(TransactionParticipant::observeCachePressureQueryPeriodMilliseconds)
        default: 1000
        redact: false

    maxNumberOfTransactionOperationsInSingleOplogEntry:
        description: >-
            Maximum number of operations to pack into a single oplog entry, when multi-oplog
            format for transactions is in use.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gMaxNumberOfTransactionOperationsInSingleOplogEntry
        default: 2147483647 # INT_MAX
        validator: {gte: 1}
        redact: false

    transactionSizeLimitBytes:
        description: >-
            Maximum total size of operations in a multi-document transaction.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<long long>
        cpp_varname: gTransactionSizeLimitBytes
        default:
            expr: std::numeric_limits<long long>::max()
        redact: false
