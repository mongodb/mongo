# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# Server parameters for resharding.

global:
    cpp_namespace: "mongo::resharding"
    cpp_includes:
        - "mongo/client/read_preference_validators.h"

imports:
    - "mongo/db/basic_types.idl"

server_parameters:
    reshardingCoordinatorServiceMaxThreadCount:
        description: The max number of threads in the resharding coordinator's thread pool.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gReshardingCoordinatorServiceMaxThreadCount
        default: 3
        validator:
            gte: 1
            lte: 256
        redact: false

    reshardingDonorServiceMaxThreadCount:
        description: The max number of threads in the resharding donor's thread pool.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gReshardingDonorServiceMaxThreadCount
        default: 2
        validator:
            gte: 1
            lte: 256
        redact: false

    reshardingRecipientServiceMaxThreadCount:
        description: The max number of threads in the resharding recipient's thread pool.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gReshardingRecipientServiceMaxThreadCount
        default: 8
        validator:
            gte: 1
            lte: 256
        redact: false

    reshardingCollectionClonerMaxStalenessSeconds:
        description: >-
            The maximum replication lag on a donor shard's secondary node for it to be eligible
            for being targeted by the ReshardingCollectionCloner. This is used to avoid fetching
            from a secondary that has fallen overly behind in replication and might transition to
            the "RECOVERING" state.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingCollectionClonerMaxStalenessSeconds
        default:
            expr: 5 * 60
        validator:
            callback: validateMaxStalenessSecondsExternal
            gt: 0
        redact: false

    reshardingCollectionClonerBatchSizeCount:
        description: >-
            Limit for the number of documents inserted per storage transaction (WriteUnitOfWork)
            by ReshardingCollectionCloner.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingCollectionClonerBatchSizeCount
        default:
            expr: 100
        validator:
            gt: 0
        redact: false

    reshardingCollectionClonerWriteThreadCount:
        description: >-
            Number of writer threads used by ReshardingCollectionCloner.
        set_at: runtime
        cpp_vartype: int
        cpp_varname: gReshardingCollectionClonerWriteThreadCount
        default:
            expr: 2
        validator:
            gte: 1
        redact: false

    reshardingTxnClonerProgressBatchSize:
        description: >-
            Number of config.transactions records from a donor shard to process before recording the
            lsid locally to resume from on primary failover or server restart.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingTxnClonerProgressBatchSize
        default: 1000
        validator:
            gte: 1
        redact: false

    reshardingOplogFetcherInsertBatchLimitOperations:
        description: >-
            The maximum number of operations for ReshardingOplogFetcher to insert in a single batch.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogFetcherInsertBatchLimitOperations
        default:
            expr: 5 * 1000
        validator:
            gte: 1
            lte:
                expr: 1000 * 1000
        redact: false

    reshardingOplogFetcherInsertBatchLimitBytes:
        description: >-
            The maximum size in bytes for ReshardingOplogFetcher to insert in a single batch.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogFetcherInsertBatchLimitBytes
        default:
            expr: 15 * 1024 * 1024
        validator:
            lte:
                expr: 16 * 1024 * 1024
        redact: false

    reshardingOplogFetcherSleepMillisBeforeCriticalSection:
        description: >-
            The amount of time that the ReshardingOplogFetcher should wait for before running the
            next aggregate command after it has exhausted the oplog entries returned by the previous
            one before the critical section. The default 1-second value was chosen to match the
            default awaitData timeout that would have been used if the aggregation cursor was
            TailableModeEnum::kTailableAndAwaitData.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogFetcherSleepMillisBeforeCriticalSection
        default:
            expr: 1 * 1000
        validator:
            gte: 0
        redact: false

    reshardingOplogFetcherSleepMillisDuringCriticalSection:
        description: >-
            The amount of time that the ReshardingOplogFetcher should wait for before running the
            next aggregate command after it has exhausted the oplog entries returned by the previous
            one during the critical section.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogFetcherSleepMillisDuringCriticalSection
        default:
            expr: 5
        validator:
            gte: 0
        redact: false

    reshardingOplogFetcherTargetPrimaryDuringCriticalSection:
        description: >-
            Controls whether the ReshardingOplogFetcher should start fetching oplog entries from
            the primary node instead of the "nearest" node when the critical section starts since
            a nearest node could be a lagged secondary so fetching from it could lead to critical
            section timeout.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: gReshardingOplogFetcherTargetPrimaryDuringCriticalSection
        default: true
        redact: false

    reshardingOplogBatchTaskCount:
        description: >-
            The number of subtasks to divide a single oplog batch into so that it may be applied
            concurrently by different threads.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogBatchTaskCount
        default:
            expr: (gReshardingRecipientServiceMaxThreadCount + 1) / 2
            is_constexpr: false
        validator:
            gte: 1
            lte: 256
        redact: false

    reshardingOplogBatchLimitOperations:
        description: >-
            The maximum number of operations for ReshardingOplogApplier to apply in a single batch.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogBatchLimitOperations
        default:
            expr: 5 * 1000
        validator:
            gte: 1
            lte:
                expr: 1000 * 1000
        redact: false

    reshardingOplogBatchLimitBytes:
        description: >-
            The maximum size in bytes for ReshardingOplogApplier to apply in a single batch.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogBatchLimitBytes
        default:
            expr: 100 * 1024 * 1024
        validator:
            gte:
                expr: 16 * 1024 * 1024
            lte:
                expr: 100 * 1024 * 1024
        redact: false

    reshardingOplogApplierMaxLockRequestTimeoutMillis:
        description: >-
            The max number of milliseconds that the resharding oplog applier will wait for lock
            acquisition.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingOplogApplierMaxLockRequestTimeoutMillis
        default: 5
        redact: false

    reshardingMinimumOperationDurationMillis:
        description: >-
            Controls the minimum duration of resharding operations, and allows transactions and
            retryable writes started after the current resharding operation to complete within the
            period defined by the parameter. If this value is lowered then you will likely want to lower
            reshardingDelayBeforeRemainingOperationTimeQueryMillis as well.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingMinimumOperationDurationMillis
        default:
            expr: 5 * 60 * 1000
        validator:
            gte: 0
        redact: false

    reshardingDelayBeforeRemainingOperationTimeQueryMillis:
        description: >-
            The initial delay before querying for remaining operation time from participant shards.
            The delay allows for applying more oplog entries before calculating time remaining, giving
            a more accurate value.
            Note we will have this delay every time we happen to have a failover occur.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingDelayBeforeRemainingOperationTimeQueryMillis
        default:
            expr: 30 * 1000
        validator:
            gte: 0
        redact: false

    reshardingMaxDelayBetweenRemainingOperationTimeQueriesMillis:
        description: >-
            The maximum delay between remaining operation time queries.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingMaxDelayBetweenRemainingOperationTimeQueriesMillis
        default:
            expr: 30 * 1000
        validator:
            gte: 0
        redact: false

    reshardingCriticalSectionTimeoutMillis:
        description: >-
            The upper limit on how long to wait to hear back from recipient shards reaching strict
            consistency after engaging the critical section.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingCriticalSectionTimeoutMillis
        default:
            expr: 5 * 1000
        validator:
            gte: 0
        redact: false

    remainingReshardingOperationTimeThresholdMillis:
        description: >-
            Controls the threshold for engaging the critical section of resharding operations.
            Once the remaining operation time on all recipients falls below this threshold, the
            resharding coordinator will engage the critical section and block incoming writes.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gRemainingReshardingOperationTimeThresholdMillis
        default:
            expr: 500
        validator:
            gte: 0
        redact: false

    remainingReshardingOperationTimePrepareThresholdMillis:
        description: >-
            Controls the threshold for resharding recipients to start prepare for the critical
            section, for example, by expediting the oplog fetching.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gRemainingReshardingOperationTimePrepareThresholdMillis
        default:
            expr: 60 * 1000
        validator:
            gte: 0
        redact: false

    reshardingRemainingTimeEstimateAccountsForDonorReplicationLag:
        description: >-
            Controls whether the remaining time estimate on the resharding coordinator, when trying
            to engage the critical section and block incoming writes, should account for the
            replication lag on the donors.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: gReshardingRemainingTimeEstimateAccountsForDonorReplicationLag
        default: true
        redact: false

    reshardingRemainingTimeEstimateAccountsForRecipientReplicationLag:
        description: >-
            Controls whether the remaining time estimate on the resharding coordinator, when trying
            to engage the critical section and block incoming writes, should account for the
            replication lag on the recipients.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: gReshardingRemainingTimeEstimateAccountsForRecipientReplicationLag
        default: true
        redact: false

    reshardingRemainingTimeEstimateBasedOnMovingAverage:
        description: >-
            Controls whether the remaining time estimate on a resharding recipient should be
            based on the exponential moving average for the time it takes to fetch and apply an
            oplog entry.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: gReshardingRemainingTimeEstimateBasedOnMovingAverage
        default: true
        redact: false

    reshardingExponentialMovingAverageTimeToFetchAndApplySmoothingFactor:
        description:
            The smoothing factor for the exponential moving average calculation for the remaining
            time estimate on a resharding recipient. The factor ranges between 0 and 1. The closer
            to 1 it is, the more weight is given to recent data points.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<double>
        cpp_varname: gReshardingExponentialMovingAverageTimeToFetchAndApplySmoothingFactor
        default: 0.4
        validator:
            gt: 0
            lt: 1
        redact: false

    reshardingExponentialMovingAverageTimeToFetchAndApplyIntervalMillis:
        description:
            The minimum interval for updating the exponential moving average for the time it takes
            to fetch and apply an oplog entry.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingExponentialMovingAverageTimeToFetchAndApplyIntervalMillis
        default:
            expr: 2000
        validator:
            gt: 0
        redact: false

    reshardingCoordinatorQuiescePeriodMillis:
        description: >-
            Controls the amount of time a resharding operation will remain in a quiesced state on
            the coordinator, after it completes or aborts, to allow a user to reconnect to it and
            retrieve the result. This applies only to resharding operations where the user
            provided a reshardingUUID; if no UUID is provided there is no quiesce period.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gReshardingCoordinatorQuiescePeriodMillis
        default:
            expr: 15 * 60 * 1000
        validator:
            gte: 0
        redact: false

    reshardingVerificationChangeStreamsEventsBatchSizeLimit:
        description: >-
            The maximum number of events to process during verification before updating the change
            in the number of documents and the resume token for the change stream.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingVerificationChangeStreamsEventsBatchSizeLimit
        default:
            expr: 1000
        validator:
            gte: 0
        redact: false

    reshardingVerificationChangeStreamsEventsBatchTimeLimitSeconds:
        description: >-
            The maximum number of seconds to process events during verification before updating the
            change in the number of documents and the resume token for the change stream.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingVerificationChangeStreamsEventsBatchTimeLimitSeconds
        default:
            expr: 5 * 60
        validator:
            gte: 0
        redact: false

    reshardingVerificationChangeStreamsSleepMS:
        description: >-
            The amount of time in milliseconds to wait before sending the next getMore command after
            the previous one did not return any change events.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingVerificationChangeStreamsSleepMS
        default:
            expr: 50
        validator:
            gte: 0
        redact: false

    reshardingWaitForReplicationIntervalMilliseconds:
        description: >-
            The amount of time to wait before retrying after a failed replication lag wait.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingWaitForReplicationIntervalMilliseconds
        default:
            expr: 1000
        validator:
            gte: 0
        redact: false

    reshardingWaitForReplicationTimeoutSeconds:
        description: >-
            The amount of time to wait during each replication lag wait.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingWaitForReplicationTimeoutSeconds
        default:
            expr: 60
        validator:
            gte: 0
        redact: false

    reshardingMaxReplicationLagSecondsBeforeBuildingIndexes:
        description: >-
            The maximum replication lag across all nodes when a recipient shard starts building
            indexes.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gReshardingMaxReplicationLagSecondsBeforeBuildingIndexes
        default:
            expr: 5
        validator:
            gte: 0
        redact: false

    reshardingAbortUnpreparedTransactionsUponPreparingToBlockWrites:
        description: >-
            Controls whether a resharding donor should abort in-progress unprepared transactions
            after transitioning to the "preparing-to-block-writes" state. Aborting unprepared
            transactions helps prevent the donor from not being to acquire the critical section
            within the critical section timeout when there are long-running transactions.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<bool>
        cpp_varname: gReshardingAbortUnpreparedTransactionsUponPreparingToBlockWrites
        default: true
        redact: false
