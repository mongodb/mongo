# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# This file defines the format of documents stored in config.rangeDeletions. Each document
# represents a chunk range to be deleted by the CollectionRangeDeleter.

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/db/basic_types.idl"
    - "mongo/db/keypattern.idl"
    - "mongo/db/session/logical_session_id.idl"
    - "mongo/db/global_catalog/chunk_range.idl"
    - "mongo/db/versioning_protocol/chunk_version.idl"
    - "mongo/db/sharding_environment/sharding_types.idl"

enums:
    CleanWhen:
        description: "When to cleanup ranges."
        type: string
        values:
            kNow: "now"
            kDelayed: "delayed"

structs:
    rangeDeletionTask:
        description: "Represents a chunk range to be deleted by the range deleter."
        strict: false
        fields:
            _id:
                type: uuid
                description: "A unique identifier for the migration."
                cpp_name: id
            nss:
                type: namespacestring
                description: "The namespace of the collection that the chunk belongs to."
            collectionUuid:
                type: uuid
                description: "The UUID of the collection that the chunk belongs to."
            donorShardId:
                type: shard_id
                description: "The shard from which the chunk was migrated."
            range:
                type: chunk_range
                description: "The range to be deleted."
            pending:
                type: bool
                description: "Flag that is present if the range is not yet ready for deletion"
                optional: true
            processing:
                type: optionalBool
                description: "Flag that is present if the range is currently being deleted"
            whenToClean:
                type: CleanWhen
                description: "Enumeration that defines when to cleanup the range."
            timestamp:
                type: timestamp
                description: "The timestamp the task was created."
                optional: true
            numOrphanDocs:
                type: safeInt64
                description: "The estimated number of orphaned documents in the range"
                default: 0
            keyPattern:
                type: KeyPattern
                description: "The shard key pattern at the moment the range deletion task was created"
                optional: true
            preMigrationShardVersion:
                type: ChunkVersion
                description: "The shard version prior to the migration that caused this range deletion task."
                optional: true
