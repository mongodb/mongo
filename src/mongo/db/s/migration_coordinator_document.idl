# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# This file defines the format of documents stored in config.rangeDeletions. Each document
# represents a chunk range to be deleted by the CollectionRangeDeleter.

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/s/migration_session_id.h"

imports:
    - "mongo/db/basic_types.idl"
    - "mongo/db/sharding_environment/sharding_types.idl"
    - "mongo/db/global_catalog/chunk_range.idl"
    - "mongo/db/versioning_protocol/chunk_version.idl"
    - "mongo/db/session/logical_session_id.idl"

enums:
    Decision:
        description: "Whether the migration committed or aborted."
        type: string
        values:
            kCommitted: "committed"
            kAborted: "aborted"

types:
    MigrationSessionId:
        bson_serialization_type: string
        description:
            "The migration session id is the legacy unique identifier for a particular
            moveChunk command and is exchanged as part of all communication between the
            donor and recipient shards."
        cpp_type: "mongo::MigrationSessionId"
        deserializer: "mongo::MigrationSessionId::fromString"
        serializer: "mongo::MigrationSessionId::toString"
        is_view: false

structs:
    migrationCoordinatorDocument:
        description: "Represents an in-progress migration on the migration donor."
        generate_comparison_operators: false
        strict: false
        fields:
            _id:
                type: uuid
                description: "A unique identifier for the migration."
                cpp_name: id
            migrationSessionId:
                type: MigrationSessionId
                description: "A legacy unique identifier for the migration session."
            lsid:
                type: LogicalSessionId
                description: "The sessionId to use to communicate with the recipient"
            txnNumber:
                type: TxnNumber
                description: "The last txnNumber used to communicate with the recipient"
            nss:
                type: namespacestring
                description: "The namespace of the collection that the chunk belongs to."
            collectionUuid:
                type: uuid
                description: "The UUID of the collection that the chunk belongs to."
            donorShardId:
                type: shard_id
                description: "The shard from which the chunk is being migrated."
            recipientShardId:
                type: shard_id
                description: "The shard to which the chunk is being migrated."
            range:
                type: chunk_range
                description: "The range being migrated."
            preMigrationChunkVersion:
                type: ChunkVersion
                description:
                    "The data placement, at the start of the migration, of the chunk being
                    moved."
            decision:
                type: Decision
                description: "Enumeration that defines whether the migration committed or aborted."
                optional: true
            transfersFirstCollectionChunkToRecipient:
                type: bool
                description:
                    "A true value marks the fact that the migration will cause the recipient to
                    start owning data for the parent collection once committed.
                    This field (marked as optional for backwards compatibility) is used to compose
                    the legacy 'migrateChunkToNewShard' op entry when the operation is successful."
                optional: true
