# Copyright (C) 2024-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/admission/ingress_admission_controller.h"
        - "mongo/db/server_options.h"

server_parameters:
    ingressAdmissionControlEnabled:
        description: Controls whether ingress admission control mechanism is enabled.
        set_at: [startup, runtime]
        cpp_varname: gIngressAdmissionControlEnabled
        cpp_vartype: AtomicWord<bool>
        default: true
        redact: false
    ingressAdmissionControllerTicketPoolSize:
        description: >-
            Controls the maximum number of tickets in the ingress admission control ticket pool. Note
            that setting this parameter to 0 will block all incoming operations that are subject to
            ingress admission control.
        set_at: [startup, runtime]
        cpp_varname: gIngressAdmissionControllerTicketPoolSize
        cpp_vartype: AtomicWord<int32_t>
        on_update: IngressAdmissionController::onUpdateTicketPoolSize
        # Setting the pool size equal to the max connections default means it is
        # effectively infinite. See maxIncomingConnections in server_options_general.idl
        default: {expr: "static_cast<int>(DEFAULT_MAX_CONN)"}
        validator: {gte: 0}
        redact: false
    ingressAdmissionControllerMaxQueueDepth:
        description: >-
            Controls the maximum number of operations waiting for admission in the ingress admission control.
            Setting this parameter will not apply to operations that are already waiting for a ticket.
        set_at: [startup, runtime]
        cpp_varname: gIngressAdmissionControllerMaxQueueDepth
        cpp_vartype: Atomic<std::int32_t>
        on_update: IngressAdmissionController::onUpdateMaxQueueDepth
        # Setting the max queue depth equal to the max connections default means it is
        # effectively infinite. See maxIncomingConnections in server_options_general.idl
        default: {expr: "TicketHolder::kDefaultMaxQueueDepth"}
        validator: {gte: 0}
        redact: false
