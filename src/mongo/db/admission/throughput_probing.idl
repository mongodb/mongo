# Copyright (C) 2023-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.

global:
    cpp_namespace: "mongo::admission::throughput_probing"
    cpp_includes:
        - "mongo/db/admission/throughput_probing.h"

server_parameters:
    throughputProbingStepMultiple:
        description: "The step size for throughput probing is this multiple of the current concurrency"
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<double>
        cpp_varname: gStepMultiple
        default: 0.1
        validator:
            gte: 0.01
            lte: 0.5
        redact: false

    throughputProbingInitialConcurrency:
        description: >-
            The initial number of TOTAL concurrent read/write transactions for throughput probing. The
            default value of 0 means to use the number of logical CPU cores.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gInitialConcurrency
        default: 0
        validator:
            callback: validateInitialConcurrency
        redact: false

    throughputProbingMinConcurrency:
        description: >-
            The minimum number of concurrent read/write transactions for throughput probing. This minimum
            is applied to reads and writes separately.
        set_at: startup
        cpp_vartype: int32_t
        cpp_varname: gMinConcurrency
        default: 4
        validator:
            callback: validateMinConcurrency
        redact: false

    throughputProbingMaxConcurrency:
        description: >-
            The maximum number of concurrent read/write transactions for throughput probing. This maximum
            is applied to reads and writes separately.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int32_t>
        cpp_varname: gMaxConcurrency
        default: 128
        validator:
            callback: validateMaxConcurrency
        redact: false

    throughputProbingReadWriteRatio:
        description: >-
            The ratio of reads/writes when using throughput probing. A value of 0.5 indicates a 1:1 ratio,
            while a value greater than 0.5 favors reads and a value less than 0.5 favors writes.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<double>
        cpp_varname: gReadWriteRatio
        default: 0.5
        validator:
            gte: 0
            lte: 1
        redact: false

    throughputProbingConcurrencyMovingAverageWeight:
        description: >-
            How much to weigh newer concurrency measurements into the exponentially-decaying moving
            average. Higher values respond faster to changes, but with more variability. Lower values
            respond slower, but with less variability.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<double>
        cpp_varname: gConcurrencyMovingAverageWeight
        default: 0.2
        validator:
            gt: 0
            lte: 1
        redact: false

    throughputProbingStallDetectionTimeoutMs:
        description: >-
            How long we wait until we report a stall
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int32_t>
        cpp_varname: gStallDetectionTimeoutMs
        default: 60000
        validator:
            gt: 0
        redact: false
