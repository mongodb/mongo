# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.

# This IDL file describes the BSON format for a LogicalSessionId, and
# handles the serialization to and deserialization from its BSON representation
# for that class.

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/traffic_recorder_validators.h"
        - "src/mongo/db/query/util/memory_util.h"

imports:
    - "mongo/db/basic_types.idl"

types:
    numBytes:
        description: Represents a number of bytes; either a numerical type (truncating to an integer) or a string containing a number with a suffix KB, MB, GB, %
        cpp_type: mongo::memory_util::MemorySize
        bson_serialization_type:
            - long
            - int
            - decimal
            - double
            - string
        deserializer: "mongo::memory_util::MemorySize::parseFromBSON"
        serializer: "mongo::memory_util::MemorySize::serializeToBSON"
        is_view: false

structs:
    TrafficRecorderStats:
        description: "A struct representing the trafficRecording server status section"
        strict: true
        fields:
            running:
                type: bool
            bufferSize:
                type: long
            bufferedBytes:
                type: long
            recordingDir:
                type: string
            maxFileSize:
                type: long
            currentFileSize:
                type: long

commands:
    startTrafficRecording:
        description: "start recording Command"
        command_name: startTrafficRecording
        namespace: ignored
        api_version: ""
        fields:
            destination:
                description: "output directory"
                type: string
            maxFileSize:
                description: "max size of each recording file"
                default: 1073741824
                type: numBytes
            maxFileAgeMins:
                description: "max duration for a single recording file to span"
                optional: true
                type: long
            maxMemUsage:
                description: "max additional memory the recording is allowed to use"
                default: 134217728
                type: numBytes

    stopTrafficRecording:
        description: "stop recording Command"
        command_name: stopTrafficRecording
        namespace: ignored
        api_version: ""

    getTrafficRecordingStatus:
        description: "Get the status of the ongoing traffic recording, if any"
        command_name: getTrafficRecordingStatus
        namespace: ignored
        api_version: ""

server_parameters:
    trafficRecordingDirectory:
        description: "Path to directory where traffic recordings will be saved"
        set_at: [startup, runtime]
        cpp_vartype: std::string
        cpp_varname: gTrafficRecordingDirectory
        validator:
            callback: "validateTrafficRecordDestination"
        redact: false

    AlwaysRecordTraffic:
        description: "Start server with traffic recording enabled, and ensure all records are flushed. Test only."
        test_only: true
        set_at: startup
        cpp_vartype: std::string
        cpp_varname: gAlwaysRecordTraffic
        redact: false
