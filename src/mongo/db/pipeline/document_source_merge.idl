# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# Document source merge stage IDL file

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/namespace_string.h"
        - "mongo/db/pipeline/document_source_merge_spec.h"
        - "mongo/db/versioning_protocol/chunk_version.h"

imports:
    - "mongo/db/pipeline/document_source_merge_modes.idl"
    - "mongo/db/basic_types.idl"
    - "mongo/db/namespace_spec.idl"
    - "mongo/db/versioning_protocol/chunk_version.idl"

types:
    MergeTargetNss:
        bson_serialization_type: any
        description:
            Names of the target database and collection. The database name defaults
            to the database of the aggregation.
        cpp_type: mongo::NamespaceString
        serializer: "::mongo::mergeTargetNssSerializeToBSON"
        deserializer: "::mongo::mergeTargetNssParseFromBSON"
        deserialize_with_tenant: true
        # NamespaceString is not a view.
        is_view: false

    MergeOnFields:
        bson_serialization_type: any
        description: A single field or array of fields that identify a document for merge.
        cpp_type: std::vector<std::string>
        serializer: "::mongo::mergeOnFieldsSerializeToBSON"
        deserializer: "::mongo::mergeOnFieldsParseFromBSON"
        # std::vector<std::string> is not a view.
        is_view: false

    MergeWhenMatchedPolicy:
        bson_serialization_type: any
        description:
            Defines a policy strategy describing what to do when there is a matching
            document in the target collection. Can hold a value from the
            MergeWhenMatchedMode enum, or a custom pipeline definition.
        cpp_type: "::mongo::MergeWhenMatchedPolicy"
        serializer: "::mongo::mergeWhenMatchedSerializeToBSON"
        deserializer: "::mongo::mergeWhenMatchedParseFromBSON"
        # Deserializer uses getOwned.
        is_view: false

structs:
    DocumentSourceMergeSpec:
        description: A document used to specify the $merge stage of an aggregation pipeline.
        strict: true
        query_shape_component: true
        fields:
            into:
                cpp_name: targetNss
                type: MergeTargetNss
                description: Target namespace to merge documents from an aggregation pipeline into.
                query_shape: custom

            "on":
                type: MergeOnFields
                optional: true
                description: A single field or array of fields that uniquely identify a document.
                query_shape: custom

            let:
                type: object
                optional: true
                description:
                    Specifies variables to use in the update pipeline defined in
                    MergeWhenMatchedPolicy when the 'whenMatched' mode is a custom
                    pipeline.
                query_shape: custom

            whenMatched:
                type: MergeWhenMatchedPolicy
                optional: true
                description:
                    The merge mode for the merge operation when source and target elements
                    match.
                query_shape: parameter

            whenNotMatched:
                type: MergeWhenNotMatchedMode
                optional: true
                description:
                    The merge mode for the merge operation when source and target elements
                    do not match.
                query_shape: parameter

            targetCollectionVersion:
                type: ChunkVersion
                optional: true
                description:
                    If set, the collection's ChunkVersion found when parsed on mongos. Can
                    be used to check if a collection has since been dropped and re-created,
                    in which case the shard key may have changed, or had its shard key
                    refined. This also can be used to detect if the collection has gone
                    from unsharded to sharded, and thus now has a shard key.
                query_shape: parameter

            allowMergeOnNullishValues:
                type: optionalBool
                description:
                    If set to true, allow values of "on" fields in $merge to include
                    missing or null values. This fields should only be used by mongos when
                    passing split pipeline to mongod.
                query_shape: parameter
