# Copyright (C) 2020-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.

global:
    cpp_namespace: mongo

imports:
    - "mongo/db/basic_types.idl"

structs:
    CommonMirroredReadsParameters:
        description: "Options for mirroring reads shared across mirrored read types"
        strict: true
        fields:
            samplingRate:
                description: >-
                    A floating-point value within [0.0,1.0] specifying what fraction of reads to sample
                type: safeDouble
                default: 0.01
                validator:
                    gte: 0.0
                    lte: 1.0
            maxTimeMS:
                description: >-
                    The maxTimeMS to apply to mirrored reads
                type: safeInt
                default: 1000
                validator:
                    gt: 0

    TargetedMirroredReadsOptions:
        description: "Options specific to targeted mirrored reads"
        inline_chained_structs: true
        chained_structs:
            CommonMirroredReadsParameters: CommonMirroredReadsParameters
        strict: true
        fields:
            tag:
                description: The replica set tag used to identify the nodes to target
                type: object_owned
                default: "BSONObj()"

    MirroredReadsParameters:
        description: "A struct representing how to mirror read command requests"
        inline_chained_structs: true
        chained_structs:
            CommonMirroredReadsParameters: CommonMirroredReadsParameters
        fields:
            targetedMirroring:
                description: "Options to use for targeted mirrored reads"
                type: TargetedMirroredReadsOptions
                default: true

server_parameters:
    mirrorReads:
        description: "How to mirror read command requests"
        set_at: [startup, runtime]
        cpp_class:
            name: "MirroredReadsServerParameter"
            data: "synchronized_value<MirroredReadsParameters>"
            override_set: true
        redact: false
    mirrorReadsMaxConnPoolSize:
        description: "The maximum number of connections that the MirrorMaestro connection pool can keep open"
        set_at: [startup, runtime]
        cpp_varname: "gMirrorMaestroConnPoolMaxSize"
        cpp_vartype: AtomicWord<int>
        validator:
            gte: 1
        default: 4
        redact: false
