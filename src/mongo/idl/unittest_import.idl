# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# IDL Unit Tests IDL file for testing imported structs
global:
    cpp_namespace: "mongo::idl::import"

imports:
    - "mongo/db/basic_types.idl"

##################################################################################################
#
# Unit test structs for a single value to ensure type validation works correctly
#
##################################################################################################

structs:
    one_string:
        description: UnitTest for a single string
        generate_comparison_operators: true
        fields:
            value: string

    one_int:
        description: UnitTest for a single int
        generate_comparison_operators: true
        fields:
            value: int

    one_long:
        description: UnitTest for a single long
        generate_comparison_operators: true
        fields:
            value: long

    one_double:
        description: UnitTest for a single double
        generate_comparison_operators: true
        fields:
            value: double

    one_bool:
        description: UnitTest for a single bool
        generate_comparison_operators: true
        fields:
            value: bool

    one_bindata:
        description: UnitTest for a single bindata_generic
        generate_comparison_operators: true
        fields:
            value: bindata_generic

    one_function:
        description: UnitTest for a single bindata_function
        generate_comparison_operators: true
        fields:
            value: bindata_function

    one_uuid:
        description: UnitTest for a single bindata_uuid
        generate_comparison_operators: true
        fields:
            value: bindata_uuid

    one_md5:
        description: UnitTest for a single bindata_md5
        generate_comparison_operators: true
        fields:
            value: bindata_md5

    one_objectid:
        description: UnitTest for a single objectid
        generate_comparison_operators: true
        fields:
            value: objectid

    one_date:
        description: UnitTest for a single date
        generate_comparison_operators: true
        fields:
            value: date

    one_timestamp:
        description: UnitTest for a single timestamp
        generate_comparison_operators: true
        fields:
            value: timestamp

    one_UUID:
        description: UnitTest for a single UUID
        generate_comparison_operators: true
        fields:
            value: uuid

enums:
    IntEnum:
        description: "An example int enum"
        type: int
        values:
            a0: 0
            b1: 1
            c2: 2
