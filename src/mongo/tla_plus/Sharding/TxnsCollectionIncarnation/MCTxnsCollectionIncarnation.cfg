SPECIFICATION Spec

CONSTANTS 
    Shards = {s1, s2}
    NameSpaces = {a, b, c}
    Keys = {k1, k2}

    Txns = {t1, t2}
    TXN_STMTS = 2

    \* Used as input for StateConstraint to cap amount of DDLs. State constraint allows one more DDL
    \* than specified here, to explore interaction with subsequent transaction statements.
    DDLS = 4
    
INVARIANTS
    \* -- Spec correctness invariants. Disabled by default, used to catch specification issues. 
    \* -- Enable when making significant changes to the spec.
    \* TypeOK
    \* ShardDataConsistentWithUUID
    \* RouterSendsOneStmtRequestPerShard
    \* -- Protocol correctness invariants. Must always be enabled.
    CommittedTxnImpliesAllStmtsSuccessful
    CommittedTxnImpliesConsistentKeySet
    \* -- Bait invariants. Selectively enable one to generate a counter example trace.
    \* BaitStaleDatabaseVersion
    \* BaitStaleShardVersion
    \* BaitSnapshotIncompatible
    \* BaitHappyPath
    \* BaitTrace

\* Some PROPERTIES violations may not be detected in the presence of CONSTRAINTS. To check 
\* properties of type '<>' (eventually) or '~>' (leads-to), disable CONSTRAINTS. And when enabling 
\* CONSTRAINTS, disable said incompatible properties to speed up model checking. Keeping incompatible
\* PROPERTIES enabled simultaneously with CONSTRAINTS slows down model checking without actually 
\* catching violations. Similarly, symmetry sets should not be used when checking liveness properties.
\* Doing so can make TLC fail to find errors, or to report nonexistent errors. 
\* PROPERTIES which only involve '[]' (always) are compatible with CONSTRAINTS.
PROPERTIES
    \* AllTxnsEventuallyDone
    \* AcquiredTxnResourcesEventuallyReleased
    \* BaitHappyPath
    ResponseForUntrackedNameSpaceIsFromPrimaryShard

CONSTRAINTS
    StateConstraint

SYMMETRY Symmetry