/*! @page tune_system_buffer_cache System buffer cache

@section write_through

The \c write_through configuration string controls whether the
disk is allowed to cache the writes. Enabling this flag increases write
latency as the drive must ensure all writes are persisted to disk, but it
ensures write durability.

@section tuning_system_buffer_cache_os_cache_dirty_max os_cache_dirty_max

WiredTiger supports two configuration options related to the system buffer cache:

The first is \c os_cache_dirty_max, the maximum dirty bytes an object
is allowed to have in the system buffer cache.  Once this many bytes
from an object are written into the system buffer cache, WiredTiger will
attempt to schedule writes for all of the dirty blocks the object has
in the system buffer cache.  This configuration option allows
applications to flush dirty blocks from the object, avoiding stalling
any underlying drives when the object is subsequently flushed to disk
as part of a durability operation.

An example of configuring \c os_cache_dirty_max:

@snippet ex_all.c os_cache_dirty_max configuration

The \c os_cache_dirty_max configuration is based on the non-standard
Linux \c sync_file_range system call and will be ignored if set
and that call is not available.

@section tuning_system_buffer_cache_os_cache_max os_cache_max

The second configuration option related to the system buffer cache is
\c os_cache_max, the maximum bytes an object is allowed to have in the
system buffer cache.  Once this many bytes from an object are either
read into or written from the system buffer cache, WiredTiger will
attempt to evict all of the object's blocks from the buffer cache.  This
configuration option allows applications to evict blocks from the system
buffer cache to limit double-buffering and system buffer cache overhead.

An example of configuring \c os_cache_max:

@snippet ex_all.c os_cache_max configuration

The \c os_cache_max configuration is based on the POSIX 1003.1 standard
\c posix_fadvise system call and may not available on all platforms.

Configuring \c os_cache_dirty_max or \c os_cache_max both have the side
effect of turning off memory-mapping of objects in WiredTiger.

 */
