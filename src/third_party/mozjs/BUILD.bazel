load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")

package(default_visibility = ["//visibility:public"])

PLATFORMS = {
    "//bazel/config:linux_aarch64": ("aarch64", "linux"),
    "//bazel/config:linux_x86_64": ("x86_64", "linux"),
    "//bazel/config:linux_ppc64le": ("ppc64le", "linux"),
    "//bazel/config:linux_s390x": ("s390x", "linux"),
    "//bazel/config:windows_x86_64": ("x86_64", "windows"),
    "//bazel/config:macos_x86_64": ("x86_64", "macOS"),
    "//bazel/config:macos_aarch64": ("aarch64", "macOS"),
}

PLATFORM_SRCS = select({
    config: glob([
        "platform/{}/{}/build/**/*.h".format(arch, os),
        "platform/{}/{}/include/**/*.h".format(arch, os),
        "platform/{}/{}/build/*.cpp".format(arch, os),
        "platform/{}/{}/build/jit/*.cpp".format(arch, os),
        "platform/{}/{}/build/gc/*.cpp".format(arch, os),
        "platform/{}/{}/build/util/*.cpp".format(arch, os),
        "platform/{}/{}/build/wasm/*.cpp".format(arch, os),
        "platform/{}/{}/build/irregexp/*.cpp".format(arch, os),
        "platform/{}/{}/build/debugger/*.cpp".format(arch, os),
        "platform/{}/{}/build/frontend/*.cpp".format(arch, os),
    ]) + (
        [
            "extract/mozglue/misc/SIMD_avx2.cpp",
            "extract/mozglue/misc/SSE.cpp",
        ] if arch == "x86_64" and os != "windows" else []
    )
    for config, (arch, os) in PLATFORMS.items()
} | {
    "//conditions:default": ["//conditions:incompatible"],
})

PLATFORM_INCLUDES = select({
    config: [
        "platform/{}/{}/build".format(arch, os),
        "platform/{}/{}/include".format(arch, os),
    ]
    for config, (arch, os) in PLATFORMS.items()
} | {
    "//conditions:default": ["//conditions:incompatible"],
})

PLATFORM_COPTS = select({
    config: [
        ("/FI" if os == "windows" else "-include") + "$(location platform/{}/{}/build/js-confdefs.h)".format(arch, os),
    ] + (["-mavx2"] if arch == "x86_64" and os != "windows" else [])
    for config, (arch, os) in PLATFORMS.items()
} | {
    "//conditions:default": ["//conditions:incompatible"],
})

mongo_cc_library(
    name = "mozjs",
    srcs = [
        "extract/js/src/builtin/RegExp.cpp",
        "extract/js/src/frontend/Parser.cpp",
        "extract/js/src/gc/StoreBuffer.cpp",
        "extract/js/src/irregexp/RegExpNativeMacroAssembler.cpp",
        "extract/js/src/irregexp/imported/regexp-ast.cc",
        "extract/js/src/irregexp/imported/regexp-compiler.cc",
        "extract/js/src/jsmath.cpp",
        "extract/js/src/mfbt/Unified_cpp_mfbt0.cpp",
        "extract/js/src/mfbt/Unified_cpp_mfbt1.cpp",
        "extract/js/src/util/DoubleToString.cpp",
        "extract/js/src/vm/Interpreter.cpp",
        "extract/js/src/vm/ProfilingStack.cpp",
        "extract/js/src/wasm/WasmCode-platform.cpp",
        "extract/mfbt/lz4/lz4.c",
        "extract/mfbt/lz4/lz4frame.c",
        "extract/mfbt/lz4/lz4hc.c",
        "extract/mfbt/lz4/xxhash.c",
        "extract/mozglue/misc/AutoProfilerLabel.cpp",
        "extract/mozglue/misc/AwakeTimeStamp.cpp",
        "extract/mozglue/misc/Debug.cpp",
        "extract/mozglue/misc/MmapFaultHandler.cpp",
        "extract/mozglue/misc/Printf.cpp",
        "extract/mozglue/misc/SIMD.cpp",
        "extract/mozglue/misc/StackWalk.cpp",
        "extract/mozglue/misc/TimeStamp.cpp",
        "extract/mozglue/misc/Uptime.cpp",
        "mongo_sources/freeOpToJSContext.cpp",
        "mongo_sources/mongoErrorReportToString.cpp",
    ] + select({
        "//bazel/config:spider_monkey_dbg_enabled": ["extract/js/src/util/Utility.cpp"],
        "//conditions:default": [],
    }) + select({
        "@platforms//os:windows": [
            "extract/mozglue/misc/ConditionVariable_windows.cpp",
            "extract/mozglue/misc/Mutex_windows.cpp",
            "extract/mozglue/misc/TimeStamp_windows.cpp",
        ],
        "//conditions:default": [
            "extract/mozglue/misc/ConditionVariable_posix.cpp",
            "extract/mozglue/misc/Mutex_posix.cpp",
            "extract/mozglue/misc/TimeStamp_posix.cpp",
        ],
    }) + ["extract/modules/fdlibm/" + f for f in [
        "e_acos.cpp",
        "e_acosf.cpp",
        "e_acosh.cpp",
        "e_asin.cpp",
        "e_asinf.cpp",
        "e_atan2.cpp",
        "e_atanh.cpp",
        "e_cosh.cpp",
        "e_exp.cpp",
        "e_expf.cpp",
        "e_hypot.cpp",
        "e_log.cpp",
        "e_log10.cpp",
        "e_log2.cpp",
        "e_logf.cpp",
        "e_pow.cpp",
        "e_powf.cpp",
        "e_sinh.cpp",
        "e_sqrtf.cpp",
        "k_cos.cpp",
        "k_cosf.cpp",
        "k_exp.cpp",
        "k_expf.cpp",
        "k_rem_pio2.cpp",
        "k_sin.cpp",
        "k_sinf.cpp",
        "k_tan.cpp",
        "k_tanf.cpp",
        "s_asinh.cpp",
        "s_atan.cpp",
        "s_atanf.cpp",
        "s_cbrt.cpp",
        "s_ceil.cpp",
        "s_ceilf.cpp",
        "s_cos.cpp",
        "s_cosf.cpp",
        "s_exp2.cpp",
        "s_exp2f.cpp",
        "s_expm1.cpp",
        "s_fabs.cpp",
        "s_fabsf.cpp",
        "s_floor.cpp",
        "s_floorf.cpp",
        "s_log1p.cpp",
        "s_nearbyint.cpp",
        "s_rint.cpp",
        "s_rintf.cpp",
        "s_scalbn.cpp",
        "s_sin.cpp",
        "s_sinf.cpp",
        "s_tan.cpp",
        "s_tanf.cpp",
        "s_tanh.cpp",
        "s_trunc.cpp",
        "s_truncf.cpp",
        # Unused: 's_copysign.cpp'
    ]] + glob([
        "extract/js/src/**/*.h",
        "extract/mfbt/**/*.h",
        "extract/modules/fdlibm/**/*.h",
        "mongo_sources/**/*.h",
    ]) + PLATFORM_SRCS,
    hdrs = glob(["include/**/*.h"]),
    copts = PLATFORM_COPTS + [
        "-Isrc/third_party/mozjs/extract/intl/icu/source/common",
        "-Isrc/third_party/mozjs/extract/js/src",
        "-Isrc/third_party/mozjs/extract/js/src/gc",
        "-Isrc/third_party/mozjs/extract/js/src/jit",
        "-Isrc/third_party/mozjs/extract/mfbt",
    ] + select({
        "@platforms//os:windows": [
            # The default MSVC preprocessor elides commas in some cases as a
            # convenience, but this behavior breaks compilation of jspubtd.h.
            # Enabling the newer preprocessor fixes the problem.
            "/Zc:preprocessor",

            # Compiling with /Zc:preprocessor causes warnings for some
            # non-standard behavior in Windows system header files. We ignore
            # these warnings so that they don't cause the build to fail.
            "/wd5104",
            "/wd5105",

            # 'declaration' : no matching operator delete found; memory will not
            # be freed if initialization throws an exception
            "/wd4291",

            # name" : the inline specifier cannot be used when a friend
            # declaration refers to a specialization of a function template
            "/wd4396",

            # nonstandard extension used : zero-sized array in struct/union
            "/wd4200",

            # 'identifier' : no suitable definition provided for explicit
            # template instantiation request
            "/wd4661",

            # 'operation' : unsafe mix of type 'type' and type 'type' in
            # operation
            "/wd4805",

            # 'reinterpret_cast': conversion from 'type' to 'type' of greater
            # size
            "/wd4312",

            # 'operator': unsafe use of type 'type' in operation
            "/wd4804",

            # not enough arguments for function-like macro invocation
            "/wd4003",

            # C4996: '...': was declared deprecated
            "/wd4996",

            # C4305: 'initializing': truncation from '...' to '...'
            "/wd4305",

            # C4065: switch statement contains 'default' but no 'case' labels
            "/wd4065",

            # C4146: unary minus operator applied to unsigned type, result still unsigned
            "/wd4146",

            # C4309: '=': truncation of constant value
            "/wd4309",

            # C4723: potential divide by 0
            "/wd4723",

            # C4722: '...': destructor never returns, potential memory leak
            "/wd4722",

            # C4018: '<': signed/unsigned mismatch
            "/wd4018",

            # C4715: '...': not all control paths return a value
            "/wd4715",

            # C5101: use of preprocessor directive in function-like macro
            # argument list is undefined behavior
            "/wd5101",
        ],
        "//conditions:default": [
            "-Wno-sign-compare",
            # Disable warnings for third party libraries as no action will be taken to fix them
            # and they just clutter the output logs
            "-Wno-unused-variable",
            "-Wno-implicit-fallthrough",
            # Bazel doesn't differentiate between compile flags for C and C++.
            # This leads to errors where certain flags are invalid under C
            # compilation.
            "-Wno-error",
        ],
    }) + select({
        "//bazel/config:linux_x86_64": ["-mavx2"],
        "//bazel/config:macos_x86_64": ["-mavx2"],
        "//conditions:default": [],
    }) + select({
        # Suppress `register` keyword warnings in FreeBSD builds
        "@platforms//os:freebsd": [
            "-Wno-error=register",
            "-Wno-register",
        ],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:compiler_type_gcc": [
            # The default var track size leads to an error, making the compiler have to retry without it.
            # This may use extra memory at compile time, but we don't want to disable it completely since
            # it may be needed for valuable optimizations.
            "--param=max-vartrack-size=1000000000",
        ],
        "//conditions:default": [],
    }),
    defines = [
        "JS_USE_CUSTOM_ALLOCATOR=1",
        "STATIC_JS_API=1",
    ] + select({
        "//bazel/config:spider_monkey_dbg_enabled": [
            "DEBUG",
            "JS_DEBUG",
            "JS_GC_ZEAL",
        ],
        "//conditions:default": [],
    }) + select({
        # These warnings are triggered by public headers. We pass them as
        # defines so that depending targets don't need to set them manually.
        "@platforms//os:windows": [
            "_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING",
        ],
        "//conditions:default": [
            "__Wno_non_virtual_dtor__",
            "__Wno_invalid_offsetof__",
        ],
    }),
    features = select({
        "@platforms//os:linux": ["no_invalid_offsetof_warning"],
        "@platforms//os:macos": ["no_invalid_offsetof_warning"],
        "//conditions:default": [],
    }) + select({
        "//bazel/config:compiler_type_gcc": ["no_class_memaccess_warning"],
        "//conditions:default": [],
    }),
    includes = [
        "include",
        "mongo_sources",
    ] + PLATFORM_INCLUDES,
    linkopts = select({
        "@platforms//os:macos": ["-Wl,-undefined,dynamic_lookup"],
        "@platforms//os:windows": [
            "ntdll.lib",
        ],
        "//conditions:default": [""],
    }),
    local_defines = [
        "IMPL_MFBT=1",
        "U_NO_DEFAULT_INCLUDE_UTF_HEADERS=1",
        "UCONFIG_NO_BREAK_ITERATION=1",
        "UCONFIG_NO_FORMATTING=1",
        "UCONFIG_NO_TRANSLITERATION=1",
        "UCONFIG_NO_REGULAR_EXPRESSIONS=1",
        "U_CHARSET_IS_UTF8=1",
        "U_STATIC_IMPLEMENTATION=1",
        "U_USING_ICU_NAMESPACE=0",
    ] + select({
        "@platforms//os:windows": [
            "_CRT_RAND_S=1",
            "NO_COMPUTED_GOTO=1",
        ],
        "//conditions:default": [],
    }) + select({
        "@platforms//cpu:x86_64": ["WASM_HUGE_MEMORY=1"],
        "//conditions:default": [],
    }),
    no_undefined_ref_DO_NOT_USE = False,
    textual_hdrs = glob([
        # Not all files are meant to be compiled but still need to be available
        # for inclusions like `#include "somefile.cpp"`.
        "**/*.cpp",
        "**/*.c",
        "**/*.cc",
        "**/*.msg",
        "**/*.inc",
        "**/*.tbl",
    ]),
    deps = [
        "//src/third_party/icu4c-57.1/source:icu_i18n",
        "//src/third_party/zlib",
    ],
)
