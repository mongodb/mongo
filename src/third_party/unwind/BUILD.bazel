load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")

# Used to restrict compilation flags to only be added when compiling arm64 on clang.
config_setting(
    name = "clang_arm64",
    constraint_values = [
        "@platforms//cpu:arm64",
    ],
    flag_values = {
        "//bazel/config:compiler_type": "clang",
    },
)

# libunwind must be consumed with UNW_LOCAL_ONLY defined, but cannot be built that way.
# Define unwind as a wrapper target around unwind_impl to handle this since there is
# nothing like the opposite of local_defines to achieve this.
mongo_cc_library(
    name = "unwind",
    defines = ["UNW_LOCAL_ONLY"],
    skip_global_deps = [
        # This is a globally injected dependency.
        # Skip depending on all globally injected dependencies to avoid circular dependencies.
        "allocator",
        "libunwind",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":unwind_impl",
    ],
)

# Update procedure (mostly out of date):
# Run "scripts/host_config.sh". This creates a `make_output.json` file.
# Find the "unwind" library. Combine its `srcs` file list with the sources
# of all local libraries named in its "deps".
#
# Ensure that compilation flags are captured in this Bazel file.
mongo_cc_library(
    name = "unwind_impl",
    srcs = [
        "dist/src/dl-iterate-phdr.c",
        "dist/src/dwarf/Lexpr.c",
        "dist/src/dwarf/Lfde.c",
        "dist/src/dwarf/Lfind_proc_info-lsb.c",
        "dist/src/dwarf/Lfind_unwind_table.c",
        "dist/src/dwarf/Lget_proc_info_in_range.c",
        "dist/src/dwarf/Lparser.c",
        "dist/src/dwarf/Lpe.c",
        "dist/src/dwarf/global.c",
        "dist/src/elf64.c",
        "dist/src/mi/Laddress_validator.c",
        "dist/src/mi/Ldestroy_addr_space.c",
        "dist/src/mi/Ldyn-extract.c",
        "dist/src/mi/Lfind_dynamic_proc_info.c",
        "dist/src/mi/Lget_accessors.c",
        "dist/src/mi/Lget_elf_filename.c",
        "dist/src/mi/Lget_fpreg.c",
        "dist/src/mi/Lget_proc_info_by_ip.c",
        "dist/src/mi/Lget_proc_name.c",
        "dist/src/mi/Lget_reg.c",
        "dist/src/mi/Lput_dynamic_unwind_info.c",
        "dist/src/mi/Lset_cache_size.c",
        "dist/src/mi/Lset_caching_policy.c",
        "dist/src/mi/Lset_fpreg.c",
        "dist/src/mi/Lset_iterate_phdr_function.c",
        "dist/src/mi/Lset_reg.c",
        "dist/src/mi/backtrace.c",
        "dist/src/mi/dyn-cancel.c",
        "dist/src/mi/dyn-info-list.c",
        "dist/src/mi/dyn-register.c",
        "dist/src/mi/flush_cache.c",
        "dist/src/mi/init.c",
        "dist/src/mi/mempool.c",
        "dist/src/mi/strerror.c",
        "dist/src/os-linux.c",
    ] + select({
        "@platforms//cpu:aarch64": [
            "dist/src/aarch64/Lapply_reg_state.c",
            "dist/src/aarch64/Lcreate_addr_space.c",
            "dist/src/aarch64/Lget_proc_info.c",
            "dist/src/aarch64/Lget_save_loc.c",
            "dist/src/aarch64/Lglobal.c",
            "dist/src/aarch64/Linit.c",
            "dist/src/aarch64/Linit_local.c",
            "dist/src/aarch64/Linit_remote.c",
            "dist/src/aarch64/Lis_signal_frame.c",
            "dist/src/aarch64/Los-linux.c",
            "dist/src/aarch64/Lreg_states_iterate.c",
            "dist/src/aarch64/Lregs.c",
            "dist/src/aarch64/Lresume.c",
            "dist/src/aarch64/Lstash_frame.c",
            "dist/src/aarch64/Lstep.c",
            "dist/src/aarch64/Ltrace.c",
            "dist/src/aarch64/getcontext.S",
            "dist/src/aarch64/is_fpreg.c",
            "dist/src/aarch64/regname.c",
        ],
        "@platforms//cpu:x86_64": [
            "dist/src/x86_64/Lapply_reg_state.c",
            "dist/src/x86_64/Lcreate_addr_space.c",
            "dist/src/x86_64/Lget_proc_info.c",
            "dist/src/x86_64/Lget_save_loc.c",
            "dist/src/x86_64/Lglobal.c",
            "dist/src/x86_64/Linit.c",
            "dist/src/x86_64/Linit_local.c",
            "dist/src/x86_64/Linit_remote.c",
            "dist/src/x86_64/Los-linux.c",
            "dist/src/x86_64/Lreg_states_iterate.c",
            "dist/src/x86_64/Lregs.c",
            "dist/src/x86_64/Lresume.c",
            "dist/src/x86_64/Lstash_frame.c",
            "dist/src/x86_64/Lstep.c",
            "dist/src/x86_64/Ltrace.c",
            "dist/src/x86_64/getcontext.S",
            "dist/src/x86_64/is_fpreg.c",
            "dist/src/x86_64/regname.c",
            "dist/src/x86_64/setcontext.S",
        ],
        "@platforms//cpu:ppc": [
            "dist/src/ppc/Lget_proc_info.c",
            "dist/src/ppc/Lget_save_loc.c",
            "dist/src/ppc/Linit_local.c",
            "dist/src/ppc/Linit_remote.c",
            "dist/src/ppc/Lis_signal_frame.c",
            "dist/src/ppc64/Lapply_reg_state.c",
            "dist/src/ppc64/Lcreate_addr_space.c",
            "dist/src/ppc64/Lglobal.c",
            "dist/src/ppc64/Linit.c",
            "dist/src/ppc64/Lreg_states_iterate.c",
            "dist/src/ppc64/Lregs.c",
            "dist/src/ppc64/Lresume.c",
            "dist/src/ppc64/Lstep.c",
            "dist/src/ppc64/get_func_addr.c",
            "dist/src/ppc64/is_fpreg.c",
            "dist/src/ppc64/regname.c",
        ],
        "@platforms//cpu:s390x": [
            "dist/src/s390x/Lapply_reg_state.c",
            "dist/src/s390x/Lcreate_addr_space.c",
            "dist/src/s390x/Lget_proc_info.c",
            "dist/src/s390x/Lget_save_loc.c",
            "dist/src/s390x/Lglobal.c",
            "dist/src/s390x/Linit.c",
            "dist/src/s390x/Linit_local.c",
            "dist/src/s390x/Linit_remote.c",
            "dist/src/s390x/Lis_signal_frame.c",
            "dist/src/s390x/Lreg_states_iterate.c",
            "dist/src/s390x/Lregs.c",
            "dist/src/s390x/Lresume.c",
            "dist/src/s390x/Lstep.c",
            "dist/src/s390x/getcontext.S",
            "dist/src/s390x/is_fpreg.c",
            "dist/src/s390x/regname.c",
            "dist/src/s390x/setcontext.S",
        ],
        "//conditions:default": [],
    }),
    hdrs = select({
        "@platforms//cpu:aarch64": glob(["platform/linux_aarch64/install/include/**"]),
        "@platforms//cpu:x86_64": glob(["platform/linux_x86_64/install/include/**"]),
        "@platforms//cpu:ppc": glob(["platform/linux_ppc64le/install/include/**"]),
        "@platforms//cpu:s390x": glob(["platform/linux_s390x/install/include/**"]),
        "//conditions:default": glob([]),
    }),
    # Some .c files include other .c files so make them available,
    # but only when compiling the library, not dependents.
    # Also listing private headers here to ensure they are not available
    # when compiling dependents.
    additional_compiler_inputs = glob(["**/*.h"]) + ["dist/src/elfxx.c"] + glob(["**/G*.c"]),
    copts = [
        "-Isrc/third_party/unwind/dist/src",
        "-Isrc/third_party/unwind/dist/include",
        "-fexceptions",
        "-Wno-unused-result",
        "-Wno-pointer-sign",
        "-Wno-incompatible-pointer-types",
        "-Wno-unused-command-line-argument",
        "-Wno-unused-variable",
    ] + select({
        "@platforms//cpu:aarch64": [
            "-Isrc/third_party/unwind/platform/linux_aarch64/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-aarch64",
        ],
        "@platforms//cpu:x86_64": [
            "-Isrc/third_party/unwind/platform/linux_x86_64/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-x86_64",
        ],
        "@platforms//cpu:ppc": [
            "-Isrc/third_party/unwind/platform/linux_ppc64le/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-ppc64",
        ],
        "@platforms//cpu:s390x": [
            "-Isrc/third_party/unwind/platform/linux_s390x/build/include",
            "-Isrc/third_party/unwind/dist/include/tdep-s390x",
        ],
        "//conditions:default": [],
    }) + select({
        "@//bazel/config:compiler_type_clang": [
            "-Wno-header-guard",
            "-Wno-single-bit-bitfield-constant-conversion",
        ],
        "@//bazel/config:compiler_type_gcc": ["-Wno-uninitialized"],
        "//conditions:default": [],
    }) + select({
        ":clang_arm64": [
            "-Wno-absolute-value",
        ],
        "//conditions:default": [],
    }) + select({
        "@//bazel/config:gcc_or_clang": [
            "-Wno-deprecated-volatile",
            "-Wno-implicit-fallthrough",
            "-Wno-strict-aliasing",
            "-Wno-unused-value",
        ],
        "//conditions:default": [],
    }),
    includes = select({
        "@platforms//cpu:aarch64": ["platform/linux_aarch64/install/include"],
        "@platforms//cpu:x86_64": ["platform/linux_x86_64/install/include"],
        "@platforms//cpu:ppc": ["platform/linux_ppc64le/install/include"],
        "@platforms//cpu:s390x": ["platform/linux_s390x/install/include"],
        "//conditions:default": [],
    }),
    local_defines = [
        # Skip autoconf preprocessing.
        "HAVE_CONFIG_H",
        # Grant access to nonstandard gnu c functions, which the dist autoconf build script is also setting.
        "_GNU_SOURCE",
        "__EXTENSIONS__",
    ],
    skip_global_deps = [
        # This is a globally injected dependency.
        # Skip depending on all globally injected dependencies to avoid circular dependencies.
        "allocator",
        "libunwind",
    ],
    target_compatible_with = ["@platforms//os:linux"],
)
