load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")

package(default_visibility = ["//visibility:public"])

# TODO(SERVER-80603): conditionally inject libunwind.

mongo_cc_library(
    name = "tcmalloc_minimal",
    srcs = [
        "dist/src/base/dynamic_annotations.c",
        "dist/src/base/elf_mem_image.cc",
        "dist/src/base/logging.cc",
        "dist/src/base/spinlock.cc",
        "dist/src/base/spinlock_internal.cc",
        "dist/src/base/sysinfo.cc",
        "dist/src/base/vdso_support.cc",
        "dist/src/central_freelist.cc",
        "dist/src/common.cc",
        "dist/src/internal_logging.cc",
        "dist/src/malloc_extension.cc",
        "dist/src/malloc_hook.cc",
        "dist/src/memfs_malloc.cc",
        "dist/src/page_heap.cc",
        "dist/src/sampler.cc",
        "dist/src/span.cc",
        "dist/src/stack_trace_table.cc",
        "dist/src/stacktrace.cc",
        "dist/src/static_vars.cc",
        "dist/src/symbolize.cc",
        "dist/src/thread_cache.cc",
    ] + select({
        "@platforms//os:windows": [
            "dist/src/fake_stacktrace_scope.cc",
            "dist/src/tcmalloc.cc",
            "dist/src/windows/port.cc",
            "dist/src/windows/system-alloc.cc",
        ],
        "//conditions:default": [
            "dist/src/emergency_malloc_for_stacktrace.cc",
            "dist/src/maybe_threads.cc",
            "dist/src/system-alloc.cc",
        ],
    }) + select({
        "@//bazel/config:linux_dbg": ["dist/src/debugallocation.cc"],
        "@platforms//os:linux": ["dist/src/tcmalloc.cc"],
        "//conditions:default": [],
    }),
    hdrs = glob(["**/*.h"]) + [
        # debugallocation.cc sources this as an include.
        "dist/src/tcmalloc.cc",
    ],
    copts = ["-Isrc/third_party/gperftools/dist/src"] + select({
        "@//bazel/config:linux_aarch64": [
            "-Isrc/third_party/gperftools/platform/linux_aarch64/internal/src",
        ],
        "@//bazel/config:linux_x86_64": [
            "-Isrc/third_party/gperftools/platform/linux_x86_64/internal/src",
        ],
        "@//bazel/config:linux_ppc64le": [
            "-Isrc/third_party/gperftools/platform/linux_ppc64le/internal/src",
        ],
        "@//bazel/config:linux_s390x": [
            "-Isrc/third_party/gperftools/platform/linux_s390x/internal/src",
        ],
        "@//bazel/config:windows_x86_64": [
            "-Isrc/third_party/gperftools/platform/windows_x86_64/internal/src",
        ],
        "//conditions:default": [],
    }) + select({
        "@platforms//os:windows": [
            "/W3",
            "/wd4141",
            "/wd4305",
            "/wd4003",
            "/wd4005",
        ],
        "//conditions:default": [
            "-Wno-unused-result",
            "-Wno-deprecated-volatile",
            "-Wno-sign-compare",
            "-Wno-unused-but-set-variable",
        ],
    }),
    features = select({
        "//bazel/config:compiler_type_gcc": ["no_volatile"],
        "//conditions:default": [],
    }),
    includes = select({
        "@//bazel/config:linux_aarch64": [
            "platform/linux_aarch64/include",
        ],
        "@//bazel/config:linux_x86_64": [
            "platform/linux_x86_64/include",
        ],
        "@//bazel/config:linux_ppc64le": [
            "platform/linux_ppc64le/include",
        ],
        "@//bazel/config:linux_s390x": [
            "platform/linux_s390x/include",
        ],
        "@//bazel/config:windows_x86_64": [
            "platform/windows_x86_64/include",
        ],
        "//conditions:default": [],
    }),
    local_defines = [
        "NO_HEAP_CHECK",
    ] + select({
        "@//bazel/config:dbg_enabled": [],
        "//conditions:default": [
            # For debug builds we want to capture stacks during (de)allocations,
            # but we don't want to pay that cost for release builds.
            "NO_TCMALLOC_SAMPLES",
        ],
    }) + select({
        "@platforms//cpu:x86_64": [],
        "//conditions:default": [
            # For debug builds we enable stack capture, but only on
            # intel targets, since tcmalloc's unwinder is very slow on other
            # platforms (see SERVER-28502).
            "NO_TCMALLOC_SAMPLES",
        ],
    }) + select({
        # GCC on PowerPC under C++11 mode does not define __linux which gperftools depends on
        "@platforms//cpu:ppc": ["__linux"],
        "//conditions:default": [],
    }),
    skip_global_deps = [
        # This is a globally injected dependency.
        # Skip depending on all globally injected dependencies to avoid circular dependencies.
        "allocator",
        "libunwind",
    ],
    target_compatible_with = select({
        # Only enable on Windows & Linux, and only when selected.
        "//bazel/config:tcmalloc_gperf_enabled": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
)
