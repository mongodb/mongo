From d611c5cf0a4927efa4e9dc283f749cdfcee33a85 Mon Sep 17 00:00:00 2001
From: Didier Nadeau <didier.nadeau@mongodb.com>
Date: Wed, 11 Dec 2024 20:30:58 +0000
Subject: [PATCH] Build system changes for opentelemetry-cpp

---
 src/third_party/opentelemetry-cpp/dist/BUILD  |   1 +
 .../opentelemetry-cpp/dist/api/BUILD          |  11 +-
 .../dist/exporters/otlp/BUILD                 | 665 ++----------------
 .../otlp/otlp_http_exporter_factory.h         |  27 +-
 .../exporters/otlp/otlp_recordable_utils.h    |  12 -
 .../otlp/src/otlp_recordable_utils.cc         |  68 --
 .../opentelemetry-cpp/dist/ext/BUILD          |   7 +-
 .../dist/ext/src/http/client/curl/BUILD       |  22 +-
 .../opentelemetry-cpp/dist/otel_rules.bzl     |  44 ++
 .../opentelemetry-cpp/dist/sdk/BUILD          |   6 +-
 .../dist/sdk/src/common/BUILD                 |  37 +-
 .../dist/sdk/src/common/platform/BUILD        |  12 +-
 .../dist/sdk/src/resource/BUILD               |  12 +-
 .../dist/sdk/src/trace/BUILD                  |  16 +-
 14 files changed, 184 insertions(+), 756 deletions(-)
 create mode 100644 src/third_party/opentelemetry-cpp/dist/BUILD
 create mode 100644 src/third_party/opentelemetry-cpp/dist/otel_rules.bzl

diff --git a/src/third_party/opentelemetry-cpp/dist/BUILD b/src/third_party/opentelemetry-cpp/dist/BUILD
new file mode 100644
index 00000000000..ffd0fb0cdc5
--- /dev/null
+++ b/src/third_party/opentelemetry-cpp/dist/BUILD
@@ -0,0 +1 @@
+package(default_visibility = ["//visibility:public"])
diff --git a/src/third_party/opentelemetry-cpp/dist/api/BUILD b/src/third_party/opentelemetry-cpp/dist/api/BUILD
index dfc7d3c6450..dbc3b1d452e 100644
--- a/src/third_party/opentelemetry-cpp/dist/api/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/api/BUILD
@@ -1,7 +1,9 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
 load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "int_flag", "string_flag")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_COPTS", "OTEL_TARGET_COMPATIBLE_WITH")
 
 package(default_visibility = ["//visibility:public"])
 
@@ -20,9 +22,10 @@ string_flag(
     values = CPP_STDLIBS,
 )
 
-cc_library(
+mongo_cc_library(
     name = "api",
     hdrs = glob(["include/**/*.h"]),
+    copts = OTEL_COPTS,
     defines = ["HAVE_ABSEIL"] + select({
         ":set_cxx_stdlib_none": [],
         ### automatic selection
@@ -41,10 +44,10 @@ cc_library(
     }),
     strip_include_prefix = "include",
     tags = ["api"],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "@com_google_absl//absl/base",
-        "@com_google_absl//absl/strings",
-        "@com_google_absl//absl/types:variant",
+        "//src/third_party/abseil-cpp:absl_base",
+        "//src/third_party/abseil-cpp:absl_strings",
     ],
 )
 
diff --git a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/BUILD b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/BUILD
index a2dd8f8c650..b3ddd1924b8 100644
--- a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/BUILD
@@ -1,24 +1,21 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
-package(default_visibility = ["//visibility:public"])
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_COPTS", "OTEL_TARGET_COMPATIBLE_WITH")
 
-load("//bazel:otel_cc_benchmark.bzl", "otel_cc_benchmark")
+package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "otlp_recordable",
     srcs = [
         "src/otlp_environment.cc",
-        "src/otlp_log_recordable.cc",
-        "src/otlp_metric_utils.cc",
         "src/otlp_populate_attribute_utils.cc",
         "src/otlp_recordable.cc",
         "src/otlp_recordable_utils.cc",
     ],
     hdrs = [
         "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_log_recordable.h",
-        "include/opentelemetry/exporters/otlp/otlp_metric_utils.h",
         "include/opentelemetry/exporters/otlp/otlp_populate_attribute_utils.h",
         "include/opentelemetry/exporters/otlp/otlp_preferred_temporality.h",
         "include/opentelemetry/exporters/otlp/otlp_recordable.h",
@@ -26,82 +23,21 @@ cc_library(
         "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
         "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
     ],
+    copts = OTEL_COPTS,
     strip_include_prefix = "include",
     tags = ["otlp"],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//sdk/src/logs",
-        "//sdk/src/resource",
-        "//sdk/src/trace",
-        "@com_github_opentelemetry_proto//:logs_service_proto_cc",
-        "@com_github_opentelemetry_proto//:metrics_service_proto_cc",
-        "@com_github_opentelemetry_proto//:trace_service_proto_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_grpc_client",
-    srcs = [
-        "src/otlp_grpc_client.cc",
-        "src/otlp_grpc_utils.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_client.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_client_options.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_utils.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_grpc",
-    ],
-    deps = [
-        "//ext:headers",
-        "//sdk/src/common:global_log_handler",
-        "@com_github_grpc_grpc//:grpc++",
-        "@com_github_opentelemetry_proto//:common_proto_cc",
-        "@com_github_opentelemetry_proto//:logs_service_grpc_cc",
-        "@com_github_opentelemetry_proto//:metrics_service_grpc_cc",
-        "@com_github_opentelemetry_proto//:trace_service_grpc_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_grpc_exporter",
-    srcs = [
-        "src/otlp_grpc_exporter.cc",
-        "src/otlp_grpc_exporter_factory.cc",
-        "src/otlp_grpc_exporter_options.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_client_options.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_exporter.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_exporter_factory.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_exporter_options.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_utils.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_grpc",
-    ],
-    deps = [
-        ":otlp_recordable",
-        ":otlp_grpc_client",
-        "//ext:headers",
-        "//sdk/src/trace",
-
-        # For gRPC
-        "@com_github_opentelemetry_proto//:trace_service_grpc_cc",
+        "//src/third_party/opentelemetry-cpp/sdk/src/resource",
+        "//src/third_party/opentelemetry-cpp/sdk/src/trace",
+        "//src/third_party/opentelemetry-proto:common_proto_cc",
+        "//src/third_party/opentelemetry-proto:resource_proto_cc",
+        "//src/third_party/opentelemetry-proto:trace_proto_cc",
+        "//src/third_party/opentelemetry-proto:trace_service_proto_cc",
     ],
 )
 
-cc_library(
+mongo_cc_library(
     name = "otlp_http_client",
     srcs = [
         "src/otlp_http.cc",
@@ -116,9 +52,9 @@ cc_library(
     ],
     copts = [
         "-DCURL_STATICLIB",
-    ],
+    ] + OTEL_COPTS,
     linkopts = select({
-        "//bazel:windows": [
+        "@platforms//os:windows": [
             "-DEFAULTLIB:advapi32.lib",
             "-DEFAULTLIB:crypt32.lib",
         ],
@@ -128,20 +64,20 @@ cc_library(
     tags = [
         "otlp",
         "otlp_http",
-        "otlp_http_log",
     ],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//ext/src/http/client/curl:http_client_curl",
-        "//sdk:headers",
-        "//sdk/src/common:base64",
-        "@com_github_opentelemetry_proto//:common_proto_cc",
-        "@com_google_absl//absl/strings",
-        "@github_nlohmann_json//:json",
+        "//src/third_party/abseil-cpp:absl_strings",
+        "//src/third_party/nlohmann-json:json",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/ext/src/http/client/curl:http_client_curl",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common:base64",
+        "//src/third_party/opentelemetry-proto:common_proto_cc",
     ],
 )
 
-cc_library(
+mongo_cc_library(
     name = "otlp_http_exporter",
     srcs = [
         "src/otlp_http_exporter.cc",
@@ -156,20 +92,25 @@ cc_library(
         "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
         "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
     ],
+    copts = OTEL_COPTS,
     strip_include_prefix = "include",
     tags = [
         "otlp",
         "otlp_http",
     ],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
         ":otlp_http_client",
         ":otlp_recordable",
-        "//sdk/src/trace",
-        "@com_github_opentelemetry_proto//:trace_service_proto_cc",
+        "//src/third_party/opentelemetry-cpp/sdk/src/trace",
+        "//src/third_party/opentelemetry-proto:common_proto_cc",
+        "//src/third_party/opentelemetry-proto:resource_proto_cc",
+        "//src/third_party/opentelemetry-proto:trace_proto_cc",
+        "//src/third_party/opentelemetry-proto:trace_service_proto_cc",
     ],
 )
 
-cc_library(
+mongo_cc_library(
     name = "otlp_file_client",
     srcs = [
         "src/otlp_file_client.cc",
@@ -181,22 +122,24 @@ cc_library(
         "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
         "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
     ],
+    copts = OTEL_COPTS,
     strip_include_prefix = "include",
     tags = [
         "otlp",
         "otlp_file",
     ],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//sdk:headers",
-        "//sdk/src/common:base64",
-        "@com_github_opentelemetry_proto//:common_proto_cc",
-        "@com_google_absl//absl/strings",
-        "@github_nlohmann_json//:json",
+        "//src/third_party/abseil-cpp:absl_strings",
+        "//src/third_party/nlohmann-json:json",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common:base64",
+        "//src/third_party/opentelemetry-proto:common_proto_cc",
     ],
 )
 
-cc_library(
+mongo_cc_library(
     name = "otlp_file_exporter",
     srcs = [
         "src/otlp_file_exporter.cc",
@@ -211,532 +154,20 @@ cc_library(
         "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
         "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
     ],
+    copts = OTEL_COPTS,
     strip_include_prefix = "include",
     tags = [
         "otlp",
         "otlp_file",
     ],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
         ":otlp_file_client",
         ":otlp_recordable",
-        "//sdk/src/trace",
-        "@com_github_opentelemetry_proto//:trace_service_proto_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_grpc_metric_exporter",
-    srcs = [
-        "src/otlp_grpc_metric_exporter.cc",
-        "src/otlp_grpc_metric_exporter_factory.cc",
-        "src/otlp_grpc_metric_exporter_options.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_client_options.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_metric_exporter.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_factory.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_options.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_grpc_metric",
-    ],
-    deps = [
-        ":otlp_recordable",
-        ":otlp_grpc_client",
-        "//ext:headers",
-        "//sdk/src/metrics",
-
-        # For gRPC
-        "@com_github_opentelemetry_proto//:metrics_service_grpc_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_http_metric_exporter",
-    srcs = [
-        "src/otlp_http_metric_exporter.cc",
-        "src/otlp_http_metric_exporter_factory.cc",
-        "src/otlp_http_metric_exporter_options.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_http_metric_exporter.h",
-        "include/opentelemetry/exporters/otlp/otlp_http_metric_exporter_factory.h",
-        "include/opentelemetry/exporters/otlp/otlp_http_metric_exporter_options.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_http_metric",
-    ],
-    deps = [
-        ":otlp_http_client",
-        ":otlp_recordable",
-        "//sdk/src/metrics",
-        "@com_github_opentelemetry_proto//:metrics_service_proto_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_file_metric_exporter",
-    srcs = [
-        "src/otlp_file_metric_exporter.cc",
-        "src/otlp_file_metric_exporter_factory.cc",
-        "src/otlp_file_metric_exporter_options.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_file_metric_exporter.h",
-        "include/opentelemetry/exporters/otlp/otlp_file_metric_exporter_factory.h",
-        "include/opentelemetry/exporters/otlp/otlp_file_metric_exporter_options.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_file_metric",
-    ],
-    deps = [
-        ":otlp_file_client",
-        ":otlp_recordable",
-        "//sdk/src/metrics",
-        "@com_github_opentelemetry_proto//:metrics_service_proto_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_http_log_record_exporter",
-    srcs = [
-        "src/otlp_http_log_record_exporter.cc",
-        "src/otlp_http_log_record_exporter_factory.cc",
-        "src/otlp_http_log_record_exporter_options.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_http_log_record_exporter.h",
-        "include/opentelemetry/exporters/otlp/otlp_http_log_record_exporter_factory.h",
-        "include/opentelemetry/exporters/otlp/otlp_http_log_record_exporter_options.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_http_log",
-    ],
-    deps = [
-        ":otlp_http_client",
-        ":otlp_recordable",
-        "//sdk/src/logs",
-        "@com_github_opentelemetry_proto//:logs_service_proto_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_file_log_record_exporter",
-    srcs = [
-        "src/otlp_file_log_record_exporter.cc",
-        "src/otlp_file_log_record_exporter_factory.cc",
-        "src/otlp_file_log_record_exporter_options.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_file_log_record_exporter.h",
-        "include/opentelemetry/exporters/otlp/otlp_file_log_record_exporter_factory.h",
-        "include/opentelemetry/exporters/otlp/otlp_file_log_record_exporter_options.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_file_log",
-    ],
-    deps = [
-        ":otlp_file_client",
-        ":otlp_recordable",
-        "//sdk/src/logs",
-        "@com_github_opentelemetry_proto//:logs_service_proto_cc",
-    ],
-)
-
-cc_library(
-    name = "otlp_grpc_log_record_exporter",
-    srcs = [
-        "src/otlp_grpc_log_record_exporter.cc",
-        "src/otlp_grpc_log_record_exporter_factory.cc",
-        "src/otlp_grpc_log_record_exporter_options.cc",
-    ],
-    hdrs = [
-        "include/opentelemetry/exporters/otlp/otlp_environment.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_client_options.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_factory.h",
-        "include/opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_options.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_prefix.h",
-        "include/opentelemetry/exporters/otlp/protobuf_include_suffix.h",
-    ],
-    strip_include_prefix = "include",
-    tags = [
-        "otlp",
-        "otlp_grpc_log",
-    ],
-    deps = [
-        ":otlp_recordable",
-        ":otlp_grpc_client",
-        "//ext:headers",
-        "//sdk/src/logs",
-        # For gRPC
-        "@com_github_opentelemetry_proto//:logs_service_grpc_cc",
-    ],
-)
-
-cc_test(
-    name = "otlp_recordable_test",
-    srcs = ["test/otlp_recordable_test.cc"],
-    tags = [
-        "otlp",
-        "test",
-    ],
-    deps = [
-        ":otlp_recordable",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_log_recordable_test",
-    srcs = [
-        "test/otlp_log_recordable_test.cc",
-        "test/otlp_metrics_serialization_test.cc",
-    ],
-    tags = [
-        "otlp",
-        "test",
-    ],
-    deps = [
-        ":otlp_recordable",
-        "@com_github_opentelemetry_proto//:logs_service_proto_cc",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_file_client_test",
-    srcs = ["test/otlp_file_client_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_file",
-        "test",
-    ],
-    deps = [
-        ":otlp_file_client",
-        ":otlp_file_exporter",
-        ":otlp_recordable",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_grpc_exporter_test",
-    srcs = ["test/otlp_grpc_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_grpc",
-        "test",
-    ],
-    deps = [
-        ":otlp_grpc_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_grpc_exporter_factory_test",
-    srcs = ["test/otlp_grpc_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_grpc",
-        "test",
-    ],
-    deps = [
-        ":otlp_grpc_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_http_exporter_test",
-    srcs = ["test/otlp_http_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_http",
-        "test",
-    ],
-    deps = [
-        ":otlp_http_exporter",
-        "//api",
-        "//test_common/src/http/client/nosend:http_client_nosend",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_http_exporter_factory_test",
-    srcs = ["test/otlp_http_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_http",
-        "test",
-    ],
-    deps = [
-        ":otlp_http_exporter",
-        "//api",
-        "//test_common/src/http/client/nosend:http_client_nosend",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_file_exporter_test",
-    srcs = ["test/otlp_file_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_file",
-        "test",
-    ],
-    deps = [
-        ":otlp_file_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_file_exporter_factory_test",
-    srcs = ["test/otlp_file_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_file",
-        "test",
-    ],
-    deps = [
-        ":otlp_file_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_http_log_record_exporter_test",
-    srcs = ["test/otlp_http_log_record_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_http_log",
-        "test",
-    ],
-    deps = [
-        ":otlp_http_log_record_exporter",
-        "//api",
-        "//test_common/src/http/client/nosend:http_client_nosend",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_http_log_record_exporter_factory_test",
-    srcs = ["test/otlp_http_log_record_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_http_log",
-        "test",
-    ],
-    deps = [
-        ":otlp_http_log_record_exporter",
-        "//api",
-        "//test_common/src/http/client/nosend:http_client_nosend",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_file_log_record_exporter_test",
-    srcs = ["test/otlp_file_log_record_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_file_log",
-        "test",
-    ],
-    deps = [
-        ":otlp_file_log_record_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_file_log_record_exporter_factory_test",
-    srcs = ["test/otlp_file_log_record_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_file_log",
-        "test",
-    ],
-    deps = [
-        ":otlp_file_log_record_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_grpc_log_record_exporter_test",
-    srcs = ["test/otlp_grpc_log_record_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_grpc_log",
-        "test",
-    ],
-    deps = [
-        ":otlp_grpc_exporter",
-        ":otlp_grpc_log_record_exporter",
-        "//api",
-        "//sdk/src/logs",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_grpc_log_record_exporter_factory_test",
-    srcs = ["test/otlp_grpc_log_record_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_grpc_log",
-        "test",
-    ],
-    deps = [
-        ":otlp_grpc_log_record_exporter",
-        "//api",
-        "//sdk/src/logs",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_grpc_metric_exporter_test",
-    srcs = ["test/otlp_grpc_metric_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_grpc_metric",
-        "test",
-    ],
-    deps = [
-        ":otlp_grpc_metric_exporter",
-        "//api",
-        "//sdk/src/metrics",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_grpc_metric_exporter_factory_test",
-    srcs = ["test/otlp_grpc_metric_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_grpc_metric",
-        "test",
-    ],
-    deps = [
-        ":otlp_grpc_metric_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_http_metric_exporter_test",
-    srcs = ["test/otlp_http_metric_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_http_metric",
-        "test",
-    ],
-    deps = [
-        ":otlp_http_metric_exporter",
-        "//api",
-        "//test_common/src/http/client/nosend:http_client_nosend",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_http_metric_exporter_factory_test",
-    srcs = ["test/otlp_http_metric_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_http_metric",
-        "test",
-    ],
-    deps = [
-        ":otlp_http_metric_exporter",
-        "//api",
-        "//test_common/src/http/client/nosend:http_client_nosend",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_file_metric_exporter_test",
-    srcs = ["test/otlp_file_metric_exporter_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_file_metric",
-        "test",
-    ],
-    deps = [
-        ":otlp_file_metric_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-cc_test(
-    name = "otlp_file_metric_exporter_factory_test",
-    srcs = ["test/otlp_file_metric_exporter_factory_test.cc"],
-    tags = [
-        "otlp",
-        "otlp_file_metric",
-        "test",
-    ],
-    deps = [
-        ":otlp_file_metric_exporter",
-        "//api",
-        "@com_google_googletest//:gtest_main",
-    ],
-)
-
-otel_cc_benchmark(
-    name = "otlp_grpc_exporter_benchmark",
-    srcs = ["test/otlp_grpc_exporter_benchmark.cc"],
-    tags = [
-        "benchmark",
-        "otlp",
-        "otlp_grpc",
-        "test",
-    ],
-    deps = [
-        ":otlp_grpc_exporter",
-        "//examples/common/foo_library:common_foo_library",
+        "//src/third_party/opentelemetry-cpp/sdk/src/trace",
+        "//src/third_party/opentelemetry-proto:common_proto_cc",
+        "//src/third_party/opentelemetry-proto:resource_proto_cc",
+        "//src/third_party/opentelemetry-proto:trace_proto_cc",
+        "//src/third_party/opentelemetry-proto:trace_service_proto_cc",
     ],
 )
diff --git a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_http_exporter_factory.h b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_http_exporter_factory.h
index 9e072a05343..70eed9df9e2 100644
--- a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_http_exporter_factory.h
+++ b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_http_exporter_factory.h
@@ -10,27 +10,24 @@
 #include "opentelemetry/version.h"
 
 OPENTELEMETRY_BEGIN_NAMESPACE
-namespace exporter
-{
-namespace otlp
-{
+namespace exporter {
+namespace otlp {
 
 /**
  * Factory class for OtlpHttpExporter.
  */
-class OPENTELEMETRY_EXPORT OtlpHttpExporterFactory
-{
+class OPENTELEMETRY_EXPORT OtlpHttpExporterFactory {
 public:
-  /**
-   * Create an OtlpHttpExporter using all default options.
-   */
-  static std::unique_ptr<opentelemetry::sdk::trace::SpanExporter> Create();
+    /**
+     * Create an OtlpHttpExporter using all default options.
+     */
+    static std::unique_ptr<opentelemetry::sdk::trace::SpanExporter> Create();
 
-  /**
-   * Create an OtlpHttpExporter using the given options.
-   */
-  static std::unique_ptr<opentelemetry::sdk::trace::SpanExporter> Create(
-      const OtlpHttpExporterOptions &options);
+    /**
+     * Create an OtlpHttpExporter using the given options.
+     */
+    static std::unique_ptr<opentelemetry::sdk::trace::SpanExporter> Create(
+        const OtlpHttpExporterOptions& options);
 };
 
 }  // namespace otlp
diff --git a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_recordable_utils.h b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_recordable_utils.h
index 0651abc2b9f..3123c45b244 100644
--- a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_recordable_utils.h
+++ b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/include/opentelemetry/exporters/otlp/otlp_recordable_utils.h
@@ -6,7 +6,6 @@
 #include <memory>
 
 #include "opentelemetry/nostd/span.h"
-#include "opentelemetry/sdk/logs/recordable.h"
 #include "opentelemetry/sdk/trace/recordable.h"
 #include "opentelemetry/version.h"
 
@@ -17,13 +16,6 @@ namespace proto
 namespace collector
 {
 
-namespace logs
-{
-namespace v1
-{
-class ExportLogsServiceRequest;
-}
-}  // namespace logs
 namespace trace
 {
 namespace v1
@@ -50,10 +42,6 @@ public:
   static void PopulateRequest(
       const nostd::span<std::unique_ptr<opentelemetry::sdk::trace::Recordable>> &spans,
       proto::collector::trace::v1::ExportTraceServiceRequest *request) noexcept;
-
-  static void PopulateRequest(
-      const nostd::span<std::unique_ptr<opentelemetry::sdk::logs::Recordable>> &logs,
-      proto::collector::logs::v1::ExportLogsServiceRequest *request) noexcept;
 };
 }  // namespace otlp
 }  // namespace exporter
diff --git a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/src/otlp_recordable_utils.cc b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/src/otlp_recordable_utils.cc
index df29cca8387..b95a5d970c2 100644
--- a/src/third_party/opentelemetry-cpp/dist/exporters/otlp/src/otlp_recordable_utils.cc
+++ b/src/third_party/opentelemetry-cpp/dist/exporters/otlp/src/otlp_recordable_utils.cc
@@ -9,24 +9,20 @@
 #include <utility>
 #include <vector>
 
-#include "opentelemetry/exporters/otlp/otlp_log_recordable.h"
 #include "opentelemetry/exporters/otlp/otlp_populate_attribute_utils.h"
 #include "opentelemetry/exporters/otlp/otlp_recordable.h"
 #include "opentelemetry/exporters/otlp/otlp_recordable_utils.h"
 #include "opentelemetry/nostd/span.h"
 #include "opentelemetry/sdk/common/attribute_utils.h"
 #include "opentelemetry/sdk/instrumentationscope/instrumentation_scope.h"
-#include "opentelemetry/sdk/logs/recordable.h"
 #include "opentelemetry/sdk/resource/resource.h"
 #include "opentelemetry/sdk/trace/recordable.h"
 #include "opentelemetry/version.h"
 
 // clang-format off
 #include "opentelemetry/exporters/otlp/protobuf_include_prefix.h"  // IWYU pragma: keep
-#include "opentelemetry/proto/collector/logs/v1/logs_service.pb.h"
 #include "opentelemetry/proto/collector/trace/v1/trace_service.pb.h"
 #include "opentelemetry/proto/common/v1/common.pb.h"
-#include "opentelemetry/proto/logs/v1/logs.pb.h"
 #include "opentelemetry/proto/resource/v1/resource.pb.h"
 #include "opentelemetry/proto/trace/v1/trace.pb.h"
 #include "opentelemetry/exporters/otlp/protobuf_include_suffix.h"  // IWYU pragma: keep
@@ -120,70 +116,6 @@ void OtlpRecordableUtils::PopulateRequest(
   }
 }
 
-void OtlpRecordableUtils::PopulateRequest(
-    const opentelemetry::nostd::span<std::unique_ptr<opentelemetry::sdk::logs::Recordable>> &logs,
-    proto::collector::logs::v1::ExportLogsServiceRequest *request) noexcept
-{
-  if (nullptr == request)
-  {
-    return;
-  }
-
-  using logs_index_by_instrumentation_type =
-      std::unordered_map<const opentelemetry::sdk::instrumentationscope::InstrumentationScope *,
-                         std::list<std::unique_ptr<OtlpLogRecordable>>,
-                         InstrumentationScopePointerHasher, InstrumentationScopePointerEqual>;
-  std::unordered_map<const opentelemetry::sdk::resource::Resource *,
-                     logs_index_by_instrumentation_type>
-      logs_index_by_resource;
-
-  for (auto &recordable : logs)
-  {
-    auto rec =
-        std::unique_ptr<OtlpLogRecordable>(static_cast<OtlpLogRecordable *>(recordable.release()));
-    auto instrumentation = &rec->GetInstrumentationScope();
-    auto resource        = &rec->GetResource();
-
-    logs_index_by_resource[resource][instrumentation].emplace_back(std::move(rec));
-  }
-
-  for (auto &input_resource_log : logs_index_by_resource)
-  {
-    auto output_resource_log = request->add_resource_logs();
-    for (auto &input_scope_log : input_resource_log.second)
-    {
-      auto output_scope_log = output_resource_log->add_scope_logs();
-      for (auto &input_log_record : input_scope_log.second)
-      {
-        if (!output_resource_log->has_resource())
-        {
-          OtlpPopulateAttributeUtils::PopulateAttribute(output_resource_log->mutable_resource(),
-                                                        *input_resource_log.first);
-          output_resource_log->set_schema_url(input_resource_log.first->GetSchemaURL());
-        }
-
-        if (!output_scope_log->has_scope())
-        {
-          auto proto_scope = output_scope_log->mutable_scope();
-          if (proto_scope != nullptr)
-          {
-            proto_scope->set_name(input_scope_log.first->GetName());
-            proto_scope->set_version(input_scope_log.first->GetVersion());
-
-            for (auto &scope_attribute : input_scope_log.first->GetAttributes())
-            {
-              OtlpPopulateAttributeUtils::PopulateAttribute(
-                  proto_scope->add_attributes(), scope_attribute.first, scope_attribute.second);
-            }
-          }
-          output_scope_log->set_schema_url(input_scope_log.first->GetSchemaURL());
-        }
-
-        *output_scope_log->add_log_records() = std::move(input_log_record->log_record());
-      }
-    }
-  }
-}
 }  // namespace otlp
 }  // namespace exporter
 OPENTELEMETRY_END_NAMESPACE
diff --git a/src/third_party/opentelemetry-cpp/dist/ext/BUILD b/src/third_party/opentelemetry-cpp/dist/ext/BUILD
index b19ae921e56..e7044669725 100644
--- a/src/third_party/opentelemetry-cpp/dist/ext/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/ext/BUILD
@@ -1,10 +1,15 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_COPTS", "OTEL_TARGET_COMPATIBLE_WITH")
+
 package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "headers",
     hdrs = glob(["include/**/*.h"]),
+    copts = OTEL_COPTS,
     strip_include_prefix = "include",
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
 )
diff --git a/src/third_party/opentelemetry-cpp/dist/ext/src/http/client/curl/BUILD b/src/third_party/opentelemetry-cpp/dist/ext/src/http/client/curl/BUILD
index de5a5aeb2cd..cf8d6827c11 100644
--- a/src/third_party/opentelemetry-cpp/dist/ext/src/http/client/curl/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/ext/src/http/client/curl/BUILD
@@ -1,9 +1,12 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_COPTS", "OTEL_TARGET_COMPATIBLE_WITH")
+
 package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "http_client_curl",
     srcs = [
         "http_client_curl.cc",
@@ -12,10 +15,10 @@ cc_library(
     ],
     copts = [
         "-DWITH_CURL",
-    ],
+    ] + OTEL_COPTS,
     include_prefix = "src/http/client/curl",
     linkopts = select({
-        "//bazel:windows": [
+        "@platforms//os:windows": [
             "-DEFAULTLIB:advapi32.lib",
             "-DEFAULTLIB:crypt32.lib",
             "-DEFAULTLIB:Normaliz.lib",
@@ -23,12 +26,13 @@ cc_library(
         ],
         "//conditions:default": [],
     }),
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//ext:headers",
-        "//sdk:headers",
-        "//sdk/src/common:random",
-        "@curl",
-        "@zlib",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/ext:headers",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common:random",
+        # "//src/third_party/opentelemetry-cpp:curl",
+        "//src/third_party/zlib",
     ],
 )
diff --git a/src/third_party/opentelemetry-cpp/dist/otel_rules.bzl b/src/third_party/opentelemetry-cpp/dist/otel_rules.bzl
new file mode 100644
index 00000000000..7eed9aed421
--- /dev/null
+++ b/src/third_party/opentelemetry-cpp/dist/otel_rules.bzl
@@ -0,0 +1,44 @@
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library", "mongo_cc_proto_library")
+
+OTEL_COPTS = [
+    "-D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING",
+] + select({
+    "//bazel/config:gcc_or_clang": [
+        "-Wno-sign-compare",
+        "-Wno-comment",
+        "-Wno-implicit-fallthrough",
+        "-Wno-unused-result",
+    ],
+    "//conditions:default": [],
+}) + select({
+    "//bazel/config:compiler_type_gcc": [
+        "-Wno-stringop-overread",  # false positive: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98465#c30
+        "-Wno-stringop-overflow",
+        "-Wno-attributes",
+        #"-Wno-class-memaccess",
+        #"-Wno-overloaded-virtual",
+        "-Wno-error",
+    ],
+    "//bazel/config:compiler_type_msvc": [
+        "/wd4334",  # '<<': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
+        "/wd4116",  # unnamed type definition in parentheses
+        "/wd4146",  # unary minus operator applied to unsigned type, result still unsigned
+        "/wd4715",  # not all control paths return a value
+        "/wd4200",  # nonstandard extension used: zero-sized array in struct/union
+        "/wd4312",  # 'reinterpret_cast': conversion from 'unsigned int' to 'void *' of greater size
+        "/wd4090",  # 'function': different 'const' qualifiers
+    ],
+    "//conditions:default": [],
+})
+
+OTEL_TARGET_COMPATIBLE_WITH = select({
+    "//bazel/config:build_otel_enabled": [],
+    "//conditions:default": ["@platforms//:incompatible"],
+})
+
+def mongo_cc_proto_lib(name, deps):
+    proto_cc_name = name + "_raw_proto"
+    mongo_cc_proto_library(name = proto_cc_name, deps = deps)
+
+    cc_dep = ":" + proto_cc_name
+    mongo_cc_library(name = name, cc_deps = [cc_dep], copts = OTEL_COPTS, target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH)
diff --git a/src/third_party/opentelemetry-cpp/dist/sdk/BUILD b/src/third_party/opentelemetry-cpp/dist/sdk/BUILD
index b19ae921e56..bdeaaba3b7c 100644
--- a/src/third_party/opentelemetry-cpp/dist/sdk/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/sdk/BUILD
@@ -1,10 +1,14 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_TARGET_COMPATIBLE_WITH")
+
 package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "headers",
     hdrs = glob(["include/**/*.h"]),
     strip_include_prefix = "include",
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
 )
diff --git a/src/third_party/opentelemetry-cpp/dist/sdk/src/common/BUILD b/src/third_party/opentelemetry-cpp/dist/sdk/src/common/BUILD
index 9c424cac6b4..12ecccff412 100644
--- a/src/third_party/opentelemetry-cpp/dist/sdk/src/common/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/sdk/src/common/BUILD
@@ -1,9 +1,12 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_TARGET_COMPATIBLE_WITH")
+
 package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "random",
     srcs = [
         "random.cc",
@@ -13,45 +16,49 @@ cc_library(
         "random.h",
     ],
     include_prefix = "src/common",
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//sdk:headers",
-        "//sdk/src/common/platform:fork",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common/platform:fork",
     ],
 )
 
-cc_library(
+mongo_cc_library(
     name = "base64",
     srcs = [
         "base64.cc",
     ],
     include_prefix = "src/common",
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//sdk:headers",
-        "//sdk/src/common/platform:fork",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common/platform:fork",
     ],
 )
 
-cc_library(
+mongo_cc_library(
     name = "env_variables",
     srcs = [
         "env_variables.cc",
     ],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//sdk:headers",
-        "//sdk/src/common:global_log_handler",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common:global_log_handler",
     ],
 )
 
-cc_library(
+mongo_cc_library(
     name = "global_log_handler",
     srcs = [
         "global_log_handler.cc",
     ],
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//sdk:headers",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
     ],
 )
diff --git a/src/third_party/opentelemetry-cpp/dist/sdk/src/common/platform/BUILD b/src/third_party/opentelemetry-cpp/dist/sdk/src/common/platform/BUILD
index f089ebf7182..b81a8399025 100644
--- a/src/third_party/opentelemetry-cpp/dist/sdk/src/common/platform/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/sdk/src/common/platform/BUILD
@@ -1,12 +1,15 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_TARGET_COMPATIBLE_WITH")
+
 package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "fork",
     srcs = select({
-        "//bazel:windows": ["fork_windows.cc"],
+        "@platforms//os:windows": ["fork_windows.cc"],
         "//conditions:default": ["fork_unix.cc"],
     }),
     hdrs = [
@@ -14,10 +17,11 @@ cc_library(
     ],
     include_prefix = "src/common/platform",
     linkopts = select({
-        "//bazel:windows": [],
+        "@platforms//os:windows": [],
         "//conditions:default": ["-pthread"],
     }),
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
+        "//src/third_party/opentelemetry-cpp/api",
     ],
 )
diff --git a/src/third_party/opentelemetry-cpp/dist/sdk/src/resource/BUILD b/src/third_party/opentelemetry-cpp/dist/sdk/src/resource/BUILD
index 6cff52723ad..5a4979409bc 100644
--- a/src/third_party/opentelemetry-cpp/dist/sdk/src/resource/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/sdk/src/resource/BUILD
@@ -1,16 +1,20 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_TARGET_COMPATIBLE_WITH")
+
 package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "resource",
     srcs = glob(["**/*.cc"]),
     hdrs = glob(["**/*.h"]),
     include_prefix = "src/resource",
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//sdk:headers",
-        "//sdk/src/common:env_variables",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common:env_variables",
     ],
 )
diff --git a/src/third_party/opentelemetry-cpp/dist/sdk/src/trace/BUILD b/src/third_party/opentelemetry-cpp/dist/sdk/src/trace/BUILD
index df99eb1520d..9672332a222 100644
--- a/src/third_party/opentelemetry-cpp/dist/sdk/src/trace/BUILD
+++ b/src/third_party/opentelemetry-cpp/dist/sdk/src/trace/BUILD
@@ -1,18 +1,22 @@
 # Copyright The OpenTelemetry Authors
 # SPDX-License-Identifier: Apache-2.0
 
+load("//bazel:mongo_src_rules.bzl", "mongo_cc_library")
+load("//src/third_party/opentelemetry-cpp:otel_rules.bzl", "OTEL_TARGET_COMPATIBLE_WITH")
+
 package(default_visibility = ["//visibility:public"])
 
-cc_library(
+mongo_cc_library(
     name = "trace",
     srcs = glob(["**/*.cc"]),
     hdrs = glob(["**/*.h"]),
     include_prefix = "src/trace",
+    target_compatible_with = OTEL_TARGET_COMPATIBLE_WITH,
     deps = [
-        "//api",
-        "//sdk:headers",
-        "//sdk/src/common:global_log_handler",
-        "//sdk/src/common:random",
-        "//sdk/src/resource",
+        "//src/third_party/opentelemetry-cpp/api",
+        "//src/third_party/opentelemetry-cpp/sdk:headers",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common:global_log_handler",
+        "//src/third_party/opentelemetry-cpp/sdk/src/common:random",
+        "//src/third_party/opentelemetry-cpp/sdk/src/resource",
     ],
 )
-- 
2.34.1

