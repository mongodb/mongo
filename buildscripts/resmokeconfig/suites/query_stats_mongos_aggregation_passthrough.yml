test_kind: js_test
description: |
  This suite enables the collection of query stats metrics on a mongos server, then runs the tests in
  core and aggregation as normal. This should cause each aggregation to compute a query
  shape and query stats key, and record in-memory some metrics like execution time and number of
  scanned documents. Then it uses the 'RunQueryStats' hook to collect the query stats at the end of
  each test, once with HMAC application enabled and once without. It doesn't assert anything about
  the collected query stats, it is just meant to make sure nothing is going seriously awry (e.g.
  crashing).

selector:
  roots:
    - jstests/aggregation/**/*.js
  exclude_files:
    - jstests/aggregation/extras/*.js
    - jstests/aggregation/data/*.js
    # TODO: Remove when SERVER-23229 is fixed.
    - jstests/aggregation/sources/group/groupMissing.js
    # Mongos does not support runtimeConstants.
    - jstests/aggregation/accumulators/internal_js_reduce_with_scope.js
    - jstests/aggregation/expressions/internal_js_emit_with_scope.js
    # Based on SERVER-81917
    - jstests/aggregation/exec/query_limits_test.js
    # $unionWith explain output does not check whether the collection is sharded in a sharded
    # cluster.
    - jstests/aggregation/sources/unionWith/unionWith_explain.js
    # TODO SERVER-96515 Re-enable this test.
    - jstests/aggregation/expressions/expression_set_field_null_chars.js
  exclude_with_any_tags:
    # The following tests start their own ShardingTest or ReplSetTest, respectively.
    - requires_sharding
    - requires_replication
    - assumes_standalone_mongod
    - assumes_against_mongod_not_mongos
    # system.profile collection doesn't exist on mongos.
    - requires_profiling
    # Running $queryStats will increment these counters which can screw up some test assertions.
    - inspects_command_opcounters
    - known_query_shape_computation_problem
    - requires_2_or_more_shards
    # These tests run many aggregations, and the override slows them down enough to hit the evergreen timeout.
    - query_intensive_pbt
executor:
  archive:
    hooks:
      - ValidateCollections
  hooks:
    # Be sure to run the hooks which depend on the fixture being alive before the CleanEveryN hook.
    # That way the fixture restart can't cause any trouble for the other hooks.
    - class: RunQueryStats
    - class: ValidateCollections
    - class: CleanEveryN
      n: 20
  fixture:
    class: ShardedClusterFixture
    mongos_options:
      set_parameters:
        enableTestCommands: 1
        internalQueryStatsRateLimit: -1
        internalQueryStatsErrorsAreCommandFatal: true
    mongod_options:
      set_parameters:
        enableTestCommands: 1
    num_rs_nodes_per_shard: 1
