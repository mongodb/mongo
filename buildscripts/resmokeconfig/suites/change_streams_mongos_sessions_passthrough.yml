test_kind: js_test

selector:
  roots:
    - jstests/change_streams/**/*.js
  exclude_files:
    # This test creates a collection (and index) inside a transaction. Even though the collections are
    # unsharded this suite enables sharding in the test database which makes transactions against
    # it distributed. This causes the following tests to fail since creating a collection in a
    # distributed transaction is not allowed.
    - jstests/change_streams/ddl_create_index_txn.js
  exclude_with_any_tags:
    ##
    # The next tags correspond to the special errors thrown by the
    # set_read_and_write_concerns.js override when it refuses to replace the readConcern or
    # writeConcern of a particular command. Above each tag are the message(s) that cause the tag to be
    # warranted.
    ##
    # "Cowardly refusing to override write concern of command: ..."
    - assumes_write_concern_unchanged
    # Exclude any that assume sharding is disabled
    - assumes_against_mongod_not_mongos

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckMetadataConsistencyInBackground
      - ValidateCollections
  config:
    shell_options:
      global_vars:
        TestData:
          defaultReadConcernLevel: null
      # Enable causal consistency for change streams suites using 1 node replica sets. See
      # change_streams.yml for detailed explanation.
      eval: >-
        globalThis.testingReplication = true;
        await import('jstests/libs/override_methods/set_read_and_write_concerns.js');
        await import('jstests/libs/override_methods/enable_sessions.js');
        await import('jstests/libs/override_methods/enable_causal_consistency_without_read_pref.js');
      # Set longer host discovery time to handle change stream resumable errors.
      setShellParameter: defaultFindReplicaSetHostTimeoutMS=120000
  hooks:
    - class: CheckReplDBHash
    - class: CheckMetadataConsistencyInBackground
    - class: RunQueryStats
    - class: ValidateCollections
    - class: CheckOrphansDeleted
    - class: CleanEveryN
      n: 20
  fixture:
    class: ShardedClusterFixture
    # Use two shards to make sure we will only talk to the primary shard for the database and will
    # not delay changes to wait for notifications or a clock advancement from other shards.
    num_shards: 2
    mongos_options:
      bind_ip_all: ""
      set_parameters:
        enableTestCommands: 1
    mongod_options:
      bind_ip_all: ""
      set_parameters:
        enableTestCommands: 1
        periodicNoopIntervalSecs: 1
        writePeriodicNoops: true
