test_kind: multi_stmt_txn_passthrough

selector:
  roots:
    - jstests/core/**/*.js
    - jstests/core_sharding/**/*.js
  exclude_files:
    # These tests already run with transactions.
    - jstests/core/txns/**/*.js

    # The following tests fail because a certain command or functionality is not supported on
    # mongos. This command or functionality is placed in a comment next to the failing test.
    - jstests/core/**/apitest_db.js # serverStatus output doesn't have storageEngine.
    - jstests/core/**/check_shard_index.js # checkShardingIndex.
    - jstests/core/**/compact_keeps_indexes.js # compact.
    - jstests/core/**/currentop.js # uses fsync.
    - jstests/core/**/dbhash.js # dbhash.
    - jstests/core/**/fsync.js # uses fsync.
    - jstests/core/**/geo_s2cursorlimitskip.js # profiling.
    - jstests/core/**/geo_update_btree2.js # notablescan.
    - jstests/core/**/queryoptimizera.js # "local" database.
    - jstests/core/**/startup_log.js # "local" database.
    - jstests/core/**/query/top/top.js # top.
    # The following tests fail because mongos behaves differently from mongod when testing certain
    # functionality. The differences are in a comment next to the failing test.
    - jstests/core/**/geo_2d_explain.js # executionSuccess in different spot in explain().
    - jstests/core/**/geo_s2explain.js # inputStage in different spot in explain().
    - jstests/core/**/geo_s2sparse.js # keysPerIndex in different spot in validate().
    - jstests/core/**/operation_latency_histogram.js # Stats are counted differently on mongos, SERVER-24880.

    # Reads from system.views.
    - jstests/core/catalog/views/views_drop.js

    ##
    ## Limitations with the way the runner file injects transactions.
    ##

    # These tests expects some statements to error, which will cause txns to abort entirely.
    - jstests/core/**/api_params_getmore.js
    - jstests/core/**/bulk_api_ordered.js
    - jstests/core/**/bulk_api_unordered.js
    - jstests/core/**/commands_with_uuid.js
    - jstests/core/**/dbcase.js
    - jstests/core/**/dbcase2.js
    - jstests/core/**/explain_execution_error.js
    - jstests/core/**/expr.js
    - jstests/core/**/find9.js
    - jstests/core/**/find_getmore_bsonsize.js
    - jstests/core/**/find_getmore_cmd.js
    - jstests/core/**/geo_allowedcomparisons.js
    - jstests/core/**/geo_big_polygon2.js
    - jstests/core/**/geonear_key.js
    - jstests/core/**/in.js
    - jstests/core/**/index8.js # No explicit check for failed command.
    - jstests/core/**/index_decimal.js
    - jstests/core/**/index_large_and_small_dates.js
    - jstests/core/**/index_multiple_compatibility.js
    - jstests/core/**/index_partial_write_ops.js
    - jstests/core/**/indexa.js # No explicit check for failed command.
    - jstests/core/**/indexes_multiple_commands.js
    - jstests/core/**/js2.js
    - jstests/core/query/json_schema/json_schema.js
    - jstests/core/**/mr_bigobject.js
    - jstests/core/**/not2.js
    - jstests/core/**/null_query_semantics.js
    - jstests/core/**/or1.js
    - jstests/core/**/or2.js
    - jstests/core/**/or3.js
    - jstests/core/**/ord.js
    - jstests/core/**/orj.js
    - jstests/core/**/ref.js
    - jstests/core/**/ref4.js
    - jstests/core/**/regex_limit.js
    - jstests/core/**/remove_undefined.js
    - jstests/core/**/set7.js
    - jstests/core/**/sortb.js
    - jstests/core/**/sortf.js
    - jstests/core/**/sortg.js
    - jstests/core/**/sortj.js
    - jstests/core/**/sort_with_meta_operator.js
    - jstests/core/**/tailable_skip_limit.js
    - jstests/core/timeseries/ddl/timeseries_special_indexes_metadata.js
    - jstests/core/**/type_array.js
    - jstests/core/**/uniqueness.js
    - jstests/core/**/unset2.js
    - jstests/core/**/update_addToSet.js
    - jstests/core/**/update_array_offset_positional.js
    - jstests/core/**/update_arrayFilters.js
    - jstests/core/**/update_find_and_modify_id.js
    - jstests/core/**/update_modifier_pop.js
    - jstests/core/**/update_dollar_fields.js
    - jstests/core/**/update_fail_halts_modifications.js

    ##
    ## Some aggregation stages don't support snapshot readconcern.
    ##

    # explain (requires read concern local)
    - jstests/core/**/agg_hint.js
    - jstests/core/**/and.js
    - jstests/core/**/query/collation/collation.js
    - jstests/core/**/distinct_multikey_dotted_path.js
    - jstests/core/**/explain_shell_helpers.js
    - jstests/core/**/index_partial_read_ops.js
    - jstests/core/**/query/explain/optimized_match_explain.js
    - jstests/core/**/sort_array.js
    - jstests/core/views/views_collation.js
    - jstests/core/**/wildcard_index_count.js
    - jstests/core/**/explain_server_params.js

    # $listSessions
    - jstests/core/**/list_all_local_sessions.js
    - jstests/core/**/list_all_sessions.js
    - jstests/core/**/list_sessions.js

    # $indexStats
    - jstests/core/timeseries/ddl/timeseries_index_stats.js

    # $collStats
    - jstests/core/**/operation_latency_histogram.js
    - jstests/core/catalog/collstats/views_coll_stats.js
    - jstests/core/catalog/views/views_stats.js

    # Errors expected to happen in tests, which can cause transactions to get aborted.
    # So when the test tries to inspect the documents it can be out of sync (relative
    # to test run without multi statement transactions).
    - jstests/core/**/bulk_api_ordered.js
    - jstests/core/**/bulk_api_unordered.js
    - jstests/core/**/doc_validation.js
    - jstests/core/**/doc_validation_options.js
    - jstests/core/**/query/field_name_validation.js
    - jstests/core/**/insert_illegal_doc.js
    - jstests/core/**/push_sort.js
    - jstests/core/**/update_arrayFilters.js
    - jstests/core/**/update_dbref.js
    - jstests/core/**/update_positional_no_array_elem.js
    - jstests/core/**/write_result.js
    - jstests/core/**/query/project/positional_projection.js

    # Trick for bypassing mongo shell validation in the test doesn't work because txn_override
    # retry logic will hit the shell validation.
    - jstests/core/**/invalid_db_name.js

    # Multiple writes in a txn, some of which fail because the collection doesn't exist.
    # We create the collection and retry the last write, but previous writes would have
    # still failed.
    - jstests/core/**/dbref1.js
    - jstests/core/**/dbref2.js
    - jstests/core/**/ref3.js
    - jstests/core/**/update_mod_dotted.js

    ##
    ## Error: Unable to acquire lock within a max lock request timeout of '0ms' milliseconds
    ##

    # Collection drops done through applyOps are not converted to w:majority
    - jstests/core/catalog/views/invalid_system_views.js

    ##
    ## Misc. reasons.
    ##

    # SERVER-34868 Cannot run a legacy query on a session.
    - jstests/core/**/query/exhaust.js

    # SERVER-34772 Tailable Cursors are not allowed with snapshot readconcern.
    - jstests/core/**/awaitdata_getmore_cmd.js
    - jstests/core/**/getmore_cmd_maxtimems.js
    - jstests/core/**/tailable_cursor_invalidation.js
    - jstests/core/**/tailable_getmore_batch_size.js

    # Wrong count for top info (WriteLock)
    - jstests/core/**/query/top/top.js

    # Expects collection to not have been created
    - jstests/core/**/insert_id_undefined.js

    # Creates sessions explicitly, resulting in txns being run through different sessions
    # using a single txnNumber.
    - jstests/core/query/json_schema/misc_validation.js
    - jstests/core/catalog/views/views_all_commands.js

    # Committing a transaction when the server is fsync locked fails.
    - jstests/core/**/fsync.js

    # Expects legacy errors ($err).
    - jstests/core/**/constructors.js

    # txn interrupted by command outside of txn before getMore runs.
    - jstests/core/**/commands_namespace_parsing.js
    - jstests/core/ddl/drop_collection_cursors.js
    - jstests/core/**/geo_s2cursorlimitskip.js
    - jstests/core/**/getmore_invalidated_cursors.js
    - jstests/core/**/getmore_invalidated_documents.js
    - jstests/core/**/query/kill_cursors.js
    - jstests/core/**/list_indexes.js
    - jstests/core/**/list_namespaces_invalidation.js
    - jstests/core/**/oro.js
    - jstests/core/**/sort_with_update_between_getmores.js

    # Parallel Shell - we do not signal the override to end a txn when a parallel shell closes.
    - jstests/core/**/awaitdata_getmore_cmd.js
    - jstests/core/**/compact_keeps_indexes.js
    - jstests/core/**/count10.js
    - jstests/core/**/count_plan_summary.js
    - jstests/core/**/coveredIndex3.js
    - jstests/core/**/currentop.js
    - jstests/core/**/distinct3.js
    - jstests/core/**/find_and_modify_concurrent_update.js
    - jstests/core/**/fsync.js
    - jstests/core/**/geo_update_btree.js
    - jstests/core/**/loadserverscripts.js
    - jstests/core/**/mr_killop.js
    - jstests/core/**/remove_concurrent_inserts.js
    - jstests/core/**/remove_adjacent_index_keys.js
    - jstests/core/**/shellstartparallel.js
    - jstests/core/**/update_namespace_details.js

    # Command expects to see result from parallel operation.
    # E.g. Suppose the following sequence of events: op1, join() op2 in parallel shell, op3.
    # op3 will still be using the snapshot from op1, and not see op2 at all.
    - jstests/core/**/bench_test1.js
    - jstests/core/**/benchrun_pipeline_updates.js
    - jstests/core/**/cursora.js

    # Does not support tojson of command objects.
    - jstests/core/**/query/function_prototype_bson_type.js

    # Creates a session explicitly causing override to resume a transaction that was not started.
    - jstests/core_sharding/ddl/refine_collection_shard_key.js

  exclude_with_any_tags:
    # "Cowardly refusing to override read concern of command: ..."
    - assumes_read_concern_unchanged
    - assumes_unsharded_collection
    # "writeConcern is not allowed within a multi-statement transaction"
    - assumes_write_concern_unchanged
    - assumes_against_mongod_not_mongos
    - assumes_standalone_mongod
    # Transactions are not allowed to operate on capped collections.
    - requires_capped
    - requires_profiling
    # Retrying a query can change whether a plan cache entry is active.
    - inspects_whether_plan_cache_entry_is_active
    - does_not_support_transactions
    # Transaction-continuing commands must use the same API parameters as the first command, so tests
    # that use API parameters cannot be run with transactions.
    - uses_api_parameters
    # "Cowardly refusing to run test with transaction override enabled when it uses
    # startParallelShell()"
    - uses_parallel_shell
    - does_not_support_causal_consistency
    - requires_timeseries # Transactions not supported
    - requires_2_or_more_shards
executor:
  archive:
    hooks:
      - CheckReplDBHashInBackground
      - CheckReplDBHash
      - CheckMetadataConsistencyInBackground
      - ValidateCollections
      - DropSessionsCollection
  config:
    shell_options:
      eval: >-
        globalThis.testingReplication = true;
        await import('jstests/libs/override_methods/enable_sessions.js');
        await import('jstests/libs/override_methods/network_error_and_txn_override.js');
        await import('jstests/libs/override_methods/txn_passthrough_cmd_massage.js');
      global_vars:
        TestData: &TestData
          networkErrorAndTxnOverrideConfig:
            wrapCRUDinTransactions: true
          sessionOptions:
            # Read your own writes is not guaranteed without causal consistency since the
            # coordinateCommit commmand returns as soon as the decision is made durable, and
            # prepare conflicts are explicity ignored for non-causal reads.
            causalConsistency: true
          backgroundSessionCollectionDrop: true
  hooks:
    - class: DropSessionsCollection
    - class: CheckReplDBHashInBackground
    # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
    # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
    # validating the entire contents of the collection.
    - class: CheckReplDBHash
    - class: CheckMetadataConsistencyInBackground
      shell_options:
        global_vars:
          TestData: *TestData
    - class: ValidateCollections
    - class: CheckOrphansDeleted
    - class: CleanEveryN
      n: 20
  fixture:
    class: ShardedClusterFixture
    mongos_options:
      set_parameters:
        enableTestCommands: 1
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        coordinateCommitReturnImmediatelyAfterPersistingDecision: true
    num_rs_nodes_per_shard: 2
