# Based on the concurrency_sharded_replication_with_balancer_and_config_transitions suite. This
# suite adds and removes shards and runs config shard transitions continuously in the background.
test_kind: fsm_workload_test

selector:
  roots:
    - jstests/concurrency/fsm_workloads/**/*.js
    - src/mongo/db/modules/*/jstests/concurrency/fsm_workloads/*.js
  exclude_files:
    # SERVER-14669 Multi-removes that use $where miscount removed documents
    - jstests/concurrency/fsm_workloads/remove_where.js

    # Disabled due to MongoDB restrictions and/or workload restrictions

    # These workloads sometimes trigger 'Could not lock auth data update lock'
    # errors because the AuthorizationManager currently waits for only five
    # seconds to acquire the lock for authorization documents
    - jstests/concurrency/fsm_workloads/auth_create_role.js
    - jstests/concurrency/fsm_workloads/auth_create_user.js
    - jstests/concurrency/fsm_workloads/auth_drop_role.js
    - jstests/concurrency/fsm_workloads/auth_drop_user.js

    # uses >100MB of data, which can overwhelm test hosts
    - jstests/concurrency/fsm_workloads/agg_group_external.js
    - jstests/concurrency/fsm_workloads/agg_sort_external.js

    # compact can only be run against a standalone mongod
    - jstests/concurrency/fsm_workloads/compact.js
    - jstests/concurrency/fsm_workloads/compact_while_creating_indexes.js

    # test creates too many collections for ContinuousAddRemoveShard
    - jstests/concurrency/fsm_workloads/create_collection.js

    # can cause OOM kills on test hosts
    - jstests/concurrency/fsm_workloads/findAndModify_update_grow.js

    # cannot createIndex after dropDatabase without sharding first
    - jstests/concurrency/fsm_workloads/plan_cache_drop_database.js

    # reIndex is not supported in mongos.
    - jstests/concurrency/fsm_workloads/reindex.js
    - jstests/concurrency/fsm_workloads/reindex_background.js
    - jstests/concurrency/fsm_workloads/reindex_writeconflict.js

    # The WTWriteConflictException failpoint is not supported on mongos.
    - jstests/concurrency/fsm_workloads/collmod_writeconflict.js

    # SERVER-20361 Improve the behaviour of multi-update/delete against a sharded collection
    - jstests/concurrency/fsm_workloads/update_where.js

    # TODO Undenylist (SERVER-38852).
    - jstests/concurrency/fsm_workloads/agg_out_interrupt_cleanup.js
    - jstests/concurrency/fsm_workloads/timeseries_agg_out_interrupt_cleanup.js

    # serverStatus does not include transaction metrics on mongos.
    - jstests/concurrency/fsm_workloads/multi_statement_transaction_atomicity_isolation_metrics_test.js

    # Uses the same transaction id across different routers, which is not allowed because when either
    # router tries to commit, it may not know the full participant list.
    - jstests/concurrency/fsm_workloads/multi_statement_transaction_all_commands_same_session.js

    # The test may spuriously fail when run against sharded clusters, due to limitations of the
    # infrastructure. See SERVER-77039 for full details.
    - jstests/concurrency/fsm_workloads/map_reduce_drop.js

    # TODO SERVER-89555: Timeseries collections hit movePrimaryInProgress errors and the temporary
    # retry logic for this hook leads to breaking a test assertion.
    - jstests/concurrency/fsm_workloads/timeseries_mirrored_writes.js

    # TODO SERVER-89840: Inconsistent UUIDs for config.system.sessions across config shard and
    # removed/re-added shard.
    - jstests/concurrency/fsm_workloads/add_remove_shards_killop.js

    # TODO SERVER-89841: Performs many sharding DDL operations and can time out taking the DDL lock
    # on slower variants.
    - jstests/concurrency/fsm_workloads/agg_lookup.js
    - jstests/concurrency/fsm_workloads/agg_lookup_in_txn.js
    - jstests/concurrency/fsm_workloads/agg_out.js
    - jstests/concurrency/fsm_workloads/agg_sort.js
    - jstests/concurrency/fsm_workloads/map_reduce_interrupt.js
    - jstests/concurrency/fsm_workloads/map_reduce_replace.js
    - jstests/concurrency/fsm_workloads/map_reduce_replace_remove.js
    - jstests/concurrency/fsm_workloads/map_reduce_replace_nonexistent.js
    - jstests/concurrency/fsm_workloads/random_DDL_operations.js
    - jstests/concurrency/fsm_workloads/random_DDL_check_metadata_consistency_killop.js
    - jstests/concurrency/fsm_workloads/rename_sharded_collection.js
    - jstests/concurrency/fsm_workloads/rename_capped_collection_chain.js
    - jstests/concurrency/fsm_workloads/rename_capped_collection_droptarget.js
    - jstests/concurrency/fsm_workloads/rename_capped_collection_dbname_chain.js
    - jstests/concurrency/fsm_workloads/rename_capped_collection_dbname_droptarget.js
    - jstests/concurrency/fsm_workloads/timeseries_agg_out.js

    # This test expects to catch QueryPlanKilled errors, but the config transition runCommand
    # override retries on QueryPlanKilled errors to retain test coverage for transient errors
    # caused by config transitions.
    - jstests/concurrency/fsm_workloads/kill_rooted_or.js

    # TODO SERVER-50144 Removing a shard with in-progress migration coordinators can leave permanently
    # pending config.rangeDeletions document on the recipient. Therefore, this suite removes shards without
    # waiting for the range deleter to finish. As a result, we might decommision a shard before all
    # open cursors can finish, such that tests using getMore must be skipped.
    - jstests/concurrency/fsm_workloads/agg_base.js
    - jstests/concurrency/fsm_workloads/agg_graph_lookup.js
    - jstests/concurrency/fsm_workloads/agg_unionWith_interrupt_cleanup.js
    - jstests/concurrency/fsm_workloads/create_index_background.js
    - jstests/concurrency/fsm_workloads/create_index_background_partial_filter.js
    - jstests/concurrency/fsm_workloads/create_index_background_wildcard.js
    - jstests/concurrency/fsm_workloads/create_index_background_unique.js
    - jstests/concurrency/fsm_workloads/create_index_background_unique_capped.js
    - jstests/concurrency/fsm_workloads/globally_managed_cursors.js
    - jstests/concurrency/fsm_workloads/indexed_insert_ordered_bulk.js
    - jstests/concurrency/fsm_workloads/indexed_insert_text.js
    - jstests/concurrency/fsm_workloads/indexed_insert_unordered_bulk.js
    - jstests/concurrency/fsm_workloads/indexed_insert_upsert.js
    - jstests/concurrency/fsm_workloads/indexed_insert_where.js
    - jstests/concurrency/fsm_workloads/invalidated_cursors.js
    - jstests/concurrency/fsm_workloads/kill_aggregation.js
    - jstests/concurrency/fsm_workloads/kill_rooted_or.js
    - jstests/concurrency/fsm_workloads/list_indexes.js
    - jstests/concurrency/fsm_workloads/query_stats_concurrent.js
    - jstests/concurrency/fsm_workloads/query_stats_enable_disable.js
    - jstests/concurrency/fsm_workloads/reindex.js
    - jstests/concurrency/fsm_workloads/reindex_background.js
    - jstests/concurrency/fsm_workloads/reindex_writeconflict.js
    - jstests/concurrency/fsm_workloads/remove_multiple_documents.js
    - jstests/concurrency/fsm_workloads/server_status_with_time_out_cursors.js
    - jstests/concurrency/fsm_workloads/snapshot_read_kill_operations.js
    - jstests/concurrency/fsm_workloads/snapshot_read_kill_op_only.js
    - jstests/concurrency/fsm_workloads/updateOne_with_sort_update_queue.js
    - jstests/concurrency/fsm_workloads/updateOne_with_sort_update_queue_unindexed.js
    - jstests/concurrency/fsm_workloads/update_where.js
    - jstests/concurrency/fsm_workloads/yield.js
    - jstests/concurrency/fsm_workloads/yield_fetch.js
    - jstests/concurrency/fsm_workloads/yield_geo_near_dedup.js
    - jstests/concurrency/fsm_workloads/yield_rooted_or.js
    - jstests/concurrency/fsm_workloads/yield_sort.js
    - jstests/concurrency/fsm_workloads/yield_sort_merge.js
    - jstests/concurrency/fsm_workloads/yield_text.js
    - jstests/concurrency/fsm_workloads/yield_with_drop.js

    # Connects directly to shards that might have been decomissioned, which leads to network errors.
    - jstests/concurrency/fsm_workloads/cleanupOrphanedWhileMigrating.js

    # Tests that perform shard addition, shard removal, or movePrimary operations,
    # might interfere with the state expected during execution of the ContinuousAddRemoveShard hook.
    - jstests/concurrency/fsm_workloads/add_remove_shards_killop.js
    - jstests/concurrency/fsm_workloads/move_primary_with_crud.js

    # TODO SERVER-90609: movePrimary does not synchronize with index builds.
    - jstests/concurrency/fsm_workloads/create_index_background_unique.js
    - jstests/concurrency/fsm_workloads/create_index_background_unique_capped.js
    - jstests/concurrency/fsm_workloads/collmod_separate_collections.js

  exclude_with_any_tags:
    - assumes_against_mongod_not_mongos
    - assumes_balancer_off
    - requires_replication
    # mongos has no system.profile collection.
    - requires_profiling
    - assumes_unsharded_collection

    # The following tags are excluded specifically for this suite.
    - config_shard_incompatible
    - assumes_stable_shard_list

    # Workloads that kill random sessions might interrupt operations
    # performed by the ContinuousAddRemoveShard hook.
    - kills_random_sessions

    # TODO SERVER-50144 Not waiting for rangeDeleter. Skip tests using getMore.
    - requires_getmore

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckMetadataConsistencyInBackground
      - ValidateCollections
    tests: true
  config:
    shell_options:
      eval: >-
        await import("jstests/libs/override_methods/implicitly_retry_on_shard_transition_errors.js");
      global_vars:
        TestData:
          runningWithBalancer: true
          shardsAddedRemoved: true
          fsmPreOverridesLoadedCallback: import("jstests/libs/override_methods/implicitly_retry_on_migration_in_progress.js");
  hooks:
    - class: ContinuousAddRemoveShard
      transition_configsvr: true
      add_remove_random_shards: true
    - class: CheckShardFilteringMetadata
    # Suites that shutdown nodes are not compatible with the CheckReplDBHashInBackground hook, so
    # this suite does not include that hook
    - class: CheckReplDBHash
    - class: CheckMetadataConsistencyInBackground
      shell_options:
        global_vars:
          TestData:
            shardsAddedRemoved: true
    - class: CheckOrphansDeleted
    - class: CheckRoutingTableConsistency
    - class: ValidateCollections # Validation can interfere with other operations, so this goes last.
    - class: CleanupConcurrencyWorkloads
  fixture:
    class: ShardedClusterFixture
    config_shard: "any"
    mongos_options:
      set_parameters:
        enableTestCommands: 1
        queryAnalysisSamplerConfigurationRefreshSecs: 1
        defaultConfigCommandTimeoutMS: 90000
    shard_options:
      mongod_options:
        oplogSize: 1024
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        roleGraphInvalidationIsFatal: 1
        queryAnalysisWriterIntervalSecs: 1
        queryAnalysisSamplerConfigurationRefreshSecs: 1
        defaultConfigCommandTimeoutMS: 90000
        skipDroppingHashedShardKeyIndex: true
        reshardingMinimumOperationDurationMillis: 0
        balancerMigrationsThrottlingMs: 250
        featureFlagReshardingForTimeseries: true
    num_rs_nodes_per_shard: 3
    # Use 3 shards so there's always at least two for workloads with manual migrations, etc.
    num_shards: 3
    num_mongos: 2
    enable_balancer: true
    random_migrations: true
