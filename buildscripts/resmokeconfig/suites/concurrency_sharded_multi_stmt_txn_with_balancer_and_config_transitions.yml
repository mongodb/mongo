# Based on the concurrency_sharded_multi_stmt_txn_with_balancer and
# concurrency_sharded_replication_with_balancer_and_transitions suites. This suite runs continuous
# background config transitions and wraps test state functions in multi document transactions.
config_variables:
  - &movePrimaryComment continuousConfigShardTransitionMovePrimary

test_kind: fsm_workload_test

selector:
  roots:
  - jstests/concurrency/fsm_workloads/**/*.js
  - src/mongo/db/modules/*/jstests/concurrency/fsm_workloads/*.js
  exclude_files:
  # SERVER-14669 Multi-removes that use $where miscount removed documents
  - jstests/concurrency/fsm_workloads/remove_where.js

  # Disabled due to MongoDB restrictions and/or workload restrictions

  # These workloads sometimes trigger 'Could not lock auth data update lock'
  # errors because the AuthorizationManager currently waits for only five
  # seconds to acquire the lock for authorization documents
  - jstests/concurrency/fsm_workloads/auth_create_role.js
  - jstests/concurrency/fsm_workloads/auth_create_user.js
  - jstests/concurrency/fsm_workloads/auth_drop_role.js
  - jstests/concurrency/fsm_workloads/auth_drop_user.js

  # uses >100MB of data, which can overwhelm test hosts
  - jstests/concurrency/fsm_workloads/agg_group_external.js
  - jstests/concurrency/fsm_workloads/agg_sort_external.js

  # compact can only be run against a standalone mongod
  - jstests/concurrency/fsm_workloads/compact.js
  - jstests/concurrency/fsm_workloads/compact_while_creating_indexes.js

  # test creates too many collections for ContinuousAddRemoveShard
  - jstests/concurrency/fsm_workloads/create_collection.js

  # can cause OOM kills on test hosts
  - jstests/concurrency/fsm_workloads/findAndModify_update_grow.js

  # cannot createIndex after dropDatabase without sharding first
  - jstests/concurrency/fsm_workloads/plan_cache_drop_database.js

  # reIndex is not supported in mongos.
  - jstests/concurrency/fsm_workloads/reindex.js
  - jstests/concurrency/fsm_workloads/reindex_background.js
  - jstests/concurrency/fsm_workloads/reindex_writeconflict.js

  # The WTWriteConflictException failpoint is not supported on mongos.
  - jstests/concurrency/fsm_workloads/collmod_writeconflict.js

  # SERVER-20361 Improve the behaviour of multi-update/delete against a sharded collection
  - jstests/concurrency/fsm_workloads/update_where.js

  # TODO Undenylist (SERVER-38852).
  - jstests/concurrency/fsm_workloads/agg_out_interrupt_cleanup.js
  - jstests/concurrency/fsm_workloads/timeseries_agg_out_interrupt_cleanup.js

  # serverStatus does not include transaction metrics on mongos.
  - jstests/concurrency/fsm_workloads/multi_statement_transaction_atomicity_isolation_metrics_test.js

  # Uses the same transaction id across different routers, which is not allowed because when either
  # router tries to commit, it may not know the full participant list.
  - jstests/concurrency/fsm_workloads/multi_statement_transaction_all_commands_same_session.js

  # The test may spuriously fail when run against sharded clusters, due to limitations of the
  # infrastructure. See SERVER-77039 for full details.
  - jstests/concurrency/fsm_workloads/map_reduce_drop.js

  ##
  # Denylists from concurrency_sharded_multi_stmt_txn_with_balancer
  ##

  # Expects reads to die with a particular error, but other errors are possible if the read is part
  # of a transaction (e.g. ErrorCodes.LockTimeout).
  - jstests/concurrency/fsm_workloads/drop_index_during_replan.js
  - jstests/concurrency/fsm_workloads/drop_index_during_lookup.js

  # Relies on having one thread observe writes from the other threads, which won't become visible
  # once a transaction in the thread is started because it'll keep reading from the same snapshot.
  - jstests/concurrency/fsm_workloads/create_index_background.js
  - jstests/concurrency/fsm_workloads/create_index_background_partial_filter.js
  - jstests/concurrency/fsm_workloads/create_index_background_wildcard.js

  # Use updates that do not contain the shard key, so they are rejected before any commands are
  # sent to participant shards, but these workloads do not fail, so the auto retry transaction logic
  # attempts to commit, which fails because no participants have been contacted.
  - jstests/concurrency/fsm_workloads/update_rename.js
  - jstests/concurrency/fsm_workloads/update_rename_noindex.js

  ##
  # Denylists from this suite.
  ##

  # TODO SERVER-90609: Enable these tests.
  - jstests/concurrency/fsm_workloads/create_index_background_unique.js
  - jstests/concurrency/fsm_workloads/create_index_background_unique_capped.js

  # TODO SERVER-92349: Re-enable this test once completed.
  - jstests/concurrency/fsm_workloads/indexed_insert_ttl.js

  exclude_with_any_tags:
  - assumes_against_mongod_not_mongos
  - assumes_balancer_off
  - requires_replication
  # mongos has no system.profile collection.
  - requires_profiling
  - assumes_unsharded_collection

  # Snapshot reads in transactions are banned on capped collections.
  - requires_capped
  - does_not_support_causal_consistency
  # Sharing cursors between state functions will fail in this suite because it will attempt to use
  # the same cursor in multiple transactions.
  - state_functions_share_cursor
  # These start a transaction in one state function and use it in other state functions. This suite
  # would instead execute each state function as its own transaction.
  - state_functions_share_transaction
  # Tests which expect commands to fail and catch the error can cause transactions to abort and
  # retry indefinitely.
  - catches_command_failures
  - does_not_support_transactions

  # The following tags are excluded specifically for this suite.
  - config_shard_incompatible
  - assumes_stable_shard_list

executor:
  archive:
    hooks:
      - CheckReplDBHashInBackground
      - CheckReplDBHash
      - CheckMetadataConsistencyInBackground
      - ValidateCollections
    tests: true
  config:
    shell_options:
      eval: >-
        await import("jstests/libs/override_methods/implicitly_retry_on_shard_transition_errors.js");
      global_vars:
        TestData:
          runInsideTransaction: true
          runningWithSessions: true
          traceExceptions: false
          runningWithBalancer: true
          shardsAddedRemoved: true
          shardCollectionProbability: 0.5
          fsmPreOverridesLoadedCallback:
            import("jstests/libs/override_methods/implicitly_retry_on_migration_in_progress.js");
  hooks:
    - class: ContinuousAddRemoveShard
      transition_configsvr: true
      move_primary_comment: *movePrimaryComment
    - class: CheckShardFilteringMetadata
    - class: CheckReplDBHashInBackground
    - class: CheckReplDBHash
    - class: CheckMetadataConsistencyInBackground
      shell_options:
        global_vars:
          TestData:
            shardsAddedRemoved: true
    - class: CheckOrphansDeleted
    - class: CheckRoutingTableConsistency
    - class: ValidateCollections # Validation can interfere with other operations, so this goes last.
    - class: CleanupConcurrencyWorkloads
  fixture:
    class: ShardedClusterFixture
    config_shard: "any"
    mongos_options:
      set_parameters:
        enableTestCommands: 1
        queryAnalysisSamplerConfigurationRefreshSecs: 1
        defaultConfigCommandTimeoutMS: 90000
    shard_options:
      mongod_options:
        oplogSize: 1024
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        roleGraphInvalidationIsFatal: 1
        queryAnalysisWriterIntervalSecs: 1
        queryAnalysisSamplerConfigurationRefreshSecs: 1
        defaultConfigCommandTimeoutMS: 90000
        skipDroppingHashedShardKeyIndex: true
        reshardingMinimumOperationDurationMillis: 0
        balancerMigrationsThrottlingMs: 250
        featureFlagReshardingForTimeseries: true
        failpoint.movePrimaryFailIfNeedToCloneMovableCollections:
          data:
            comment: *movePrimaryComment
          mode: alwaysOn
    num_rs_nodes_per_shard: 3
    # Use 3 shards so there's always at least two for workloads with manual migrations, etc.
    num_shards: 3
    num_mongos: 2
    enable_balancer: true
    random_migrations: true
