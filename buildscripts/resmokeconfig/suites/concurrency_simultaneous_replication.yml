test_kind: parallel_fsm_workload_test

selector:
  roots:
    - jstests/concurrency/fsm_workloads/**/*.js
    - src/mongo/db/modules/*/jstests/concurrency/fsm_workloads/*.js
  exclude_files:
    # This workload kills random cursors which takes a collection lock.
    # TODO: SERVER-39939.
    - jstests/concurrency/fsm_workloads/txns/snapshot_read/snapshot_read_kill_operations.js

    # This workload may restart running transactions on a different client, causing deadlock if
    # there is a concurrent dropDatabase waiting for the global X lock.
    # TODO: SERVER-37876
    - jstests/concurrency/fsm_workloads/txns/multi_statement_transaction/multi_statement_transaction_all_commands_same_session.js

    # This workload assumes no locks are taken outside of the workload.
    - jstests/concurrency/fsm_workloads/access_collection_in_transaction_after_catalog_changes.js

  exclude_with_any_tags:
    - requires_standalone
    - requires_sharding
    - kills_random_sessions
    - incompatible_with_concurrency_simultaneous

  group_size: 10
  group_count_multiplier: 1.0

executor:
  archive:
    hooks:
      - CheckReplDBHashInBackground
      - CheckReplDBHash
      - ValidateCollections
    tests: true
  config:
    shell_options:
      global_vars:
        TestData:
          skipDropDatabaseOnDatabaseDropPending: true
      setShellParameter: skipShellCursorFinalize=true
  hooks:
    # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
    # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
    # validating the entire contents of the collection.
    #
    # TODO SERVER-26466: Add CheckReplOplogs hook to the concurrency suite.
    - class: CheckReplDBHashInBackground
    - class: CheckReplDBHash
    - class: ValidateCollections
    - class: CleanupConcurrencyWorkloads
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      oplogSize: 1024
      set_parameters:
        # Increase the timeout of the cursor so that the cursor will continue to stay alive even
        # when there is a delay in lock acquisition during a getMore command.
        cursorTimeoutMillis: 3600000
        enableTestCommands: 1
        # We have historically had deadlocks occur due to lock acquisition issues involving the
        # system running out of WiredTiger write tickets. We intentionally lower the number of
        # WiredTiger write tickets available to below the maximum number of database clients to
        # trigger this situation at least some of the time.
        storageEngineConcurrencyAdjustmentAlgorithm: "fixedConcurrentTransactions"
        wiredTigerConcurrentWriteTransactions: 64
        roleGraphInvalidationIsFatal: 1
    num_nodes: 3
