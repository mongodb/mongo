test_kind: js_test

selector:
  roots:
    - jstests/core/**/*.js
  exclude_files:
    # Linearizable read concern is not supported for transactions.
    - jstests/core/txns/**/*.js

    # These tests use benchRun(), which isn't configured to use the overridden writeConcern.
    - jstests/core/**/bench_test*.js
    - jstests/core/**/benchrun_pipeline_updates.js # benchRun() used for writes
    # fsync.js runs the {fsync: 1, lock: 1} command, which prevents a linearizable read from writing
    # an entry to the oplog.
    - jstests/core/**/fsync.js
    # The NoOp write from linearizable getMores will cause awaitdata_getmore_cmd.js to loop
    # indefinitely as it tails the oplog.
    - jstests/core/**/awaitdata_getmore_cmd.js
    # Express path only does single document read and write operations, so this passthrough does not
    # add valuable coverage.
    - jstests/core/index/express_pbt.js
  exclude_with_any_tags:
    ##
    # The next three tags correspond to the special errors thrown by the
    # set_read_and_write_concerns.js override when it refuses to replace the readConcern or
    # writeConcern of a particular command. Above each tag are the message(s) that cause the tag to be
    # warranted.
    ##
    # "Cowardly refusing to override read concern of command: ..."
    - assumes_read_concern_unchanged
    # "Cowardly refusing to override write concern of command: ..."
    - assumes_write_concern_unchanged
    - assumes_standalone_mongod
    # These tests run many aggregations, and the override slows them down enough to hit the evergreen timeout.
    - query_intensive_pbt

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckReplOplogs
      - ValidateCollections
  config:
    shell_options:
      global_vars:
        TestData:
          defaultReadConcernLevel: linearizable
      eval: >-
        globalThis.testingReplication = true;
        await import('jstests/libs/override_methods/set_read_and_write_concerns.js');
  hooks:
    # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
    # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
    # validating the entire contents of the collection.
    - class: CheckReplOplogs
    - class: CheckReplDBHash
    - class: ValidateCollections
    - class: CleanEveryN
      n: 20
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      set_parameters:
        enableTestCommands: 1
    num_nodes: 2
