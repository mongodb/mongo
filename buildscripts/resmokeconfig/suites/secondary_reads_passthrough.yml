test_kind: js_test

selector:
  roots:
    - jstests/core/**/*.js
    - jstests/fle2/**/*.js
    - src/mongo/db/modules/*/jstests/fle2/**/*.js
  exclude_files:
    # Operations within a transaction do not support write concern.
    - jstests/core/txns/**/*.js

    # Parallel shell is not causally consistent
    - jstests/core/**/benchrun_pipeline_updates.js
    - jstests/core/**/crud_ops_do_not_throw_locktimeout.js
    - jstests/core/**/cursora.js
    - jstests/core/**/find_and_modify_concurrent_update.js
    - jstests/core/**/shellstartparallel.js
    - jstests/core/**/loadserverscripts.js
    - jstests/core/**/fsync.js
    # benchRun cannot be overridden to be causally consistent
    - jstests/core/**/bench_test*.js
    - jstests/core/**/benchrun_pipeline_updates.js
    # getMore is not causal consistent because afterClusterTime has been specified
    # by the preceding find command which establishes the cursor. Therefore,
    # getMore cannot be guaranteed to get executed after commands in between find
    # and getMore.
    - jstests/core/ddl/drop_collection_cursors.js
    - jstests/core/**/ord.js
    - jstests/core/**/tailable_cursor_invalidation.js
    - jstests/core/**/tailable_skip_limit.js
    - jstests/core/**/query/collation/collation.js

  exclude_with_any_tags:
    - assumes_standalone_mongod
    ##
    # The next tag corresponds to the special error thrown by the set_read_preference_secondary.js
    # override when it refuses to replace the readPreference of a particular command. Above each tag
    # are the message(s) that cause the tag to be warranted.
    ##
    # "Cowardly refusing to override read preference of command: ..."
    # "Cowardly refusing to run test with overridden read preference when it reads from a
    #  non-replicated collection: ..."
    - assumes_read_preference_unchanged
    - does_not_support_causal_consistency
    ##
    # collStats and dbStats are not causally consistent
    - requires_collstats
    - requires_dbstats
    # These tests attempt to read from the "system.profile" collection, which may be missing entries
    # if a write was performed on the primary of the replica set instead.
    - requires_profiling

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckReplOplogs
      - ValidateCollections
  config:
    shell_options:
      eval: >-
        globalThis.testingReplication = true;
        await import('jstests/libs/override_methods/set_read_preference_secondary.js');
        await import('jstests/libs/override_methods/enable_causal_consistency.js');
  hooks:
    # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
    # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
    # validating the entire contents of the collection.
    - class: CheckReplOplogs
    - class: CheckReplDBHash
    - class: ValidateCollections
    - class: CleanEveryN
      n: 20
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        # Allow many initial sync attempts. Initial sync may fail if the sync source does not have
        # an oplog yet because it has not conducted its own initial sync yet.
        numInitialSyncAttempts: 10000000
    linear_chain: true
    num_nodes: 5
    use_replica_set_connection_string: true
