test_kind: fsm_workload_test

selector:
  roots:
    - jstests/concurrency/fsm_workloads/**/*.js
  exclude_files:
    ##
    # Disabled due to MongoDB restrictions and/or workload restrictions
    ##

    # Relies on having one thread observe writes from the other threads, which won't become visible
    # once a transaction in the thread is started because it'll keep reading from the same snapshot.
    - jstests/concurrency/fsm_workloads/ddl/create_index_background/create_index_background.js
    - jstests/concurrency/fsm_workloads/ddl/create_index_background/create_index_background_partial_filter.js
    - jstests/concurrency/fsm_workloads/ddl/create_index_background/create_index_background_wildcard.js

    # Expects reads to die with a particular error, but other errors are possible if the read is part
    # of a transaction (e.g. ErrorCodes.LockTimeout).
    - jstests/concurrency/fsm_workloads/query/drop_index_during_replan.js
    - jstests/concurrency/fsm_workloads/query/drop_index_during_lookup.js

    # Performs direct writes to system.views
    - jstests/concurrency/fsm_workloads/view_catalog/view_catalog_direct_system_writes.js

    # Extracts error code from write error, which is obscured by runInsideTransaction.
    - jstests/concurrency/fsm_workloads/access_collection_in_transaction_after_catalog_changes.js

    # Induces non-blindly-retriable errors (see SERVER-45767).
    - jstests/concurrency/fsm_workloads/ddl/create_database.js

  exclude_with_any_tags:
    - requires_standalone
    - requires_sharding
    # Snapshot reads in transactions are banned on capped collections.
    - requires_capped
    # Sharing cursors between state functions will fail in this suite because it will attempt to use
    # the same cursor in multiple transactions.
    - state_functions_share_cursor
    # These start a transaction in one state function and use it in other state functions. This suite
    # would instead execute each state function as its own transaction.
    - state_functions_share_transaction
    # Tests which expect commands to fail and catch the error can cause transactions to abort and
    # retry indefinitely.
    - catches_command_failures
    # time-series collections do not support write transactions
    - requires_timeseries
    - does_not_support_transactions

executor:
  archive:
    hooks:
      - CheckReplDBHashInBackground
      - ValidateCollectionsInBackground
      - CheckReplDBHash
      - ValidateCollections
    tests: true
  config:
    shell_options:
      global_vars:
        TestData:
          runInsideTransaction: true
          runningWithSessions: true
          traceExceptions: false
  hooks:
    # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
    # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
    # validating the entire contents of the collection.
    #
    # TODO SERVER-26466: Add CheckReplOplogs hook to the concurrency suite.
    - class: CheckReplDBHashInBackground
    - class: ValidateCollectionsInBackground
    - class: CheckReplDBHash
    - class: ValidateCollections
    - class: CleanupConcurrencyWorkloads
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      oplogSize: 1024
      set_parameters:
        enableTestCommands: 1
        queryAnalysisSamplerConfigurationRefreshSecs: 1
        queryAnalysisWriterIntervalSecs: 1
        roleGraphInvalidationIsFatal: 1
    num_nodes: 3
