test_kind: multi_stmt_txn_passthrough

selector:
  roots:
    - jstests/core/**/*.js
  exclude_files:
    # These tests already run with transactions.
    - jstests/core/txns/**/*.js

    ##
    ## Limitations with the way the runner file injects transactions.
    ##

    # These tests expects some statements to error, which will cause txns to abort entirely.
    - jstests/core/**/bulk_api_ordered.js
    - jstests/core/**/bulk_api_unordered.js
    - jstests/core/**/commands_with_uuid.js
    - jstests/core/**/dbcase.js
    - jstests/core/**/dbcase2.js
    - jstests/core/**/explain_execution_error.js
    - jstests/core/**/expr.js
    - jstests/core/**/find9.js
    - jstests/core/**/find_and_modify_invalid_query_params.js
    - jstests/core/**/find_getmore_bsonsize.js
    - jstests/core/**/find_getmore_cmd.js
    - jstests/core/**/geo_allowedcomparisons.js
    - jstests/core/**/geo_big_polygon2.js
    - jstests/core/**/geonear_key.js
    - jstests/core/**/in.js
    - jstests/core/**/index8.js # No explicit check for failed command.
    - jstests/core/**/index_decimal.js
    - jstests/core/**/index_large_and_small_dates.js
    - jstests/core/**/index_multiple_compatibility.js
    - jstests/core/**/index_partial_write_ops.js
    - jstests/core/**/indexa.js # No explicit check for failed command.
    - jstests/core/**/indexes_multiple_commands.js
    - jstests/core/**/js2.js
    - jstests/core/query/json_schema/json_schema.js
    - jstests/core/**/mr_bigobject.js
    - jstests/core/**/not2.js
    - jstests/core/**/null_query_semantics.js
    - jstests/core/**/or1.js
    - jstests/core/**/or2.js
    - jstests/core/**/or3.js
    - jstests/core/**/orj.js
    - jstests/core/**/ref.js
    - jstests/core/**/ref4.js
    - jstests/core/**/regex_limit.js
    - jstests/core/**/remove_undefined.js
    - jstests/core/**/set7.js
    - jstests/core/**/sortb.js
    - jstests/core/**/sortf.js
    - jstests/core/**/sortg.js
    - jstests/core/**/sortj.js
    - jstests/core/**/sort_with_meta_operator.js
    - jstests/core/**/tailable_skip_limit.js
    - jstests/core/**/type_array.js
    - jstests/core/**/uniqueness.js
    - jstests/core/**/unset2.js
    - jstests/core/**/update_addToSet.js
    - jstests/core/**/update_array_offset_positional.js
    - jstests/core/**/update_arrayFilters.js
    - jstests/core/**/update_find_and_modify_id.js
    - jstests/core/**/update_modifier_pop.js
    - jstests/core/**/update_dollar_fields.js
    - jstests/core/**/update_fail_halts_modifications.js

    # Reads from system.views.
    - jstests/core/catalog/views/views_drop.js

    ##
    ## Some aggregation stages don't support snapshot readconcern.
    ##

    # explain (requires read concern local)
    - jstests/core/**/agg_hint.js
    - jstests/core/**/and.js
    - jstests/core/**/query/collation/collation.js
    - jstests/core/**/explain_shell_helpers.js
    - jstests/core/**/index_partial_read_ops.js
    - jstests/core/**/explain_server_params.js
    - jstests/core/**/query/explain/optimized_match_explain.js
    - jstests/core/**/sort_array.js
    - jstests/core/views/views_collation.js

    # $listSessions
    - jstests/core/**/list_all_local_sessions.js
    - jstests/core/**/list_all_sessions.js
    - jstests/core/**/list_sessions.js

    # $collStats
    - jstests/core/**/operation_latency_histogram.js
    - jstests/core/catalog/collstats/views_coll_stats.js
    - jstests/core/catalog/views/views_stats.js

    # Errors expected to happen in tests, which can cause transactions to get aborted.
    # So when the test tries to inspect the documents it can be out of sync (relative
    # to test run without multi statement transactions).
    - jstests/core/**/bulk_api_ordered.js
    - jstests/core/**/bulk_api_unordered.js
    - jstests/core/**/doc_validation.js
    - jstests/core/**/doc_validation_options.js
    - jstests/core/**/query/field_name_validation.js
    - jstests/core/**/insert_illegal_doc.js
    - jstests/core/**/push_sort.js
    - jstests/core/**/update_arrayFilters.js
    - jstests/core/**/update_dbref.js
    - jstests/core/**/update_positional_no_array_elem.js
    - jstests/core/**/write_result.js
    - jstests/core/**/query/project/positional_projection.js

    # Trick for bypassing mongo shell validation in the test doesn't work because txn_override
    # retry logic will hit the shell validation.
    - jstests/core/**/invalid_db_name.js

    # Multiple writes in a txn, some of which fail because the collection doesn't exist.
    # We create the collection and retry the last write, but previous writes would have
    # still failed.
    - jstests/core/**/dbref1.js
    - jstests/core/**/dbref2.js
    - jstests/core/**/ref3.js
    - jstests/core/**/update_mod_dotted.js

    ##
    ## Error: Unable to acquire lock within a max lock request timeout of '0ms' milliseconds
    ##

    # Collection drops done through applyOps are not converted to w:majority
    - jstests/core/catalog/views/invalid_system_views.js

    ##
    ## Misc. reasons.
    ##

    # SERVER-34868 Cannot run a legacy query on a session.
    - jstests/core/**/query/exhaust.js

    # SERVER-34772 Tailable Cursors are not allowed with snapshot readconcern.
    - jstests/core/**/awaitdata_getmore_cmd.js
    - jstests/core/**/getmore_cmd_maxtimems.js
    - jstests/core/**/tailable_cursor_invalidation.js
    - jstests/core/**/tailable_getmore_batch_size.js

    # Wrong count for top info (WriteLock)
    - jstests/core/**/query/top/top.js

    # Expects collection to not have been created
    - jstests/core/**/insert_id_undefined.js

    # Creates sessions explicitly, resulting in txns being run through different sessions
    # using a single txnNumber.
    - jstests/core/query/json_schema/misc_validation.js
    - jstests/core/catalog/views/views_all_commands.js

    # Committing a transaction when the server is fsync locked fails.
    - jstests/core/**/fsync.js

    # Expects legacy errors ($err).
    - jstests/core/**/constructors.js

    # txn interrupted by command outside of txn before getMore runs.
    - jstests/core/**/commands_namespace_parsing.js
    - jstests/core/**/drop_collection_cursors.js
    - jstests/core/**/geo_s2cursorlimitskip.js
    - jstests/core/**/getmore_invalidated_cursors.js
    - jstests/core/**/getmore_invalidated_documents.js
    - jstests/core/**/query/kill_cursors.js
    - jstests/core/**/list_indexes.js
    - jstests/core/**/oro.js
    - jstests/core/**/sort_with_update_between_getmores.js

    # Parallel Shell - we do not signal the override to end a txn when a parallel shell closes.
    - jstests/core/**/awaitdata_getmore_cmd.js
    - jstests/core/**/compact_keeps_indexes.js
    - jstests/core/**/count10.js
    - jstests/core/**/count_plan_summary.js
    - jstests/core/**/coveredIndex3.js
    - jstests/core/**/crud_ops_do_not_throw_locktimeout.js
    - jstests/core/**/currentop.js
    - jstests/core/**/distinct3.js
    - jstests/core/**/find_and_modify_concurrent_update.js
    - jstests/core/**/fsync.js
    - jstests/core/**/geo_update_btree.js
    - jstests/core/**/loadserverscripts.js
    - jstests/core/**/mr_killop.js
    - jstests/core/**/remove_concurrent_inserts.js
    - jstests/core/**/remove_adjacent_index_keys.js
    - jstests/core/**/shellstartparallel.js
    - jstests/core/**/update_namespace_details.js

    # Command expects to see result from parallel operation.
    # E.g. Suppose the following sequence of events: op1, join() op2 in parallel shell, op3.
    # op3 will still be using the snapshot from op1, and not see op2 at all.
    - jstests/core/**/benchrun_pipeline_updates.js
    - jstests/core/**/cursora.js

    # Expect drops/creates to fail or have a certain response:
    - jstests/core/**/explain_upsert.js

    # Expect certain responses, but retries of successfully completed commands may return
    # different values:
    - jstests/core/**/create_indexes.js
    - jstests/core/**/objid5.js

    # Expect results to return in a certain order, secondaries may apply ops out of order.
    - jstests/core/**/coveredIndex1.js
    - jstests/core/**/sortc.js

    - jstests/core/**/bench_test*.js # benchRun() used for writes
    - jstests/core/**/benchrun_pipeline_updates.js # benchRun() used for writes
    - jstests/core/**/connection_string_validation.js # Does not expect a replica set connection string.
    - jstests/core/**/explain_large_bounds.js # Stepdown can timeout waiting for global lock.
    - jstests/core/**/list_collections_filter.js # Temporary collections are dropped on failover.
    - jstests/core/**/startup_log.js # Checks pid, which is different on each server.

    # Creates new mongo connection but won't retry connecting.
    - jstests/core/**/shell_connection_strings.js

    # Does not support tojson of command objects.
    - jstests/core/**/query/function_prototype_bson_type.js

    # Examines _id of upserted document.
    - jstests/core/**/find_and_modify_new_upsert_sort.js
    - jstests/core/**/upsert_shell.js

    # TODO SERVER-31242: findAndModify no-op retry should respect the fields option.
    - jstests/core/**/crud_api.js
    - jstests/core/**/find_and_modify.js
    - jstests/core/**/find_and_modify_fields.js
    - jstests/core/**/find_and_modify_positional_new_remove.js
    - jstests/core/**/project_with_collation.js
  exclude_with_any_tags:
    - assumes_standalone_mongod
    ##
    # The next four tags correspond to the special errors thrown by the auto_retry_on_network_error.js
    # override when it refuses to run a certain command. Above each tag are the message(s) that cause
    # the tag to be warranted.
    ##
    # "Refusing to run a test that issues a getMore command since if a network error occurs during
    #   it then we won't know whether the cursor was advanced or not"
    - requires_getmore
    # "Refusing to run a test that issues non-retryable write operations since the test likely makes
    #   assertions on the write results and can lead to spurious failures if a network error occurs"
    - requires_non_retryable_writes
    # "Refusing to run a test that issues commands that are not blindly retryable"
    # "Refusing to run a test that issues an aggregation command with $out because it is not
    #   retryable"
    - requires_non_retryable_commands
    # "Refusing to run a test that issues commands that may return different values after a failover"
    # "Refusing to run a test that issues an aggregation command with explain because it may return
    #   incomplete results"
    # "Refusing to run a test that issues an aggregation command with $listLocalCursors or
    #   $listLocalSessions because they rely on in-memory state that may not survive failovers"
    # "Refusing to run a test that issues a mapReduce command, because it calls std::terminate() if
    #   interrupted by a stepdown"
    - does_not_support_stepdowns
    ##
    # The next three tags correspond to the special errors thrown by the
    # set_read_and_write_concerns.js override when it refuses to replace the readConcern or
    # writeConcern of a particular command. Above each tag are the message(s) that cause the tag to be
    # warranted.
    ##
    # "Cowardly refusing to override read concern of command: ..."
    - assumes_read_concern_unchanged
    # "writeConcern is not allowed within a multi-statement transaction"
    - assumes_write_concern_unchanged
    ##
    # The next tag corresponds to long running-operations, as they may exhaust their number
    # of retries and result in a network error being thrown.
    - operations_longer_than_stepdown_interval
    # This tag corresponds to operations which are run long enough to exceed the stepdown interval
    # when grouped into transactions
    - operations_longer_than_stepdown_interval_in_txns
    # Transactions are not allowed to operate on capped collections.
    - requires_capped
    - requires_profiling
    # Retrying a query can change whether a plan cache entry is active.
    - inspects_whether_plan_cache_entry_is_active
    - does_not_support_transactions
    # Operations in the main test shell aren't guaranteed to be causally consistent with operations
    # performed earlier in a parallel shell if multiple nodes are electable because the latest
    # operation and cluster times aren't shared between shells.
    # "Cowardly refusing to run test with network retries enabled when it uses startParallelShell()"
    - uses_parallel_shell
    # Transaction-continuing commands must use the same API parameters as the first command, so tests
    # that use API parameters cannot be run with transactions.
    - uses_api_parameters
    - does_not_support_causal_consistency
    - requires_timeseries # Transactions not supported
    ##
    # The next three tags correspond to the special errors thrown by the
    # fail_unclean_shutdown_incompatible_commands.js override when it refuses to run commands that are
    # inaccurate after an unclean shutdown. Above each tag is the message that causes the tag to be
    # warranted.
    ##
    # "Cowardly fail if fastcount is run with a mongod that had an unclean shutdown: ..."
    - requires_fastcount
    # "Cowardly fail if dbStats is run with a mongod that had an unclean shutdown: ..."
    - requires_dbstats
    # "Cowardly fail if collStats is run with a mongod that had an unclean shutdown: ..."
    - requires_collstats

executor:
  archive:
    hooks:
      - CheckReplOplogs
      - CheckReplDBHash
      - ValidateCollections
  config:
    shell_options:
      eval: >-
        globalThis.testingReplication = true;
        await import('jstests/libs/override_methods/network_error_and_txn_override.js');
        globalThis.db = connect(TestData.connectionString);
        await import("jstests/libs/override_methods/enable_sessions.js");
        await import('jstests/libs/override_methods/txn_passthrough_cmd_massage.js');
        await import("jstests/libs/override_methods/fail_unclean_shutdown_incompatible_commands.js");
        await import("jstests/libs/override_methods/fail_unclean_shutdown_start_parallel_shell.js");
      global_vars:
        TestData:
          logRetryAttempts: true
          networkErrorAndTxnOverrideConfig:
            retryOnNetworkErrors: true
            wrapCRUDinTransactions: true
          overrideRetryAttempts: 3
          sessionOptions:
            # Read your own writes is not guaranteed without causal consistency if all nodes are
            # electable.
            causalConsistency: true
            retryWrites: true
      # We specify nodb so the shell used by each test will attempt to connect after loading the
      # retry logic in auto_retry_on_network_error.js.
      nodb: ""
  hooks:
    # We use a stepdown interval of 15 seconds because we will retry all commands in a transaction
    # so we need to allow time for at most 10 operations to be re-run and then re-committed. If
    # too many network errors occur when re-running a transaction we will run out of retries.
    - class: ContinuousStepdown
      stepdown_interval_ms: 15000
      randomize_kill: true
    # The CheckReplDBHash hook waits until all operations have replicated to and have been applied
    # on the secondaries, so we run the ValidateCollections hook after it to ensure we're
    # validating the entire contents of the collection.
    - class: CheckReplOplogs
    - class: CheckReplDBHash
    - class: ValidateCollections
      shell_options:
        global_vars:
          TestData:
            skipEnforceFastCountOnValidate: true
    - class: CleanEveryN
      n: 20
  fixture:
    class: ReplicaSetFixture
    mongod_options:
      syncdelay: 5
      wiredTigerEngineConfigString: debug_mode=(table_logging=true)
      set_parameters:
        logComponentVerbosity:
          verbosity: 0
          command: 2
          replication:
            election: 4
            heartbeats: 2
            initialSync: 2
            rollback: 2
          storage:
            recovery: 2
          transaction: 4
        enableTestCommands: 1
        enableElectionHandoff: 0
    all_nodes_electable: true
    num_nodes: 3
    replset_config_options:
      settings:
        catchUpTimeoutMillis: 0
