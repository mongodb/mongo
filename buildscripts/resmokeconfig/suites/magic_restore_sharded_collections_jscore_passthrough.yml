test_kind: magic_restore_js_test

selector:
  roots:
    - jstests/core/**/*.js
    - jstests/fle2/**/*.js
    - src/mongo/db/modules/*/jstests/fle2/**/*.js
  exclude_files:
    # These tests run in the jscore_txn passthrough suites.
    - jstests/core/txns/**/*.js

    # The following tests fail because a certain command or functionality is not supported by
    # mongos. This command or functionality is placed in a comment next to the failing test.
    - jstests/core/**/apitest_db.js # serverStatus output doesn't have storageEngine.
    - jstests/core/**/awaitdata_getmore_cmd.js # capped collections.
    - jstests/core/**/bypass_doc_validation.js # sharded $out output not permitted
    - jstests/core/**/check_shard_index.js # checkShardingIndex.
    - jstests/core/**/compact_keeps_indexes.js # compact.
    - jstests/core/**/currentop.js # uses fsync.
    - jstests/core/**/dbhash.js # dbhash.
    - jstests/core/**/fsync.js # uses fsync.
    - jstests/core/**/geo_s2cursorlimitskip.js # profiling.
    - jstests/core/**/geo_update_btree2.js # notablescan.
    - jstests/core/**/queryoptimizera.js # "local" database.
    - jstests/core/**/startup_log.js # "local" database.
    - jstests/core/**/tailable_cursor_invalidation.js # capped collections.
    - jstests/core/**/tailable_getmore_batch_size.js # capped collections.
    - jstests/core/**/tailable_skip_limit.js # capped collections.
    - jstests/core/**/query/top/top.js # top.
    # The following tests fail because mongos behaves differently from mongod when testing certain
    # functionality. The differences are in a comment next to the failing test.
    - jstests/core/**/geo_2d_explain.js # executionSuccess in different spot in explain().
    - jstests/core/**/geo_s2explain.js # inputStage in different spot in explain().
    - jstests/core/**/geo_s2sparse.js # keysPerIndex in different spot in validate().
    - jstests/core/**/operation_latency_histogram.js # Stats are counted differently on mongos, SERVER-24880.
    # The following tests fail because they count indexes. These counts do not take into account the
    # additional hashed shard key indexes that are automatically added by this passthrough.
    - jstests/core/**/apitest_dbcollection.js
    - jstests/core/**/bad_index_plugin.js
    - jstests/core/**/create_indexes.js
    - jstests/core/**/list_indexes_non_existent_ns.js
    - jstests/core/**/mr_preserve_indexes.js
    # TODO: Remove after fixing SERVER-103278. executionStats.nReturned is incorrect for sharded distinct commands.
    - jstests/core/**/distinct_index1.js
    # TODO SERVER-32311: These tests use plan stage helpers which can't handle sharded explain output.
    - jstests/core/**/expr_index_use.js
    - jstests/core/**/index_multikey.js
    - jstests/core/**/query/explain/optimized_match_explain.js
    - jstests/core/**/sort_array.js

    # Magic Restore specific exclusions.

    # Uses a view with projected out _id which causes data consistency diffs due to natural order
    # differences between primary and secondary nodes from parallel oplog application.
    - jstests/core/views/views_find.js
    - jstests/core/views/views_aggregation.js
    - jstests/core/query/bson_size_limit.js

    # Uses documents that are too close to max BSON size for us to support passing to C++ as a BSON array.
    - jstests/core/query/max_doc_size.js
    - jstests/core/query/find/find_getmore_bsonsize.js

    # This test does a very large amount of inserts on a single shard which will trigger the balancer.
    # If we disable the balancer on the source cluster then it will remain enabled on the restore
    # nodes and still cause a diff. This is because the config shard needs to connect to its replica
    # set to apply the stashed balancer mode and we are unable to do that since we are running the
    # config server node on a different port than the configuration we pass in. We will have a
    # targeted test that handles this case for correctness.
    - jstests/core/query/query_settings/query_settings_size_limits.js

    # Spawns a separate shell program which is not compatible with try/catch wrapping.
    - src/mongo/db/modules/enterprise/jstests/fle2/fle2_bulk_write.js

    # Uses invalid views which causes listCollections to fail in the data consistency checker.
    - jstests/core/catalog/views/invalid_system_views.js
    - jstests/core/views/views_validation.js
    - jstests/core/txns/no_writes_to_config_transactions_with_prepared_transaction.js
    - jstests/core/catalog/list_collections_no_views.js

    # Expects to successfully drop invalid views. As drops are no-oped, the leftover
    # invalid views fail the data consistency checker.
    - jstests/core/catalog/list_catalog_stage_consistency.js
  exclude_with_any_tags:
    - assumes_standalone_mongod
    - assumes_against_mongod_not_mongos
    # This passthrough implicitly shards the accessed collections. Do not run tests where collections
    # can't be created on `getCollection` call.
    - assumes_no_implicit_collection_creation_on_get_collection
    # Tests tagged with the following will fail because they assume collections are not sharded.
    - assumes_no_implicit_collection_creation_after_drop
    - assumes_no_implicit_index_creation
    - assumes_unsharded_collection
    - cannot_create_unique_index_when_using_hashed_shard_key
    # system.profile collection doesn't exist on mongos.
    - requires_profiling
    # Capped collections cannot be sharded
    - requires_capped
    - uses_parallel_shell
    # These tests run many aggregations, and the override slows them down enough to hit the evergreen timeout.
    - query_intensive_pbt

executor:
  config:
    shell_options:
      eval: >-
        await import("jstests/libs/override_methods/implicitly_shard_accessed_collections.js");
        await import("jstests/libs/override_methods/noop_assertions.js");
        await import("jstests/libs/override_methods/noop_drop.js");
  hooks:
    - class: MagicRestoreEveryN
      n: 20
      randomize_pit: True
  fixture:
    class: ShardedClusterFixture
    mongos_options:
      set_parameters:
        enableTestCommands: 1
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        minSnapshotHistoryWindowInSeconds: 3600
      oplogSize: 2048
    num_rs_nodes_per_shard: 1
    num_shards: 2
