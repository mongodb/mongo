test_kind: fsm_workload_test

selector:
  roots:
  - jstests/concurrency/fsm_workloads/**/*.js
  - src/mongo/db/modules/*/jstests/concurrency/fsm_workloads/*.js
  exclude_files:
  # Disabled because MapReduce can lose cursors if the primary steps down.
  - jstests/concurrency/fsm_workloads/map_reduce_inline.js
  - jstests/concurrency/fsm_workloads/map_reduce_interrupt.js
  - jstests/concurrency/fsm_workloads/map_reduce_merge.js
  - jstests/concurrency/fsm_workloads/map_reduce_reduce.js
  - jstests/concurrency/fsm_workloads/map_reduce_replace.js
  - jstests/concurrency/fsm_workloads/map_reduce_replace_nonexistent.js
  - jstests/concurrency/fsm_workloads/map_reduce_replace_remove.js

  # Disabled due to MongoDB restrictions and/or workload restrictions

  # These workloads sometimes trigger 'Could not lock auth data update lock'
  # errors because the AuthorizationManager currently waits for only five
  # seconds to acquire the lock for authorization documents
  - jstests/concurrency/fsm_workloads/auth_create_role.js
  - jstests/concurrency/fsm_workloads/auth_create_user.js
  - jstests/concurrency/fsm_workloads/auth_drop_role.js
  - jstests/concurrency/fsm_workloads/auth_drop_user.js

  # uses >100MB of data, which can overwhelm test hosts
  - jstests/concurrency/fsm_workloads/agg_group_external.js
  - jstests/concurrency/fsm_workloads/agg_sort_external.js

  # compact can only be run against a standalone mongod
  - jstests/concurrency/fsm_workloads/compact.js
  - jstests/concurrency/fsm_workloads/compact_while_creating_indexes.js

  # can cause OOM kills on test hosts
  - jstests/concurrency/fsm_workloads/findAndModify_update_grow.js

  # cannot createIndex after dropDatabase without sharding first
  - jstests/concurrency/fsm_workloads/plan_cache_drop_database.js

  # reIndex is not supported in mongos.
  - jstests/concurrency/fsm_workloads/reindex.js
  - jstests/concurrency/fsm_workloads/reindex_background.js
  - jstests/concurrency/fsm_workloads/reindex_writeconflict.js

  # The WTWriteConflictException failpoint is not supported on mongos.
  - jstests/concurrency/fsm_workloads/collmod_writeconflict.js

  # TODO Undenylist (SERVER-38852).
  - jstests/concurrency/fsm_workloads/agg_out_interrupt_cleanup.js
  - jstests/concurrency/fsm_workloads/timeseries_agg_out_interrupt_cleanup.js

  # serverStatus does not include transaction metrics on mongos.
  - jstests/concurrency/fsm_workloads/multi_statement_transaction_atomicity_isolation_metrics_test.js

  # Uses the same transaction id across different routers, which is not allowed because when either
  # router tries to commit, it may not know the full participant list.
  - jstests/concurrency/fsm_workloads/multi_statement_transaction_all_commands_same_session.js

  # ChunkHelper directly talks to the config servers and doesn't support retries for network errors
  - jstests/concurrency/fsm_workloads/sharded_base_partitioned.js
  - jstests/concurrency/fsm_workloads/sharded_mergeChunks_partitioned.js
  - jstests/concurrency/fsm_workloads/sharded_moveChunk_partitioned.js
  - jstests/concurrency/fsm_workloads/sharded_splitChunk_partitioned.js

  # These workloads frequently time out waiting for the distributed lock to drop a sharded
  # collection.
  - jstests/concurrency/fsm_workloads/kill_aggregation.js
  - jstests/concurrency/fsm_workloads/kill_rooted_or.js

  # Uses getmores.
  - jstests/concurrency/fsm_workloads/agg_base.js
  - jstests/concurrency/fsm_workloads/agg_unionWith_interrupt_cleanup.js
  - jstests/concurrency/fsm_workloads/create_index_background.js
  - jstests/concurrency/fsm_workloads/create_index_background_partial_filter.js
  - jstests/concurrency/fsm_workloads/create_index_background_wildcard.js
  - jstests/concurrency/fsm_workloads/globally_managed_cursors.js
  - jstests/concurrency/fsm_workloads/indexed_insert_ordered_bulk.js
  - jstests/concurrency/fsm_workloads/indexed_insert_text.js
  - jstests/concurrency/fsm_workloads/indexed_insert_unordered_bulk.js
  - jstests/concurrency/fsm_workloads/indexed_insert_upsert.js
  - jstests/concurrency/fsm_workloads/indexed_insert_where.js
  - jstests/concurrency/fsm_workloads/list_indexes.js
  - jstests/concurrency/fsm_workloads/query_stats_concurrent.js
  - jstests/concurrency/fsm_workloads/random_moveChunk_multi_update_delete_change_streams.js
  - jstests/concurrency/fsm_workloads/reindex.js
  - jstests/concurrency/fsm_workloads/reindex_background.js
  - jstests/concurrency/fsm_workloads/reindex_writeconflict.js
  - jstests/concurrency/fsm_workloads/remove_multiple_documents.js
  - jstests/concurrency/fsm_workloads/remove_where.js
  - jstests/concurrency/fsm_workloads/server_status_with_time_out_cursors.js
  - jstests/concurrency/fsm_workloads/update_where.js
  - jstests/concurrency/fsm_workloads/yield.js
  - jstests/concurrency/fsm_workloads/yield_fetch.js
  - jstests/concurrency/fsm_workloads/yield_rooted_or.js
  - jstests/concurrency/fsm_workloads/yield_sort.js
  - jstests/concurrency/fsm_workloads/yield_sort_merge.js
  - jstests/concurrency/fsm_workloads/yield_text.js
  - jstests/concurrency/fsm_workloads/yield_with_drop.js
  - jstests/concurrency/fsm_workloads/yield_geo_near.js
  - jstests/concurrency/fsm_workloads/yield_geo_near_dedup.js

  # Uses non retryable writes.
  - jstests/concurrency/fsm_workloads/remove_and_bulk_insert.js
  - jstests/concurrency/fsm_workloads/update_and_bulk_insert.js
  - jstests/concurrency/fsm_workloads/update_check_index.js
  - jstests/concurrency/fsm_workloads/update_multifield_multiupdate.js
  - jstests/concurrency/fsm_workloads/update_multifield_multiupdate_noindex.js
  - jstests/concurrency/fsm_workloads/update_ordered_bulk_inc.js
  - jstests/concurrency/fsm_workloads/yield_id_hack.js

  # Uses non retryable commands.
  - jstests/concurrency/fsm_workloads/agg_out.js
  - jstests/concurrency/fsm_workloads/agg_sort.js
  - jstests/concurrency/fsm_workloads/collmod.js
  - jstests/concurrency/fsm_workloads/collmod_separate_collections.js
  - jstests/concurrency/fsm_workloads/collmod_writeconflict.js
  - jstests/concurrency/fsm_workloads/agg_out_interrupt_cleanup.js
  - jstests/concurrency/fsm_workloads/timeseries_agg_out_interrupt_cleanup.js
  - jstests/concurrency/fsm_workloads/invalidated_cursors.js
  - jstests/concurrency/fsm_workloads/kill_multicollection_aggregation.js
  - jstests/concurrency/fsm_workloads/view_catalog.js
  - jstests/concurrency/fsm_workloads/view_catalog_cycle_lookup.js
  - jstests/concurrency/fsm_workloads/view_catalog_cycle_with_drop.js

  # The auto_retry_on_network_error.js override needs to overwrite the response from drop on
  # NamespaceNotFound, and since this workload only creates and drops collections there isn't
  # much value in running it.
  - jstests/concurrency/fsm_workloads/drop_collection.js

  # serverStatus does not include transaction metrics on mongos.
  - jstests/concurrency/fsm_workloads/multi_statement_transaction_atomicity_isolation_metrics_test.js

  # Use non-retryable commands not allowed by the network retry helper.
  - jstests/concurrency/fsm_workloads/snapshot_read_kill_op_only.js
  - jstests/concurrency/fsm_workloads/snapshot_read_kill_operations.js

  # Time-series collections are not supported on mongos.
  - jstests/concurrency/fsm_workloads/create_timeseries_collection.js

  # Induces non-blindly-retriable errors (see SERVER-45767).
  - jstests/concurrency/fsm_workloads/create_database.js

  # TODO(SERVER-71510): Un-denylist this test.
  - jstests/concurrency/fsm_workloads/snapshot_read_catalog_operations.js

  # Next test fails because requestResumeToken is not supported without Resharding.
  - jstests/concurrency/fsm_workloads/internal_transactions_resharding.js

  # These tests run large commands which can sometimes trigger IncompleteTransactionHistory
  # if the initial sync node stepup happens at a specific timing.
  - jstests/concurrency/fsm_workloads/create_capped_collection.js
  - jstests/concurrency/fsm_workloads/rename_capped_collection_droptarget.js
  - jstests/concurrency/fsm_workloads/agg_graph_lookup.js
  - jstests/concurrency/fsm_workloads/timeseries_insert_idle_bucket_expiration.js

  # Applying operation on feature compatibility version document not supported in initial sync
  - jstests/concurrency/fsm_workloads/drop_database_sharded_setFCV.js
  - jstests/concurrency/fsm_workloads/random_DDL_setFCV_operations.js

  # Resharding cannot succeed on a node which undergoes initial sync because initial sync
  # does not preserve the ability to read at the cloneTimestamp in the past
  - jstests/concurrency/fsm_workloads/write_without_shard_key_with_resharding.js
  - jstests/concurrency/fsm_workloads/reshard_collection_crud_ops.js

  exclude_with_any_tags:
  - requires_non_retryable_writes
  - assumes_against_mongod_not_mongos
  - assumes_balancer_off
  # Curop requires readConcern local.
  - uses_curop_agg_stage
  # mongos has no system.profile collection.
  - requires_profiling
  - does_not_support_stepdowns
  - assumes_unsharded_collection
  - assumes_standalone_mongod
  - assumes_read_preference_unchanged
  # The tests start their own ReplSetTest
  - requires_replication
  - does_not_support_causal_consistency

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - CheckMetadataConsistencyInBackground
      - ValidateCollections
    tests: true
  config:
    shell_options:
      eval: >-
        globalThis.testingReplication = true;
        await import("jstests/libs/override_methods/set_read_preference_secondary.js");
        await import('jstests/libs/override_methods/enable_causal_consistency_without_read_pref.js');
      global_vars:
        TestData:
          defaultReadPreference: {mode: "secondaryPreferred", tags: [{tag: "INIT_SYNC"}, {}]}
          runningWithBalancer: true
          # Will prompt the FSM workers to use 'network_error_and_txn_override.js'
          # and generally retry operations.
          runningWithConfigStepdowns: true
          runningWithShardStepdowns: true
          useActionPermittedFile: true
          fsmPreOverridesLoadedCallback:
            import("jstests/libs/override_methods/implicitly_retry_on_migration_in_progress.js");

  hooks:
  - class: ContinuousInitialSync
    use_action_permitted_file: true
    sync_interval_secs: 15
  - class: CheckShardFilteringMetadata
  - class: CheckReplDBHash
  - class: CheckMetadataConsistencyInBackground
  - class: CheckOrphansDeleted
  - class: CheckRoutingTableConsistency
  - class: CheckClusterIndexConsistency
  - class: ValidateCollections # Validation can interfere with other operations, so this goes last.
    shell_options:
      global_vars:
        TestData:
          skipEnforceFastCountOnValidate: true
  - class: CleanupConcurrencyWorkloads
  fixture:
    class: ShardedClusterFixture
    mongos_options:
      set_parameters:
        enableTestCommands: 1
        queryAnalysisSamplerConfigurationRefreshSecs: 1
        defaultConfigCommandTimeoutMS: 90000
    shard_options:
      all_nodes_electable: True
      mongod_options:
        oplogSize: 1024
      start_initial_sync_node: True
      electable_initial_sync_node: True
      replset_config_options:
        settings:
          catchUpTimeoutMillis: 0
    configsvr_options:
      num_nodes: 3
      all_nodes_electable: True
      start_initial_sync_node: True
      electable_initial_sync_node: True
      replset_config_options:
        settings:
          catchUpTimeoutMillis: 0
    mongod_options:
      set_parameters:
        enableTestCommands: 1
        enableElectionHandoff: 0
        roleGraphInvalidationIsFatal: 1
        collectionClonerBatchSize: 10
        initialSyncOplogFetcherBatchSize: 10
        queryAnalysisWriterIntervalSecs: 1
        queryAnalysisSamplerConfigurationRefreshSecs: 1
        defaultConfigCommandTimeoutMS: 90000
        skipDroppingHashedShardKeyIndex: true
    num_rs_nodes_per_shard: 3
    num_shards: 2
    num_mongos: 2
    enable_balancer: true
    random_migrations: true
